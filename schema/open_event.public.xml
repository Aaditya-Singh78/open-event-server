<?xml version="1.0" encoding="UTF-8"?><database name="open_event" schema="public" type="PostgreSQL - 12.8">
   <sequences>
      <sequence increment="1" name="access_codes_id_seq" startValue="1"/>
      <sequence increment="1" name="activity_id_seq" startValue="1"/>
      <sequence increment="1" name="badge_field_forms_id_seq" startValue="1"/>
      <sequence increment="1" name="badge_forms_id_seq" startValue="1"/>
      <sequence increment="1" name="call_for_papers_id_seq" startValue="1"/>
      <sequence increment="1" name="custom_form_options_id_seq" startValue="1"/>
      <sequence increment="1" name="custom_form_translates_id_seq" startValue="1"/>
      <sequence increment="1" name="custom_forms_id_seq" startValue="1"/>
      <sequence increment="1" name="custom_placeholder_id_seq" startValue="1"/>
      <sequence increment="1" name="custom_sys_role_id_seq" startValue="1"/>
      <sequence increment="1" name="discount_codes_id_seq" startValue="1"/>
      <sequence increment="1" name="email_notification_id_seq" startValue="1"/>
      <sequence increment="1" name="event_copyright_id_seq" startValue="1"/>
      <sequence increment="1" name="event_invoices_id_seq" startValue="1"/>
      <sequence increment="1" name="event_locations_id_seq" startValue="1"/>
      <sequence increment="1" name="event_sub_topics_id_seq" startValue="1"/>
      <sequence increment="1" name="event_topics_id_seq" startValue="1"/>
      <sequence increment="1" name="event_types_id_seq" startValue="1"/>
      <sequence increment="1" name="events_id_seq" startValue="1"/>
      <sequence increment="1" name="exhibitors_id_seq" startValue="1"/>
      <sequence increment="1" name="export_jobs_id_seq" startValue="1"/>
      <sequence increment="1" name="faq_id_seq" startValue="1"/>
      <sequence increment="1" name="faq_types_id_seq" startValue="1"/>
      <sequence increment="1" name="feedback_id_seq" startValue="1"/>
      <sequence increment="1" name="groups_id_seq" startValue="1"/>
      <sequence increment="1" name="image_sizes_id_seq" startValue="1"/>
      <sequence increment="1" name="import_jobs_id_seq" startValue="1"/>
      <sequence increment="1" name="mails_id_seq" startValue="1"/>
      <sequence increment="1" name="message_settings_id_seq" startValue="1"/>
      <sequence increment="1" name="microlocation_id_seq" startValue="1"/>
      <sequence increment="1" name="notification_actors_id_seq" startValue="1"/>
      <sequence increment="1" name="notification_content_id_seq" startValue="1"/>
      <sequence increment="1" name="notification_id_seq" startValue="1"/>
      <sequence increment="1" name="notification_settings_id_seq" startValue="1"/>
      <sequence increment="1" name="orders_id_seq" startValue="1"/>
      <sequence increment="1" name="pages_id_seq" startValue="1"/>
      <sequence increment="1" name="panel_permissions_id_seq" startValue="1"/>
      <sequence increment="1" name="permissions_id_seq" startValue="1"/>
      <sequence increment="1" name="role_id_seq" startValue="1"/>
      <sequence increment="1" name="role_invite_id_seq" startValue="1"/>
      <sequence increment="1" name="service_id_seq" startValue="1"/>
      <sequence increment="1" name="session_id_seq" startValue="1"/>
      <sequence increment="1" name="session_type_id_seq" startValue="1"/>
      <sequence increment="1" name="sessions_speakers_links_id_seq" startValue="1"/>
      <sequence increment="1" name="settings_id_seq" startValue="1"/>
      <sequence increment="1" name="social_link_id_seq" startValue="1"/>
      <sequence increment="1" name="speaker_id_seq" startValue="1"/>
      <sequence increment="1" name="speaker_invites_id_seq" startValue="1"/>
      <sequence increment="1" name="sponsors_id_seq" startValue="1"/>
      <sequence increment="1" name="station_id_seq" startValue="1"/>
      <sequence increment="1" name="station_store_paxs_id_seq" startValue="1"/>
      <sequence increment="1" name="stripe_authorizations_id_seq" startValue="1"/>
      <sequence increment="1" name="tax_id_seq" startValue="1"/>
      <sequence increment="1" name="ticket_fees_id_seq" startValue="1"/>
      <sequence increment="1" name="ticket_holders_id_seq" startValue="1"/>
      <sequence increment="1" name="ticket_id_seq" startValue="1"/>
      <sequence increment="1" name="ticket_tag_id_seq" startValue="1"/>
      <sequence increment="1" name="tracks_id_seq" startValue="1"/>
      <sequence increment="1" name="transaction_id_seq" startValue="1"/>
      <sequence increment="1" name="translation_channels_id_seq" startValue="1"/>
      <sequence increment="1" name="user_check_in_id_seq" startValue="1"/>
      <sequence increment="1" name="user_emails_id_seq" startValue="1"/>
      <sequence increment="1" name="user_favourite_events_id_seq" startValue="1"/>
      <sequence increment="1" name="user_favourite_sessions_id_seq" startValue="1"/>
      <sequence increment="1" name="user_follow_groups_id_seq" startValue="1"/>
      <sequence increment="1" name="user_permissions_id_seq" startValue="1"/>
      <sequence increment="1" name="user_system_role_id_seq" startValue="1"/>
      <sequence increment="1" name="user_token_blacklist_time_id_seq" startValue="1"/>
      <sequence increment="1" name="users_events_roles_id_seq" startValue="1"/>
      <sequence increment="1" name="users_groups_roles_id_seq" startValue="1"/>
      <sequence increment="1" name="users_id_seq" startValue="1"/>
      <sequence increment="1" name="video_channels_id_seq" startValue="1"/>
      <sequence increment="1" name="video_recordings_id_seq" startValue="1"/>
      <sequence increment="1" name="video_stream_moderators_id_seq" startValue="1"/>
      <sequence increment="1" name="video_streams_id_seq" startValue="1"/>
   </sequences>
   <tables>
      <table name="access_codes" numRows="390" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('access_codes_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="access_code_id" foreignKey="access_codes_tickets_access_code_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="access_codes_tickets"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="code" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="is_active" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="tickets_number" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="min_quantity" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="max_quantity" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="6" name="valid_from" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="7" name="valid_till" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="access_codes_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="6" id="9" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="marketer_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="access_codes_marketer_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="access_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="12" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="ticket_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="access_codes_ticket_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="tickets"/>
         </column>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="access_codes_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="access_codes_tickets" numRows="306" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="access_code_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="access_codes_tickets_access_code_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="access_codes"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="ticket_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="access_codes_tickets_ticket_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="tickets"/>
         </column>
         <primaryKey column="access_code_id" sequenceNumberInPK="1"/>
         <primaryKey column="ticket_id" sequenceNumberInPK="2"/>
         <index name="access_codes_tickets_pkey" unique="true">
            <column ascending="true" name="access_code_id"/>
            <column ascending="true" name="ticket_id"/>
         </index>
      </table>
      <table name="activities" numRows="177992" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('activity_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="actor" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="2" name="time" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="action" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="activity_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="alembic_version" numRows="0" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="version_num" nullable="false" remarks="" size="32" type="varchar" typeCode="12"/>
      </table>
      <table name="badge_field_forms" numRows="49" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('badge_field_forms_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="badge_form_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="badge_field_forms_badge_form_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="badge_forms"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="badge_id" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="field_identifier" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="custom_field" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="sample_text" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="font_size" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="font_name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="font_color" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="text_rotation" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="text_alignment" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="text_type" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="12" name="is_deleted" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="margin_top" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="14" name="margin_bottom" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="15" name="margin_left" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="16" name="margin_right" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="17" name="qr_custom_field" nullable="true" remarks="" size="2147483647" type="_varchar" typeCode="2003"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="18" name="is_field_expanded" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="19" name="font_weight" nullable="true" remarks="" size="2147483647" type="_json" typeCode="2003"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="badge_field_forms_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="badge_forms" numRows="12" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('badge_forms_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="badge_form_id" foreignKey="badge_field_forms_badge_form_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="badge_field_forms"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="badge_id" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="badge_size" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="badge_color" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="badge_image_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="badge_orientation" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="badge_forms_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="badge_forms_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="custom_form_options" numRows="0" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="6" id="0" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="true" defaultValue="nextval('custom_form_options_id_seq'::regclass)" digits="0" id="1" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="value" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="custom_form_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="custom_form_options_custom_form_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="custom_forms"/>
         </column>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="custom_form_options_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="custom_form_translates" numRows="169" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('custom_form_translates_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="custom_form_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="custom_form_translates_custom_form_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="custom_forms"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="language_code" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="form_id" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="custom_form_translates_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="custom_forms" numRows="67163" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('custom_forms_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="custom_form_id" foreignKey="custom_form_options_custom_form_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="custom_form_options"/>
            <child column="custom_form_id" foreignKey="custom_form_translates_custom_form_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="custom_form_translates"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="custom_forms_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="field_identifier" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="form" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="is_fixed" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="is_included" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="is_required" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="type" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="description" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="9" name="is_complex" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="11" name="is_public" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="0" digits="0" id="12" name="position" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="form_id" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="14" name="min" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="15" name="max" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="16" name="main_language" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="17" name="is_allow_edit" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="custom_forms_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="custom_form_identifier" unique="true">
            <column ascending="true" name="event_id"/>
            <column ascending="true" name="field_identifier"/>
            <column ascending="true" name="form"/>
            <column ascending="true" name="form_id"/>
         </index>
      </table>
      <table name="custom_placeholders" numRows="1" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('custom_placeholder_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="original_image_url" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="thumbnail_image_url" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="copyright" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="origin" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="event_sub_topic_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="custom_placeholders_event_sub_topics" implied="false" onDeleteCascade="true" schema="public" table="event_sub_topics"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="icon_image_url" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="large_image_url" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="custom_placeholder_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="custom_sys_roles" numRows="2" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('custom_sys_role_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="role_id" foreignKey="roles_panels_role_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="roles_panels"/>
            <child column="role_id" foreignKey="user_system_role_role_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="user_system_role"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="custom_sys_role_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="custom_sys_role_name_key" unique="true">
            <column ascending="true" name="name"/>
         </index>
      </table>
      <table name="discount_codes" numRows="70550" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('discount_codes_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="discount_code_id" foreignKey="discount_codes_tickets_discount_code_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="discount_codes_tickets"/>
            <child column="discount_code_id" foreignKey="events_discount_code_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
            <child column="discount_code_id" foreignKey="orders_discount_code_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="orders"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="code" nullable="false" remarks="" size="2147483647" type="citext" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="2" name="value" nullable="false" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="type" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="is_active" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="tickets_number" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="min_quantity" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="max_quantity" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="8" name="valid_from" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="9" name="valid_till" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="discount_codes_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="6" id="11" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="12" name="marketer_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="discount_codes_marketer_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="used_for" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="14" name="discount_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="15" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="discount_codes_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="uq_event_discount_code" unique="true">
            <column ascending="true" name="event_id"/>
            <column ascending="true" name="code"/>
            <column ascending="true" name="deleted_at"/>
         </index>
      </table>
      <table name="discount_codes_tickets" numRows="70179" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="discount_code_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="discount_codes_tickets_discount_code_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="discount_codes"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="ticket_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="discount_codes_tickets_ticket_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="tickets"/>
         </column>
         <primaryKey column="discount_code_id" sequenceNumberInPK="1"/>
         <primaryKey column="ticket_id" sequenceNumberInPK="2"/>
         <index name="discount_codes_tickets_pkey" unique="true">
            <column ascending="true" name="discount_code_id"/>
            <column ascending="true" name="ticket_id"/>
         </index>
      </table>
      <table name="email_notifications" numRows="574" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('email_notification_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="next_event" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="new_paper" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="session_accept_reject" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="session_schedule" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="user_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="email_notifications_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="email_notifications_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="after_ticket_purchase" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="8" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="email_notification_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="event_copyrights" numRows="272" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('event_copyright_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="holder" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="holder_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="licence" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="licence_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="year" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="logo" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="event_copyrights_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="6" id="8" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="event_copyright_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="event_invoices" numRows="39" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('event_invoices_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="identifier" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="2" name="amount" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="user_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="event_invoices_user_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="users"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="event_invoices_event_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="6" id="5" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="6" name="completed_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="transaction_id" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="paid_via" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="payment_mode" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="brand" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="exp_month" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="12" name="exp_year" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="last4" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="14" name="stripe_token" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="15" name="paypal_token" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="16" name="status" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="17" name="invoice_pdf_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="18" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="19" name="issued_at" nullable="false" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="event_invoices_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="event_invoices_identifier_key" unique="true">
            <column ascending="true" name="identifier"/>
         </index>
      </table>
      <table name="event_locations" numRows="5" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('event_locations_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="slug" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="event_locations_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="event_locations_slug_key" unique="true">
            <column ascending="true" name="slug"/>
         </index>
      </table>
      <table name="event_sub_topics" numRows="62" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('event_sub_topics_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="event_sub_topic_id" foreignKey="custom_placeholders_event_sub_topics" implied="false" onDeleteCascade="true" schema="public" table="custom_placeholders"/>
            <child column="event_sub_topic_id" foreignKey="events_event_sub_topic_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="slug" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="event_topic_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="event_sub_topics_event_topic_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="event_topics"/>
         </column>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="event_sub_topics_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="slug_event_topic_id" unique="true">
            <column ascending="true" name="slug"/>
            <column ascending="true" name="event_topic_id"/>
         </index>
      </table>
      <table name="event_topics" numRows="19" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('event_topics_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="event_topic_id" foreignKey="event_sub_topics_event_topic_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="event_sub_topics"/>
            <child column="event_topic_id" foreignKey="events_event_topic_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="slug" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="3" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="system_image_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="event_topics_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="event_topics_slug_key" unique="true">
            <column ascending="true" name="slug"/>
         </index>
      </table>
      <table name="event_types" numRows="20" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('event_types_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="event_type_id" foreignKey="events_event_type_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="slug" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="3" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="event_types_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="event_types_slug_key" unique="true">
            <column ascending="true" name="slug"/>
         </index>
      </table>
      <table name="events" numRows="3114" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('events_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="event_id" foreignKey="access_codes_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="access_codes"/>
            <child column="event_id" foreignKey="badge_forms_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="badge_forms"/>
            <child column="event_id" foreignKey="custom_forms_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="custom_forms"/>
            <child column="event_id" foreignKey="discount_codes_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="discount_codes"/>
            <child column="event_id" foreignKey="email_notifications_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="email_notifications"/>
            <child column="event_id" foreignKey="event_copyrights_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="event_copyrights"/>
            <child column="event_id" foreignKey="event_invoices_event_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="event_invoices"/>
            <child column="event_id" foreignKey="exhibitors_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="exhibitors"/>
            <child column="event_id" foreignKey="export_jobs_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="export_jobs"/>
            <child column="event_id" foreignKey="faq_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="faq"/>
            <child column="event_id" foreignKey="faq_types_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="faq_types"/>
            <child column="event_id" foreignKey="feedback_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="feedback"/>
            <child column="event_id" foreignKey="microlocations_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="microlocations"/>
            <child column="event_id" foreignKey="orders_event_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="orders"/>
            <child column="event_id" foreignKey="role_invites_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="role_invites"/>
            <child column="event_id" foreignKey="session_types_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="session_types"/>
            <child column="event_id" foreignKey="sessions_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="sessions"/>
            <child column="event_id" foreignKey="social_links_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="social_links"/>
            <child column="event_id" foreignKey="speaker_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="speaker"/>
            <child column="event_id" foreignKey="speaker_invites_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="speaker_invites"/>
            <child column="event_id" foreignKey="call_for_papers_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="speakers_calls"/>
            <child column="event_id" foreignKey="sponsors_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="sponsors"/>
            <child column="event_id" foreignKey="station_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="station"/>
            <child column="event_id" foreignKey="stripe_authorizations_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="stripe_authorizations"/>
            <child column="event_id" foreignKey="tax_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="tax"/>
            <child column="event_id" foreignKey="ticket_holders_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="ticket_holders"/>
            <child column="event_id" foreignKey="ticket_tag_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="ticket_tag"/>
            <child column="event_id" foreignKey="tickets_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="tickets"/>
            <child column="event_id" foreignKey="tracks_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="tracks"/>
            <child column="event_id" foreignKey="user_favourite_events_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="user_favourite_events"/>
            <child column="event_id" foreignKey="user_system_role_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="user_system_role"/>
            <child column="event_id" foreignKey="users_events_roles_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users_events_roles"/>
            <child column="event_id" foreignKey="video_streams_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="video_streams"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="identifier" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="external_event_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="logo_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="5" name="starts_at" nullable="false" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="6" name="ends_at" nullable="false" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="timezone" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="8" name="latitude" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="9" name="longitude" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="location_name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="searchable_location_name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="12" name="description" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="original_image_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="14" name="thumbnail_image_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="15" name="large_image_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="16" name="icon_image_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="17" name="owner_name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="true" digits="0" id="18" name="is_map_shown" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="19" name="owner_description" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="20" name="is_sessions_speakers_enabled" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="21" name="privacy" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="22" name="state" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="23" name="event_type_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="events_event_type_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="event_types"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="24" name="event_topic_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="events_event_topic_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="event_topics"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="25" name="event_sub_topic_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="events_event_sub_topic_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="event_sub_topics"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="26" name="ticket_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="27" name="code_of_conduct" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="28" name="schedule_published_on" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="29" name="is_ticketing_enabled" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="30" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="31" name="payment_country" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="32" name="payment_currency" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="33" name="paypal_email" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="34" name="is_tax_enabled" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="35" name="can_pay_by_paypal" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="36" name="can_pay_by_stripe" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="37" name="can_pay_by_cheque" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="38" name="can_pay_by_bank" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="39" name="can_pay_onsite" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="40" name="cheque_details" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="41" name="bank_details" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="42" name="onsite_details" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="43" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="44" name="is_sponsors_enabled" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="45" name="ical_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="46" name="pentabarf_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="47" name="xcal_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="48" name="has_owner_info" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="49" name="discount_code_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="events_discount_code_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="discount_codes"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="50" name="refund_policy" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="51" name="is_stripe_linked" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="52" name="online" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="53" name="is_donation_enabled" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="54" name="is_featured" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="55" name="can_pay_by_omise" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="true" digits="0" id="56" name="is_ticket_form_enabled" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="57" name="can_pay_by_alipay" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="58" name="show_remaining_tickets" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="59" name="is_billing_info_mandatory" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="60" name="can_pay_by_paytm" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="61" name="is_promoted" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="62" name="is_demoted" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="63" name="group_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="events_group_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="groups"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="64" name="after_order_message" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="65" name="is_chat_enabled" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="66" name="chat_room_id" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="67" name="document_links" nullable="true" remarks="" size="2147483647" type="jsonb" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="68" name="is_document_enabled" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="69" name="is_videoroom_enabled" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="70" name="is_oneclick_signup_enabled" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="71" name="is_cfs_enabled" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="72" name="is_announced" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="73" name="completed_order_sales" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="74" name="placed_order_sales" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="75" name="pending_order_sales" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="76" name="completed_order_tickets" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="77" name="placed_order_tickets" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="78" name="pending_order_tickets" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="79" name="can_pay_by_invoice" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="80" name="invoice_details" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="81" name="public_stream_link" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="82" name="stream_loop" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="83" name="stream_autoplay" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="84" name="is_badges_enabled" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="events_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="events_identifier_key" unique="true">
            <column ascending="true" name="identifier"/>
         </index>
      </table>
      <table name="events_version" numRows="27886" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="identifier" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="external_event_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="logo_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="5" name="starts_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="6" name="ends_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="timezone" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="8" name="latitude" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="9" name="longitude" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="location_name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="searchable_location_name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="12" name="description" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="original_image_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="14" name="thumbnail_image_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="15" name="large_image_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="16" name="icon_image_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="17" name="owner_name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="true" digits="0" id="18" name="is_map_shown" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="19" name="owner_description" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="20" name="is_sessions_speakers_enabled" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="21" name="privacy" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="22" name="state" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="23" name="event_type_id" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="24" name="event_topic_id" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="25" name="event_sub_topic_id" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="26" name="ticket_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="27" name="code_of_conduct" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="28" name="is_ticketing_enabled" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="29" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="30" name="payment_country" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="31" name="payment_currency" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="32" name="paypal_email" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="33" name="is_tax_enabled" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="34" name="can_pay_by_paypal" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="35" name="can_pay_by_stripe" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="36" name="can_pay_by_cheque" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="37" name="can_pay_by_bank" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="38" name="can_pay_onsite" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="39" name="cheque_details" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="40" name="bank_details" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="41" name="onsite_details" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="42" name="transaction_id" nullable="false" remarks="" size="19" type="int8" typeCode="-5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="43" name="operation_type" nullable="false" remarks="" size="5" type="int2" typeCode="5"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="44" name="is_sponsors_enabled" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="45" name="ical_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="46" name="pentabarf_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="47" name="xcal_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="48" name="has_owner_info" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="49" name="discount_code_id" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="50" name="refund_policy" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="51" name="is_stripe_linked" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="52" name="is_donation_enabled" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="53" name="is_featured" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="54" name="can_pay_by_omise" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="true" digits="0" id="55" name="is_ticket_form_enabled" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="56" name="can_pay_by_alipay" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="57" name="show_remaining_tickets" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="58" name="is_billing_info_mandatory" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="59" name="can_pay_by_paytm" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="60" name="is_promoted" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="61" name="online" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="62" name="is_demoted" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="63" name="group_id" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="64" name="after_order_message" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="65" name="is_chat_enabled" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="66" name="chat_room_id" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="67" name="document_links" nullable="true" remarks="" size="2147483647" type="jsonb" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="68" name="is_document_enabled" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="69" name="is_videoroom_enabled" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="70" name="is_oneclick_signup_enabled" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="71" name="is_cfs_enabled" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="72" name="is_announced" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="73" name="completed_order_sales" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="74" name="placed_order_sales" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="75" name="pending_order_sales" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="76" name="completed_order_tickets" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="77" name="placed_order_tickets" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="78" name="pending_order_tickets" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="79" name="can_pay_by_invoice" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="80" name="invoice_details" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="81" name="public_stream_link" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="82" name="stream_loop" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="83" name="stream_autoplay" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="84" name="is_badges_enabled" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <primaryKey column="transaction_id" sequenceNumberInPK="2"/>
         <index name="events_version_pkey" unique="true">
            <column ascending="true" name="id"/>
            <column ascending="true" name="transaction_id"/>
         </index>
         <index name="ix_events_version_operation_type" unique="false">
            <column ascending="true" name="operation_type"/>
         </index>
         <index name="ix_events_version_transaction_id" unique="false">
            <column ascending="true" name="transaction_id"/>
         </index>
      </table>
      <table name="exhibitors" numRows="196" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="6" id="0" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="1" name="modified_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="true" defaultValue="nextval('exhibitors_id_seq'::regclass)" digits="0" id="2" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="exhibitor_id" foreignKey="exhibitors_sessions_exhibitor_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="exhibitors_sessions"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="description" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="0" digits="0" id="6" name="position" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="logo_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="banner_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="video_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="slides_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="event_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="exhibitors_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="12" name="social_links" nullable="true" remarks="" size="2147483647" type="json" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="'pending'::character varying" digits="0" id="13" name="status" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="14" name="contact_email" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="15" name="contact_link" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="16" name="enable_video_room" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="17" name="thumbnail_image_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="exhibitors_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="exhibitors_sessions" numRows="65" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="session_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="exhibitors_sessions_session_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="sessions"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="exhibitor_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="exhibitors_sessions_exhibitor_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="exhibitors"/>
         </column>
         <primaryKey column="session_id" sequenceNumberInPK="1"/>
         <primaryKey column="exhibitor_id" sequenceNumberInPK="2"/>
         <index name="exhibitors_sessions_pkey" unique="true">
            <column ascending="true" name="session_id"/>
            <column ascending="true" name="exhibitor_id"/>
         </index>
      </table>
      <table name="export_jobs" numRows="1308" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('export_jobs_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="task" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="2" name="starts_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="user_email" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="export_jobs_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="attendee_id" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="export_jobs_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="faq" numRows="14" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('faq_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="question" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="answer" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="faq_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="faq_type_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="faq_faq_type_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="faq_types"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="6" id="5" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="faq_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="faq_types" numRows="0" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('faq_types_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="faq_type_id" foreignKey="faq_faq_type_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="faq"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="faq_types_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="faq_types_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="feedback" numRows="399" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('feedback_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="1" name="rating" nullable="false" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="comment" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="user_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="feedback_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="feedback_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="6" id="5" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="session_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="feedback_session_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="sessions"/>
         </column>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="feedback_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="session_user_uc" unique="true">
            <column ascending="true" name="session_id"/>
            <column ascending="true" name="user_id"/>
         </index>
      </table>
      <table name="geography_columns" numRows="0" remarks="" schema="public" type="VIEW" viewSql=" SELECT current_database() AS f_table_catalog,&#10;    n.nspname AS f_table_schema,&#10;    c.relname AS f_table_name,&#10;    a.attname AS f_geography_column,&#10;    postgis_typmod_dims(a.atttypmod) AS coord_dimension,&#10;    postgis_typmod_srid(a.atttypmod) AS srid,&#10;    postgis_typmod_type(a.atttypmod) AS type&#10;   FROM pg_class c,&#10;    pg_attribute a,&#10;    pg_type t,&#10;    pg_namespace n&#10;  WHERE ((t.typname = 'geography'::name) AND (a.attisdropped = false) AND (a.atttypid = t.oid) AND (a.attrelid = c.oid) AND (c.relnamespace = n.oid) AND (c.relkind = ANY (ARRAY['r'::&quot;char&quot;, 'v'::&quot;char&quot;, 'm'::&quot;char&quot;, 'f'::&quot;char&quot;, 'p'::&quot;char&quot;])) AND (NOT pg_is_other_temp_schema(c.relnamespace)) AND has_table_privilege(c.oid, 'SELECT'::text));">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="f_table_catalog" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="f_table_schema" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="f_table_name" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="f_geography_column" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="coord_dimension" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="srid" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="srid" foreignKey="Implied Constraint" implied="true" onDeleteCascade="false" schema="public" table="spatial_ref_sys"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="type" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
      </table>
      <table name="geometry_columns" numRows="0" remarks="" schema="public" type="VIEW" viewSql=" SELECT (current_database())::character varying(256) AS f_table_catalog,&#10;    n.nspname AS f_table_schema,&#10;    c.relname AS f_table_name,&#10;    a.attname AS f_geometry_column,&#10;    COALESCE(postgis_typmod_dims(a.atttypmod), sn.ndims, 2) AS coord_dimension,&#10;    COALESCE(NULLIF(postgis_typmod_srid(a.atttypmod), 0), sr.srid, 0) AS srid,&#10;    (replace(replace(COALESCE(NULLIF(upper(postgis_typmod_type(a.atttypmod)), 'GEOMETRY'::text), st.type, 'GEOMETRY'::text), 'ZM'::text, ''::text), 'Z'::text, ''::text))::character varying(30) AS type&#10;   FROM ((((((pg_class c&#10;     JOIN pg_attribute a ON (((a.attrelid = c.oid) AND (NOT a.attisdropped))))&#10;     JOIN pg_namespace n ON ((c.relnamespace = n.oid)))&#10;     JOIN pg_type t ON ((a.atttypid = t.oid)))&#10;     LEFT JOIN ( SELECT s.connamespace,&#10;            s.conrelid,&#10;            s.conkey,&#10;            replace(split_part(s.consrc, ''''::text, 2), ')'::text, ''::text) AS type&#10;           FROM ( SELECT pg_constraint.connamespace,&#10;                    pg_constraint.conrelid,&#10;                    pg_constraint.conkey,&#10;                    pg_get_constraintdef(pg_constraint.oid) AS consrc&#10;                   FROM pg_constraint) s&#10;          WHERE (s.consrc ~~* '%geometrytype(% = %'::text)) st ON (((st.connamespace = n.oid) AND (st.conrelid = c.oid) AND (a.attnum = ANY (st.conkey)))))&#10;     LEFT JOIN ( SELECT s.connamespace,&#10;            s.conrelid,&#10;            s.conkey,&#10;            (replace(split_part(s.consrc, ' = '::text, 2), ')'::text, ''::text))::integer AS ndims&#10;           FROM ( SELECT pg_constraint.connamespace,&#10;                    pg_constraint.conrelid,&#10;                    pg_constraint.conkey,&#10;                    pg_get_constraintdef(pg_constraint.oid) AS consrc&#10;                   FROM pg_constraint) s&#10;          WHERE (s.consrc ~~* '%ndims(% = %'::text)) sn ON (((sn.connamespace = n.oid) AND (sn.conrelid = c.oid) AND (a.attnum = ANY (sn.conkey)))))&#10;     LEFT JOIN ( SELECT s.connamespace,&#10;            s.conrelid,&#10;            s.conkey,&#10;            (replace(replace(split_part(s.consrc, ' = '::text, 2), ')'::text, ''::text), '('::text, ''::text))::integer AS srid&#10;           FROM ( SELECT pg_constraint.connamespace,&#10;                    pg_constraint.conrelid,&#10;                    pg_constraint.conkey,&#10;                    pg_get_constraintdef(pg_constraint.oid) AS consrc&#10;                   FROM pg_constraint) s&#10;          WHERE (s.consrc ~~* '%srid(% = %'::text)) sr ON (((sr.connamespace = n.oid) AND (sr.conrelid = c.oid) AND (a.attnum = ANY (sr.conkey)))))&#10;  WHERE ((c.relkind = ANY (ARRAY['r'::&quot;char&quot;, 'v'::&quot;char&quot;, 'm'::&quot;char&quot;, 'f'::&quot;char&quot;, 'p'::&quot;char&quot;])) AND (NOT (c.relname = 'raster_columns'::name)) AND (t.typname = 'geometry'::name) AND (NOT pg_is_other_temp_schema(c.relnamespace)) AND has_table_privilege(c.oid, 'SELECT'::text));">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="f_table_catalog" nullable="true" remarks="" size="256" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="f_table_schema" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="f_table_name" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="f_geometry_column" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="coord_dimension" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="srid" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="srid" foreignKey="Implied Constraint" implied="true" onDeleteCascade="false" schema="public" table="spatial_ref_sys"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="type" nullable="true" remarks="" size="30" type="varchar" typeCode="12"/>
      </table>
      <table name="groups" numRows="121" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="6" id="0" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="true" defaultValue="nextval('groups_id_seq'::regclass)" digits="0" id="1" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="group_id" foreignKey="events_group_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="events"/>
            <child column="group_id" foreignKey="user_follow_groups_group_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="user_follow_groups"/>
            <child column="group_id" foreignKey="users_groups_roles_group_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users_groups_roles"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="user_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="groups_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="6" id="4" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="5" name="modified_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="social_links" nullable="true" remarks="" size="2147483647" type="json" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="about" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="banner_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="logo_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="0" digits="0" id="10" name="follower_count" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="thumbnail_image_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="12" name="is_promoted" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="groups_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="image_sizes" numRows="4" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('image_sizes_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="type" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="full_width" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="full_height" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="full_aspect" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="full_quality" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="icon_width" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="icon_height" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="icon_aspect" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="icon_quality" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="thumbnail_width" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="thumbnail_height" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="12" name="thumbnail_aspect" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="thumbnail_quality" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="14" name="logo_width" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="15" name="logo_height" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="16" name="icon_size_quality" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="17" name="icon_size_width_height" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="18" name="small_size_quality" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="19" name="small_size_width_height" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="20" name="thumbnail_size_quality" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="21" name="thumbnail_size_width_height" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="image_sizes_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="import_jobs" numRows="50" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('import_jobs_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="task" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="2" name="starts_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="user_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="import_jobs_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="result" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="result_status" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="import_jobs_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="mails" numRows="113790" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('mails_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="recipient" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="2" name="time" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="action" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="subject" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="message" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="mails_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="message_settings" numRows="35" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('message_settings_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="action" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="2" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="true" digits="0" id="3" name="enabled" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="4" name="modified_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="message_settings_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="microlocations" numRows="1353" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('microlocation_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="microlocation_id" foreignKey="sessions_microlocation_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="sessions"/>
            <child column="microlocation_id" foreignKey="station_microlocation_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="station"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="2" name="latitude" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="3" name="longitude" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="floor" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="room" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="microlocations_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="6" id="7" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="video_stream_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="microlocations_video_stream_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="video_streams"/>
         </column>
         <column autoUpdated="false" defaultValue="0" digits="0" id="9" name="position" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="10" name="hidden_in_scheduler" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="is_chat_enabled" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="12" name="is_global_event_room" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="chat_room_id" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="microlocation_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="notification_actors" numRows="15683" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="6" id="0" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="1" name="modified_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="true" defaultValue="nextval('notification_actors_id_seq'::regclass)" digits="0" id="2" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="actor_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="notification_actors_actor_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="content_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="notification_actors_content_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="notification_content"/>
         </column>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="notification_actors_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="notification_content" numRows="15730" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="6" id="0" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="1" name="modified_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="true" defaultValue="nextval('notification_content_id_seq'::regclass)" digits="0" id="2" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="content_id" foreignKey="notification_actors_content_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="notification_actors"/>
            <child column="content_id" foreignKey="notification_content_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="notifications"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="type" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="target_type" nullable="true" remarks="" size="255" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="target_id" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="target_action" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="notification_content_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="notification_settings" numRows="9" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="6" id="0" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="1" name="modified_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="true" defaultValue="nextval('notification_settings_id_seq'::regclass)" digits="0" id="2" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="type" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="true" digits="0" id="4" name="enabled" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="notification_settings_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="notifications" numRows="21778" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('notification_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="user_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="notification_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users"/>
         </column>
         <column autoUpdated="false" defaultValue="false" digits="0" id="2" name="is_read" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="content_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="notification_content_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="notification_content"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="6" id="4" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="5" name="modified_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="notification_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="orders" numRows="36242" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('orders_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="order_id" foreignKey="orders_tickets_order_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="orders_tickets"/>
            <child column="order_id" foreignKey="ticket_holders_order_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="ticket_holders"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="identifier" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="2" name="amount" nullable="false" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="address" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="city" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="state" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="country" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="zipcode" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="user_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="orders_user_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="users"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="orders_event_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="marketer_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="orders_marketer_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="users"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="6" id="11" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="12" name="completed_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="transaction_id" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="14" name="paid_via" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="15" name="payment_mode" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="16" name="brand" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="17" name="exp_month" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="18" name="exp_year" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="19" name="last4" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="20" name="stripe_token" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="21" name="paypal_token" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="22" name="status" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="23" name="discount_code_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="orders_discount_code_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="discount_codes"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="6" id="24" name="trashed_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="25" name="cancel_note" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="26" name="order_notes" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="27" name="tickets_pdf_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="28" name="company" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="29" name="tax_business_info" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="30" name="is_billing_enabled" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="31" name="stripe_payment_intent_id" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="orders_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="orders_identifier_key" unique="true">
            <column ascending="true" name="identifier"/>
         </index>
      </table>
      <table name="orders_tickets" numRows="38648" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="order_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="orders_tickets_order_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="orders"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="ticket_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="orders_tickets_ticket_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="tickets"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="quantity" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="3" name="price" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <primaryKey column="order_id" sequenceNumberInPK="1"/>
         <primaryKey column="ticket_id" sequenceNumberInPK="2"/>
         <index name="orders_tickets_pkey" unique="true">
            <column ascending="true" name="order_id"/>
            <column ascending="true" name="ticket_id"/>
         </index>
      </table>
      <table name="pages" numRows="8" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('pages_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="title" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="url" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="description" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="place" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="language" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="index" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="pages_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="panel_permissions" numRows="11" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('panel_permissions_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="panel_permission_id" foreignKey="roles_panels_panel_permission_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="roles_panels"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="panel_name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="can_access" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="panel_permissions_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="permissions" numRows="30" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('permissions_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="role_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="permissions_role_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="roles"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="service_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="permissions_service_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="services"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="can_create" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="can_read" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="can_update" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="can_delete" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="permissions_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="role_service_uc" unique="true">
            <column ascending="true" name="role_id"/>
            <column ascending="true" name="service_id"/>
         </index>
      </table>
      <table name="pg_stat_statements" numRows="0" remarks="" schema="public" type="VIEW" viewSql=" SELECT pg_stat_statements.userid,&#10;    pg_stat_statements.dbid,&#10;    pg_stat_statements.queryid,&#10;    pg_stat_statements.query,&#10;    pg_stat_statements.calls,&#10;    pg_stat_statements.total_time,&#10;    pg_stat_statements.min_time,&#10;    pg_stat_statements.max_time,&#10;    pg_stat_statements.mean_time,&#10;    pg_stat_statements.stddev_time,&#10;    pg_stat_statements.rows,&#10;    pg_stat_statements.shared_blks_hit,&#10;    pg_stat_statements.shared_blks_read,&#10;    pg_stat_statements.shared_blks_dirtied,&#10;    pg_stat_statements.shared_blks_written,&#10;    pg_stat_statements.local_blks_hit,&#10;    pg_stat_statements.local_blks_read,&#10;    pg_stat_statements.local_blks_dirtied,&#10;    pg_stat_statements.local_blks_written,&#10;    pg_stat_statements.temp_blks_read,&#10;    pg_stat_statements.temp_blks_written,&#10;    pg_stat_statements.blk_read_time,&#10;    pg_stat_statements.blk_write_time&#10;   FROM pg_stat_statements(true) pg_stat_statements(userid, dbid, queryid, query, calls, total_time, min_time, max_time, mean_time, stddev_time, rows, shared_blks_hit, shared_blks_read, shared_blks_dirtied, shared_blks_written, local_blks_hit, local_blks_read, local_blks_dirtied, local_blks_written, temp_blks_read, temp_blks_written, blk_read_time, blk_write_time);">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="userid" nullable="true" remarks="" size="10" type="oid" typeCode="-5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="dbid" nullable="true" remarks="" size="10" type="oid" typeCode="-5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="queryid" nullable="true" remarks="" size="19" type="int8" typeCode="-5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="query" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="calls" nullable="true" remarks="" size="19" type="int8" typeCode="-5"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="5" name="total_time" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="6" name="min_time" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="7" name="max_time" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="8" name="mean_time" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="9" name="stddev_time" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="rows" nullable="true" remarks="" size="19" type="int8" typeCode="-5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="shared_blks_hit" nullable="true" remarks="" size="19" type="int8" typeCode="-5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="12" name="shared_blks_read" nullable="true" remarks="" size="19" type="int8" typeCode="-5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="shared_blks_dirtied" nullable="true" remarks="" size="19" type="int8" typeCode="-5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="14" name="shared_blks_written" nullable="true" remarks="" size="19" type="int8" typeCode="-5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="15" name="local_blks_hit" nullable="true" remarks="" size="19" type="int8" typeCode="-5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="16" name="local_blks_read" nullable="true" remarks="" size="19" type="int8" typeCode="-5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="17" name="local_blks_dirtied" nullable="true" remarks="" size="19" type="int8" typeCode="-5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="18" name="local_blks_written" nullable="true" remarks="" size="19" type="int8" typeCode="-5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="19" name="temp_blks_read" nullable="true" remarks="" size="19" type="int8" typeCode="-5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="20" name="temp_blks_written" nullable="true" remarks="" size="19" type="int8" typeCode="-5"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="21" name="blk_read_time" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="22" name="blk_write_time" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
      </table>
      <table name="raster_columns" numRows="0" remarks="" schema="public" type="VIEW" viewSql=" SELECT current_database() AS r_table_catalog,&#10;    n.nspname AS r_table_schema,&#10;    c.relname AS r_table_name,&#10;    a.attname AS r_raster_column,&#10;    COALESCE(_raster_constraint_info_srid(n.nspname, c.relname, a.attname), ( SELECT st_srid('010100000000000000000000000000000000000000'::geometry) AS st_srid)) AS srid,&#10;    _raster_constraint_info_scale(n.nspname, c.relname, a.attname, 'x'::bpchar) AS scale_x,&#10;    _raster_constraint_info_scale(n.nspname, c.relname, a.attname, 'y'::bpchar) AS scale_y,&#10;    _raster_constraint_info_blocksize(n.nspname, c.relname, a.attname, 'width'::text) AS blocksize_x,&#10;    _raster_constraint_info_blocksize(n.nspname, c.relname, a.attname, 'height'::text) AS blocksize_y,&#10;    COALESCE(_raster_constraint_info_alignment(n.nspname, c.relname, a.attname), false) AS same_alignment,&#10;    COALESCE(_raster_constraint_info_regular_blocking(n.nspname, c.relname, a.attname), false) AS regular_blocking,&#10;    _raster_constraint_info_num_bands(n.nspname, c.relname, a.attname) AS num_bands,&#10;    _raster_constraint_info_pixel_types(n.nspname, c.relname, a.attname) AS pixel_types,&#10;    _raster_constraint_info_nodata_values(n.nspname, c.relname, a.attname) AS nodata_values,&#10;    _raster_constraint_info_out_db(n.nspname, c.relname, a.attname) AS out_db,&#10;    _raster_constraint_info_extent(n.nspname, c.relname, a.attname) AS extent,&#10;    COALESCE(_raster_constraint_info_index(n.nspname, c.relname, a.attname), false) AS spatial_index&#10;   FROM pg_class c,&#10;    pg_attribute a,&#10;    pg_type t,&#10;    pg_namespace n&#10;  WHERE ((t.typname = 'raster'::name) AND (a.attisdropped = false) AND (a.atttypid = t.oid) AND (a.attrelid = c.oid) AND (c.relnamespace = n.oid) AND (c.relkind = ANY (ARRAY['r'::&quot;char&quot;, 'v'::&quot;char&quot;, 'm'::&quot;char&quot;, 'f'::&quot;char&quot;, 'p'::&quot;char&quot;])) AND (NOT pg_is_other_temp_schema(c.relnamespace)) AND has_table_privilege(c.oid, 'SELECT'::text));">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="r_table_catalog" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="r_table_schema" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="r_table_name" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="r_raster_column" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="srid" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="srid" foreignKey="Implied Constraint" implied="true" onDeleteCascade="false" schema="public" table="spatial_ref_sys"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="17" id="5" name="scale_x" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="6" name="scale_y" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="blocksize_x" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="blocksize_y" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="same_alignment" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="regular_blocking" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="num_bands" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="12" name="pixel_types" nullable="true" remarks="" size="2147483647" type="_text" typeCode="2003"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="13" name="nodata_values" nullable="true" remarks="" size="17" type="_float8" typeCode="2003"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="14" name="out_db" nullable="true" remarks="" size="1" type="_bool" typeCode="2003"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="15" name="extent" nullable="true" remarks="" size="2147483647" type="geometry" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="16" name="spatial_index" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
      </table>
      <table name="raster_overviews" numRows="0" remarks="" schema="public" type="VIEW" viewSql=" SELECT current_database() AS o_table_catalog,&#10;    n.nspname AS o_table_schema,&#10;    c.relname AS o_table_name,&#10;    a.attname AS o_raster_column,&#10;    current_database() AS r_table_catalog,&#10;    (split_part(split_part(s.consrc, '''::name'::text, 1), ''''::text, 2))::name AS r_table_schema,&#10;    (split_part(split_part(s.consrc, '''::name'::text, 2), ''''::text, 2))::name AS r_table_name,&#10;    (split_part(split_part(s.consrc, '''::name'::text, 3), ''''::text, 2))::name AS r_raster_column,&#10;    (btrim(split_part(s.consrc, ','::text, 2)))::integer AS overview_factor&#10;   FROM pg_class c,&#10;    pg_attribute a,&#10;    pg_type t,&#10;    pg_namespace n,&#10;    ( SELECT pg_constraint.connamespace,&#10;            pg_constraint.conrelid,&#10;            pg_constraint.conkey,&#10;            pg_get_constraintdef(pg_constraint.oid) AS consrc&#10;           FROM pg_constraint) s&#10;  WHERE ((t.typname = 'raster'::name) AND (a.attisdropped = false) AND (a.atttypid = t.oid) AND (a.attrelid = c.oid) AND (c.relnamespace = n.oid) AND ((c.relkind)::text = ANY ((ARRAY['r'::character(1), 'v'::character(1), 'm'::character(1), 'f'::character(1)])::text[])) AND (s.connamespace = n.oid) AND (s.conrelid = c.oid) AND (s.consrc ~~ '%_overview_constraint(%'::text) AND (NOT pg_is_other_temp_schema(c.relnamespace)) AND has_table_privilege(c.oid, 'SELECT'::text));">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="o_table_catalog" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="o_table_schema" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="o_table_name" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="o_raster_column" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="r_table_catalog" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="r_table_schema" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="r_table_name" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="r_raster_column" nullable="true" remarks="" size="2147483647" type="name" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="overview_factor" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
      </table>
      <table name="role_invites" numRows="3082" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('role_invite_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="email" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="role_invites_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="role_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="role_invites_role_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="roles"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="hash" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="5" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="status" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="role_name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="role_invite_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="email_role_event_uc" unique="true">
            <column ascending="true" name="email"/>
            <column ascending="true" name="role_id"/>
            <column ascending="true" name="event_id"/>
         </index>
      </table>
      <table name="roles" numRows="6" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('role_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="role_id" foreignKey="permissions_role_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="permissions"/>
            <child column="role_id" foreignKey="role_invites_role_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="role_invites"/>
            <child column="role_id" foreignKey="users_events_roles_role_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users_events_roles"/>
            <child column="role_id" foreignKey="users_groups_roles_role_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users_groups_roles"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="title_name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="role_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="role_name_key" unique="true">
            <column ascending="true" name="name"/>
         </index>
      </table>
      <table name="roles_panels" numRows="0" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="role_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="roles_panels_role_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="custom_sys_roles"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="panel_permission_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="roles_panels_panel_permission_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="panel_permissions"/>
         </column>
      </table>
      <table name="services" numRows="5" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('service_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="service_id" foreignKey="permissions_service_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="permissions"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="service_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="service_name_key" unique="true">
            <column ascending="true" name="name"/>
         </index>
      </table>
      <table name="session_types" numRows="1247" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('session_type_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="session_type_id" foreignKey="sessions_session_type_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="sessions"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="length" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="session_types_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="6" id="4" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="position" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="session_type_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="sessions" numRows="5440" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('session_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="session_id" foreignKey="exhibitors_sessions_session_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="exhibitors_sessions"/>
            <child column="session_id" foreignKey="feedback_session_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="feedback"/>
            <child column="session_id" foreignKey="speaker_invites_session_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="speaker_invites"/>
            <child column="session_id" foreignKey="speakers_sessions_session_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="speakers_sessions"/>
            <child column="session_id" foreignKey="station_store_paxs_session_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="station_store_paxs"/>
            <child column="session_id" foreignKey="user_check_in_session_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="user_check_in"/>
            <child column="session_id" foreignKey="user_favourite_sessions_session_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="user_favourite_sessions"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="title" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="subtitle" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="short_abstract" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="long_abstract" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="comments" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="6" name="starts_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="7" name="ends_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="track_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="session_track_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="tracks"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="language" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="microlocation_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="sessions_microlocation_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="microlocations"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="session_type_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="sessions_session_type_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="session_types"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="12" name="slides_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="video_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="14" name="audio_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="15" name="signup_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="16" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="sessions_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="17" name="state" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="18" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="19" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="20" name="submitted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="21" name="submission_modifier" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="22" name="is_mail_sent" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="23" name="level" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="24" name="creator_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="sessions_creator_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="6" id="25" name="last_modified_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="26" name="send_email" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="27" name="is_locked" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="28" name="complex_field_values" nullable="true" remarks="" size="2147483647" type="json" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="'0'::double precision" digits="17" id="29" name="average_rating" nullable="false" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="0" digits="0" id="30" name="rating_count" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="31" name="facebook" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="32" name="github" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="33" name="gitlab" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="34" name="instagram" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="35" name="linkedin" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="36" name="twitter" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="37" name="website" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="0" digits="0" id="38" name="favourite_count" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="39" name="mastodon" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="40" name="slides" nullable="true" remarks="" size="2147483647" type="json" typeCode="1111"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="session_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="session_event_idx" unique="false">
            <column ascending="true" name="event_id"/>
         </index>
         <index name="session_state_idx" unique="false">
            <column ascending="true" name="state"/>
         </index>
      </table>
      <table name="sessions_speakers_links" numRows="4372" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="6" id="0" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="true" defaultValue="nextval('sessions_speakers_links_id_seq'::regclass)" digits="0" id="1" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="event_id" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="session_id" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="speaker_id" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="sessions_speakers_links_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="settings" numRows="1" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('settings_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="app_name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="storage_place" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="aws_key" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="aws_secret" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="aws_bucket_name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="gs_key" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="gs_secret" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="gs_bucket_name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="google_client_id" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="google_client_secret" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="fb_client_id" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="12" name="fb_client_secret" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="tw_consumer_key" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="14" name="tw_consumer_secret" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="15" name="in_client_id" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="16" name="in_client_secret" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="17" name="stripe_client_id" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="18" name="stripe_secret_key" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="19" name="stripe_publishable_key" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="20" name="paypal_mode" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="21" name="email_service" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="22" name="email_from" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="23" name="email_from_name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="24" name="sendgrid_key" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="25" name="smtp_host" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="26" name="smtp_username" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="27" name="smtp_password" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="28" name="smtp_port" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="29" name="smtp_encryption" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="30" name="analytics_key" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="31" name="google_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="32" name="github_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="33" name="twitter_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="34" name="support_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="35" name="facebook_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="36" name="youtube_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="37" name="android_app_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="38" name="web_app_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="39" name="aws_region" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="40" name="tagline" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="41" name="app_environment" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="42" name="static_domain" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="43" name="frontend_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="44" name="cookie_policy" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="45" name="cookie_policy_link" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="46" name="paypal_client" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="47" name="paypal_sandbox_client" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="48" name="paypal_sandbox_secret" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="49" name="paypal_secret" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="50" name="omise_live_public" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="51" name="omise_live_secret" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="52" name="omise_mode" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="53" name="omise_test_public" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="54" name="omise_test_secret" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="55" name="alipay_publishable_key" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="56" name="alipay_secret_key" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="57" name="google_recaptcha_secret" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="58" name="google_recaptcha_site" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="59" name="is_google_recaptcha_enabled" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="60" name="admin_billing_additional_info" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="61" name="admin_billing_address" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="62" name="admin_billing_city" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="63" name="admin_billing_contact_name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="64" name="admin_billing_country" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="65" name="admin_billing_email" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="66" name="admin_billing_phone" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="67" name="admin_billing_tax_info" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="68" name="admin_billing_zip" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="69" name="admin_company" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="15" digits="0" id="70" name="order_expiry_time" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="71" name="admin_billing_state" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="1" digits="0" id="72" name="invoice_sending_day" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="'UTC'::character varying" digits="0" id="73" name="invoice_sending_timezone" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="74" name="stripe_test_publishable_key" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="75" name="stripe_test_secret_key" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="76" name="paytm_live_merchant" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="77" name="paytm_live_secret" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="78" name="paytm_mode" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="79" name="paytm_sandbox_merchant" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="80" name="paytm_sandbox_secret" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="81" name="is_paytm_activated" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="82" name="stripe_test_client_id" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="30" digits="0" id="83" name="max_complex_custom_fields" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="84" name="instagram_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="85" name="patreon_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="86" name="gitter_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="87" name="telegram_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="88" name="admin_billing_paypal_email" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="89" name="weblate_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="90" name="admin_billing_logo" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="91" name="rocket_chat_registration_secret" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="92" name="rocket_chat_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="93" name="start_pg_event_id" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="'default'::character varying" digits="0" id="94" name="start_pg_enabled" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="1000" digits="0" id="95" name="logo_size" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="10000" digits="0" id="96" name="image_size" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="20000" digits="0" id="97" name="slide_size" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="98" name="stripe_mode" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="settings_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="social_links" numRows="1431" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('social_link_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="link" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="social_links_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="6" id="4" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="identifier" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="social_link_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="spatial_ref_sys" numRows="5757" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="srid" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <child column="srid" foreignKey="Implied Constraint" implied="true" onDeleteCascade="false" schema="public" table="geography_columns"/>
            <child column="srid" foreignKey="Implied Constraint" implied="true" onDeleteCascade="false" schema="public" table="geometry_columns"/>
            <child column="srid" foreignKey="Implied Constraint" implied="true" onDeleteCascade="false" schema="public" table="raster_columns"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="auth_name" nullable="true" remarks="" size="256" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="auth_srid" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="srtext" nullable="true" remarks="" size="2048" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="proj4text" nullable="true" remarks="" size="2048" type="varchar" typeCode="12"/>
         <primaryKey column="srid" sequenceNumberInPK="1"/>
         <index name="spatial_ref_sys_pkey" unique="true">
            <column ascending="true" name="srid"/>
         </index>
         <checkConstraint constraint="(((srid &gt; 0) AND (srid &lt;= 998999)))" name="spatial_ref_sys_srid_check"/>
      </table>
      <table name="speaker" numRows="4952" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('speaker_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="speaker_id" foreignKey="speakers_sessions_speaker_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="speakers_sessions"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="photo_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="thumbnail_image_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="small_image_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="icon_image_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="short_biography" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="long_biography" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="email" nullable="true" remarks="" size="2147483647" type="citext" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="mobile" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="website" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="twitter" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="12" name="facebook" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="github" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="14" name="linkedin" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="15" name="organisation" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="16" name="position" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="17" name="country" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="18" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="speaker_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="19" name="user_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="speaker_user_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="users"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="20" name="city" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="21" name="sponsorship_required" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="22" name="speaking_experience" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="23" name="heard_from" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="24" name="gender" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="25" name="is_featured" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="26" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="27" name="is_email_overridden" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="28" name="complex_field_values" nullable="true" remarks="" size="2147483647" type="json" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="29" name="instagram" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="0" digits="0" id="30" name="order" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="31" name="address" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="32" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="33" name="modified_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="34" name="mastodon" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="35" name="speaker_positions" nullable="true" remarks="" size="2147483647" type="json" typeCode="1111"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="speaker_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="speaker_event_idx" unique="false">
            <column ascending="true" name="event_id"/>
         </index>
         <index name="uq_speaker_event_email" unique="true">
            <column ascending="true" name="event_id"/>
            <column ascending="true" name="email"/>
            <column ascending="true" name="deleted_at"/>
         </index>
      </table>
      <table name="speaker_invites" numRows="127" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="6" id="0" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="1" name="modified_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="true" defaultValue="nextval('speaker_invites_id_seq'::regclass)" digits="0" id="2" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="email" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="status" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="session_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="speaker_invites_session_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="sessions"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="event_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="speaker_invites_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="speaker_invites_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="speakers_calls" numRows="515" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('call_for_papers_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="announcement" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="2" name="starts_at" nullable="false" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="3" name="ends_at" nullable="false" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="hash" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="privacy" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="call_for_papers_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="6" id="7" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="8" name="soft_ends_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="call_for_papers_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="speakers_sessions" numRows="6159" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="speaker_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="speakers_sessions_speaker_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="speaker"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="session_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="speakers_sessions_session_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="sessions"/>
         </column>
      </table>
      <table name="sponsors" numRows="771" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('sponsors_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="description" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="level" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="logo_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="sponsors_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="type" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="8" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="sponsors_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="station" numRows="10" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('station_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="station_id" foreignKey="station_store_paxs_station_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="station_store_paxs"/>
            <child column="station_id" foreignKey="user_check_in_station_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="user_check_in"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="station_name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="station_type" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="microlocation_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="station_microlocation_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="microlocations"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="station_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="station_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="station_store_paxs" numRows="0" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('station_store_paxs_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="station_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="station_store_paxs_station_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="station"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="session_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="station_store_paxs_session_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="sessions"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="current_pax" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="4" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="5" name="modified_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="station_store_paxs_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="stripe_authorizations" numRows="62" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('stripe_authorizations_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="stripe_secret_key" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="stripe_refresh_token" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="stripe_publishable_key" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="stripe_user_id" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="stripe_authorizations_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="stripe_auth_code" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="stripe_authorizations_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="tax" numRows="107" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('tax_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="country" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="3" name="rate" nullable="false" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="tax_id" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="should_send_invoice" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="registered_company" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="address" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="city" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="state" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="zip" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="invoice_footer" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="12" name="is_tax_included_in_price" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="tax_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="14" name="is_invoice_sent" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="15" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="16" name="contact_name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="17" name="phone" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="18" name="email" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="tax_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="ticket_fees" numRows="1" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('ticket_fees_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="currency" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="2" name="service_fee" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="3" name="maximum_fee" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="country" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="ticket_fees_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="country_currency_uc" unique="true">
            <column ascending="true" name="currency"/>
            <column ascending="true" name="country"/>
         </index>
      </table>
      <table name="ticket_holders" numRows="33552" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('ticket_holders_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="ticket_holder_id" foreignKey="user_check_in_ticket_holder_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="user_check_in"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="firstname" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="lastname" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="email" nullable="true" remarks="" size="2147483647" type="citext" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="address" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="city" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="state" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="country" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="ticket_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="ticket_holders_ticket_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="tickets"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="order_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="ticket_holders_order_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="orders"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="is_checked_in" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="pdf_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="12" name="event_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="ticket_holders_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="billing_address" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="14" name="birth_date" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="15" name="blog" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="16" name="company" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="17" name="facebook" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="18" name="gender" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="19" name="github" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="20" name="home_address" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="21" name="job_title" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="22" name="phone" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="23" name="shipping_address" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="24" name="tax_business_info" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="25" name="twitter" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="26" name="website" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="27" name="work_address" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="28" name="work_phone" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="29" name="checkin_times" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="30" name="attendee_notes" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="31" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="32" name="is_checked_out" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="33" name="checkout_times" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="34" name="device_name_checkin" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="35" name="complex_field_values" nullable="true" remarks="" size="2147483647" type="json" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="36" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="37" name="modified_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="38" name="age_group" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="39" name="accept_video_recording" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="40" name="accept_receive_emails" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="41" name="accept_share_details" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="42" name="instagram" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="43" name="linkedin" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="44" name="home_wiki" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="45" name="native_language" nullable="true" remarks="" size="2147483647" type="json" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="46" name="fluent_language" nullable="true" remarks="" size="2147483647" type="json" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="47" name="is_consent_of_refund_policy" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="48" name="is_consent_form_field" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="49" name="wiki_scholarship" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="50" name="is_consent_form_field_photo" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="51" name="is_consent_form_field_email" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="52" name="is_badge_printed" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="53" name="badge_printed_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="54" name="is_registered" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="55" name="register_times" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="ticket_holders_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="ticket_tag" numRows="18" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('ticket_tag_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="ticket_tag_id" foreignKey="association_ticket_tag_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="ticket_tagging"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="ticket_tag_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="6" id="3" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="ticket_tag_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="unique_ticket_tag" unique="true">
            <column ascending="true" name="name"/>
            <column ascending="true" name="event_id"/>
         </index>
      </table>
      <table name="ticket_tagging" numRows="0" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="ticket_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="association_ticket_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="tickets"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="ticket_tag_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="association_ticket_tag_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="ticket_tag"/>
         </column>
      </table>
      <table name="tickets" numRows="2868" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('ticket_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="ticket_id" foreignKey="access_codes_ticket_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="access_codes"/>
            <child column="ticket_id" foreignKey="access_codes_tickets_ticket_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="access_codes_tickets"/>
            <child column="ticket_id" foreignKey="discount_codes_tickets_ticket_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="discount_codes_tickets"/>
            <child column="ticket_id" foreignKey="orders_tickets_ticket_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="orders_tickets"/>
            <child column="ticket_id" foreignKey="ticket_holders_ticket_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="ticket_holders"/>
            <child column="ticket_id" foreignKey="association_ticket_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="ticket_tagging"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="description" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="is_description_visible" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="type" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="quantity" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="6" name="price" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="7" name="sales_starts_at" nullable="false" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="8" name="sales_ends_at" nullable="false" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="is_hidden" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="min_order" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="max_order" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="12" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="tickets_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="is_fee_absorbed" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="14" name="position" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="15" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="16" name="auto_checkin_enabled" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="17" name="is_checkin_restricted" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="17" id="18" name="max_price" nullable="true" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="'0'::double precision" digits="17" id="19" name="min_price" nullable="false" remarks="" size="17" type="float8" typeCode="8"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="20" name="form_id" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="21" name="badge_id" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="ticket_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="name_event_deleted_at_uc" unique="true">
            <column ascending="true" name="name"/>
            <column ascending="true" name="event_id"/>
            <column ascending="true" name="deleted_at"/>
         </index>
      </table>
      <table name="tracks" numRows="1515" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('tracks_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="track_id" foreignKey="session_track_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="sessions"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="description" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="color" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="tracks_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="6" id="5" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="position" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="tracks_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="transaction" numRows="57884" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="6" id="0" name="issued_at" nullable="true" remarks="" size="29" type="timestamp" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="id" nullable="false" remarks="" size="19" type="int8" typeCode="-5">
            <child column="facebook_id" foreignKey="Implied Constraint" implied="true" onDeleteCascade="false" schema="public" table="users"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="remote_addr" nullable="true" remarks="" size="50" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="user_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="transaction_user_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="users"/>
         </column>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="transaction_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="ix_transaction_user_id" unique="false">
            <column ascending="true" name="user_id"/>
         </index>
      </table>
      <table name="translation_channels" numRows="43" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('translation_channels_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="video_stream_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="translation_channels_video_stream_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="video_streams"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="channel_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="translation_channels_channel_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="video_channels"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="translation_channels_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="user_check_in" numRows="0" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('user_check_in_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="ticket_holder_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="user_check_in_ticket_holder_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="ticket_holders"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="session_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="user_check_in_session_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="sessions"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="station_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="user_check_in_station_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="station"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="track_name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="session_name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="speaker_name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="7" name="check_in_out_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="8" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="9" name="updated_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="is_deleted" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="user_check_in_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="user_emails" numRows="0" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="6" id="0" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="true" defaultValue="nextval('user_emails_id_seq'::regclass)" digits="0" id="1" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="email_address" nullable="false" remarks="" size="120" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="type" nullable="false" remarks="" size="120" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="user_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="user_emails_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users"/>
         </column>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="user_emails_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="user_emails_email_address_key" unique="true">
            <column ascending="true" name="email_address"/>
         </index>
      </table>
      <table name="user_favourite_events" numRows="538" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('user_favourite_events_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="user_favourite_events_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="user_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="user_favourite_events_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="6" id="3" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="user_favourite_events_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="user_favourite_sessions" numRows="26042" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('user_favourite_sessions_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="session_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="user_favourite_sessions_session_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="sessions"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="user_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="user_favourite_sessions_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="6" id="3" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="4" name="modified_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="user_favourite_sessions_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="uq_session_user" unique="true">
            <column ascending="true" name="session_id"/>
            <column ascending="true" name="user_id"/>
         </index>
      </table>
      <table name="user_follow_groups" numRows="740" remarks="" schema="public" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="6" id="0" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="1" name="modified_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="true" defaultValue="nextval('user_follow_groups_id_seq'::regclass)" digits="0" id="2" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="user_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="user_follow_groups_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="group_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="user_follow_groups_group_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="groups"/>
         </column>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="user_follow_groups_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="uq_group_user" unique="true">
            <column ascending="true" name="group_id"/>
            <column ascending="true" name="user_id"/>
         </index>
      </table>
      <table name="user_permissions" numRows="2" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('user_permissions_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="description" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="unverified_user" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="anonymous_user" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="5" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="user_permissions_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="user_permissions_name_key" unique="true">
            <column ascending="true" name="name"/>
         </index>
      </table>
      <table name="user_system_role" numRows="4" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('user_system_role_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="user_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="user_system_role_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="role_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="user_system_role_role_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="custom_sys_roles"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="user_system_role_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="user_system_role_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="user_token_blacklist_time" numRows="1" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('user_token_blacklist_time_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="'2019-08-20 16:05:06.554485+00'::timestamp with time zone" digits="6" id="1" name="created_at" nullable="false" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="'2019-08-20 16:05:06.554485+00'::timestamp with time zone" digits="6" id="2" name="blacklisted_at" nullable="false" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="user_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="user_token_blacklist_time_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users"/>
         </column>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="user_token_blacklist_time_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="user_blacklist_time_uc" unique="true">
            <column ascending="true" name="user_id"/>
         </index>
      </table>
      <table name="users" numRows="31830" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('users_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="marketer_id" foreignKey="access_codes_marketer_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="access_codes"/>
            <child column="marketer_id" foreignKey="discount_codes_marketer_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="discount_codes"/>
            <child column="user_id" foreignKey="email_notifications_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="email_notifications"/>
            <child column="user_id" foreignKey="event_invoices_user_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="event_invoices"/>
            <child column="user_id" foreignKey="feedback_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="feedback"/>
            <child column="user_id" foreignKey="groups_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="groups"/>
            <child column="user_id" foreignKey="import_jobs_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="import_jobs"/>
            <child column="actor_id" foreignKey="notification_actors_actor_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="notification_actors"/>
            <child column="user_id" foreignKey="notification_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="notifications"/>
            <child column="marketer_id" foreignKey="orders_marketer_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="orders"/>
            <child column="user_id" foreignKey="orders_user_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="orders"/>
            <child column="creator_id" foreignKey="sessions_creator_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="sessions"/>
            <child column="user_id" foreignKey="speaker_user_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="speaker"/>
            <child column="user_id" foreignKey="transaction_user_id_fkey" implied="false" onDeleteCascade="false" schema="public" table="transaction"/>
            <child column="user_id" foreignKey="user_emails_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="user_emails"/>
            <child column="user_id" foreignKey="user_favourite_events_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="user_favourite_events"/>
            <child column="user_id" foreignKey="user_favourite_sessions_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="user_favourite_sessions"/>
            <child column="user_id" foreignKey="user_follow_groups_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="user_follow_groups"/>
            <child column="user_id" foreignKey="user_system_role_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="user_system_role"/>
            <child column="user_id" foreignKey="user_token_blacklist_time_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="user_token_blacklist_time"/>
            <child column="user_id" foreignKey="users_events_roles_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users_events_roles"/>
            <child column="user_id" foreignKey="users_groups_roles_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users_groups_roles"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="_email" nullable="false" remarks="" size="2147483647" type="citext" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="_password" nullable="false" remarks="" size="128" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="reset_password" nullable="true" remarks="" size="128" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="salt" nullable="true" remarks="" size="128" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="avatar_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="tokens" nullable="true" remarks="" size="2147483647" type="text" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="is_super_admin" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="is_admin" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="is_verified" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="10" name="last_accessed_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="11" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="12" name="deleted_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="first_name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="14" name="last_name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="15" name="details" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="16" name="contact" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="17" name="facebook_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="18" name="twitter_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="19" name="instagram_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="20" name="google_plus_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="21" name="thumbnail_image_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="22" name="small_image_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="23" name="icon_image_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="24" name="original_image_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="25" name="facebook_id" nullable="true" remarks="" size="19" type="int8" typeCode="-5">
            <parent column="id" foreignKey="Implied Constraint" implied="true" onDeleteCascade="false" schema="public" table="transaction"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="26" name="facebook_login_hash" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="27" name="is_marketer" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="28" name="is_sales_admin" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="29" name="was_registered_with_order" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="30" name="billing_additional_info" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="31" name="billing_address" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="32" name="billing_city" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="33" name="billing_contact_name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="34" name="billing_country" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="35" name="billing_phone" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="36" name="billing_tax_info" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="37" name="billing_zip_code" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="38" name="company" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="39" name="billing_state" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="false" digits="0" id="40" name="is_blocked" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="41" name="public_name" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="true" digits="0" id="42" name="is_profile_public" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="43" name="rocket_chat_token" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="44" name="language_prefrence" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="users_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="facebook_id_unique" unique="true">
            <column ascending="true" name="facebook_id"/>
         </index>
         <index name="users_email_key" unique="true">
            <column ascending="true" name="_email"/>
         </index>
      </table>
      <table name="users_events_roles" numRows="3464" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('users_events_roles_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="event_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="users_events_roles_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="user_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="users_events_roles_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="role_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="users_events_roles_role_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="roles"/>
         </column>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="users_events_roles_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="uq_uer_user_event_role" unique="true">
            <column ascending="true" name="user_id"/>
            <column ascending="true" name="event_id"/>
            <column ascending="true" name="role_id"/>
         </index>
      </table>
      <table name="users_groups_roles" numRows="28" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('users_groups_roles_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="group_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="users_groups_roles_group_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="groups"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="user_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="users_groups_roles_user_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="users"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="role_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="users_groups_roles_role_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="roles"/>
         </column>
         <column autoUpdated="false" defaultValue="false" digits="0" id="4" name="accepted" nullable="false" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="email" nullable="false" remarks="" size="2147483647" type="citext" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="token" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="users_groups_roles_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="uq_ugr_email_group_role" unique="true">
            <column ascending="true" name="email"/>
            <column ascending="true" name="group_id"/>
            <column ascending="true" name="role_id"/>
         </index>
         <index name="uq_ugr_user_group_role" unique="true">
            <column ascending="true" name="user_id"/>
            <column ascending="true" name="group_id"/>
            <column ascending="true" name="role_id"/>
         </index>
      </table>
      <table name="video_channels" numRows="7" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('video_channels_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="channel_id" foreignKey="translation_channels_channel_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="translation_channels"/>
            <child column="channel_id" foreignKey="video_streams_channel_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="video_streams"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="provider" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="url" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="api_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="extra" nullable="true" remarks="" size="2147483647" type="json" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="6" name="created_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="7" name="modified_at" nullable="true" remarks="" size="35" type="timestamptz" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="api_key" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="video_channels_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="video_recordings" numRows="31" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('video_recordings_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="bbb_record_id" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="participants" nullable="false" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="url" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="4" name="start_time" nullable="false" remarks="" size="29" type="timestamp" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="6" id="5" name="end_time" nullable="false" remarks="" size="29" type="timestamp" typeCode="93"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="video_stream_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="video_recordings_video_stream_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="video_streams"/>
         </column>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="video_recordings_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
      </table>
      <table name="video_stream_moderators" numRows="307" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('video_stream_moderators_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="video_stream_id" nullable="false" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="video_stream_moderators_video_stream_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="video_streams"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="email" nullable="false" remarks="" size="2147483647" type="citext" typeCode="1111"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="video_stream_moderators_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="uq_user_email_video_stream_moderator" unique="true">
            <column ascending="true" name="email"/>
            <column ascending="true" name="video_stream_id"/>
         </index>
      </table>
      <table name="video_streams" numRows="614" remarks="" schema="public" type="TABLE">
         <column autoUpdated="true" defaultValue="nextval('video_streams_id_seq'::regclass)" digits="0" id="0" name="id" nullable="false" remarks="" size="10" type="serial" typeCode="4">
            <child column="video_stream_id" foreignKey="microlocations_video_stream_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="microlocations"/>
            <child column="video_stream_id" foreignKey="translation_channels_video_stream_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="translation_channels"/>
            <child column="video_stream_id" foreignKey="video_recordings_video_stream_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="video_recordings"/>
            <child column="video_stream_id" foreignKey="video_stream_moderators_video_stream_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="video_stream_moderators"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="name" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="url" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="password" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="additional_information" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="event_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="video_streams_event_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="events"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="channel_id" nullable="true" remarks="" size="10" type="int4" typeCode="4">
            <parent column="id" foreignKey="video_streams_channel_id_fkey" implied="false" onDeleteCascade="true" schema="public" table="video_channels"/>
         </column>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="extra" nullable="true" remarks="" size="2147483647" type="json" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="bg_img_url" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="is_chat_enabled" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="is_global_event_room" nullable="true" remarks="" size="1" type="bool" typeCode="-7"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="chat_room_id" nullable="true" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <primaryKey column="id" sequenceNumberInPK="1"/>
         <index name="video_streams_pkey" unique="true">
            <column ascending="true" name="id"/>
         </index>
         <index name="video_streams_event_id_key" unique="true">
            <column ascending="true" name="event_id"/>
         </index>
      </table>
   </tables>
   <routines>
      <routine dataAccess="MODIFIES" deterministic="true" name="__st_countagg_transfn(agg agg_count, rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1)" returnType="agg_count" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		_count bigint;
		rtn_agg agg_count;
	BEGIN

		-- only process parameter args once
		IF agg IS NULL THEN
			rtn_agg.count := 0;

			IF nband < 1 THEN
				RAISE EXCEPTION 'Band index must be greater than zero (1-based)';
			ELSE
				rtn_agg.nband := nband;
			END IF;

			IF exclude_nodata_value IS FALSE THEN
				rtn_agg.exclude_nodata_value := FALSE;
			ELSE
				rtn_agg.exclude_nodata_value := TRUE;
			END IF;

			IF sample_percent < 0. OR sample_percent > 1. THEN
				RAISE EXCEPTION 'Sample percent must be between zero and one';
			ELSE
				rtn_agg.sample_percent := sample_percent;
			END IF;
		ELSE
			rtn_agg := agg;
		END IF;

		IF rast IS NOT NULL THEN
			IF rtn_agg.exclude_nodata_value IS FALSE THEN
				SELECT width * height INTO _count FROM public.ST_Metadata(rast);
			ELSE
				SELECT count INTO _count FROM public._ST_summarystats(
					rast,
				 	rtn_agg.nband, rtn_agg.exclude_nodata_value,
					rtn_agg.sample_percent
				);
			END IF;
		END IF;

		rtn_agg.count := rtn_agg.count + _count;
		RETURN rtn_agg;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="agg" type="agg_count"/>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_overview_constraint(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, factor integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		fqtn text;
		cn name;
		sql text;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_overview_' || $3;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK ( public._overview_constraint(' || quote_ident($3)
			|| ',' || $7
			|| ',' || quote_literal($4)
			|| ',' || quote_literal($5)
			|| ',' || quote_literal($6)
			|| '))';

		RETURN  public._add_raster_constraint(cn, sql);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="ovschema" type="name"/>
            <parameter mode="IN" name="ovtable" type="name"/>
            <parameter mode="IN" name="ovcolumn" type="name"/>
            <parameter mode="IN" name="refschema" type="name"/>
            <parameter mode="IN" name="reftable" type="name"/>
            <parameter mode="IN" name="refcolumn" type="name"/>
            <parameter mode="IN" name="factor" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint(cn name, sql text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[BEGIN
		BEGIN
			EXECUTE sql;
		EXCEPTION
			WHEN duplicate_object THEN
				RAISE NOTICE 'The constraint "%" already exists.  To replace the existing constraint, delete the constraint and call ApplyRasterConstraints again', cn;
			WHEN OTHERS THEN
				RAISE NOTICE 'Unable to add constraint: %', cn;
				RAISE NOTICE 'SQL used for failed constraint: %', sql;
				RAISE NOTICE 'Returned error message: % (%)', SQLERRM, SQLSTATE;
				RETURN FALSE;
		END;

		RETURN TRUE;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="cn" type="name"/>
            <parameter mode="IN" name="sql" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		fqtn text;
		cn name;
		sql text;
		attr text;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_same_alignment_' || $3;

		sql := 'SELECT public.st_makeemptyraster(1, 1, upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid) FROM public.st_metadata((SELECT '
			|| quote_ident($3)
			|| ' FROM '
			|| fqtn
			|| ' WHERE '
			|| quote_ident($3)
			|| ' IS NOT NULL LIMIT 1))';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the alignment of a sample raster: % (%)',
        SQLERRM, SQLSTATE;
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn ||
			' ADD CONSTRAINT ' || quote_ident(cn) ||
			' CHECK (public.st_samealignment(' || quote_ident($3) || ', ''' || attr || '''::raster))';
		RETURN  public._add_raster_constraint(cn, sql);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		fqtn text;
		cn name;
		sql text;
		attrset integer[];
		attr integer;
	BEGIN
		IF lower($4) != 'width' AND lower($4) != 'height' THEN
			RAISE EXCEPTION 'axis must be either "width" or "height"';
			RETURN FALSE;
		END IF;

		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_' || $4 || '_' || $3;

		sql := 'SELECT st_' || $4 || '('
			|| quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' GROUP BY 1 ORDER BY count(*) DESC';
		BEGIN
			attrset := ARRAY[]::integer[];
			FOR attr IN EXECUTE sql LOOP
				attrset := attrset || attr;
			END LOOP;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the % of a sample raster: % (%)',
        $4, SQLERRM, SQLSTATE;
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_' || $4 || '('
			|| quote_ident($3)
			|| ') IN (' || array_to_string(attrset, ',') || '))';
		RETURN  public._add_raster_constraint(cn, sql);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
            <parameter mode="IN" name="axis" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		fqtn text;
		cn name;
		sql text;

		_scalex double precision;
		_scaley double precision;
		_skewx double precision;
		_skewy double precision;
		_tilewidth integer;
		_tileheight integer;
		_alignment boolean;

		_covextent public.geometry;
		_covrast public.raster;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_coverage_tile_' || quote_ident($3);

		-- metadata
		BEGIN
			sql := 'WITH foo AS (SELECT public.ST_Metadata(' || quote_ident($3) || ') AS meta, public.ST_ConvexHull(' || quote_ident($3) || ') AS hull FROM ' || fqtn || ') SELECT max((meta).scalex), max((meta).scaley), max((meta).skewx), max((meta).skewy), max((meta).width), max((meta).height), public.ST_Union(hull) FROM foo';
			EXECUTE sql INTO _scalex, _scaley, _skewx, _skewy, _tilewidth, _tileheight, _covextent;
		EXCEPTION WHEN OTHERS THEN
			RAISE DEBUG 'Unable to get coverage metadata for %.%: % (%)',
        fqtn, quote_ident($3), SQLERRM, SQLSTATE;
      -- TODO: Why not return false here ?
		END;

		-- rasterize extent
		BEGIN
			_covrast := public.ST_AsRaster(_covextent, _scalex, _scaley, '8BUI', 1, 0, NULL, NULL, _skewx, _skewy);
			IF _covrast IS NULL THEN
				RAISE NOTICE 'Unable to create coverage raster. Cannot add coverage tile constraint: % (%)',
          SQLERRM, SQLSTATE;
				RETURN FALSE;
			END IF;

			-- remove band
			_covrast := public.ST_MakeEmptyRaster(_covrast);
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to create coverage raster. Cannot add coverage tile constraint: % (%)',
        SQLERRM, SQLSTATE;
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn ||
			' ADD CONSTRAINT ' || quote_ident(cn) ||
			' CHECK (st_iscoveragetile(' || quote_ident($3) || ', ''' || _covrast || '''::raster, ' || _tilewidth || ', ' || _tileheight || '))';
		RETURN  public._add_raster_constraint(cn, sql);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		fqtn text;
		cn name;
		sql text;
		attr text; srid integer;
	BEGIN
		fqtn := '';
		IF length(rastschema) > 0 THEN
			fqtn := quote_ident(rastschema) || '.';
		END IF;
		fqtn := fqtn || quote_ident(rasttable);

		sql := 'SELECT public.ST_SRID('
			|| quote_ident(rastcolumn)
			|| ') FROM '
			|| fqtn
			|| ' WHERE '
			|| quote_ident(rastcolumn)
			|| ' IS NOT NULL LIMIT 1;';
                EXECUTE sql INTO srid;

    IF srid IS NULL THEN
      RETURN false;
    END IF;

		cn := 'enforce_max_extent_' || rastcolumn;

		sql := 'SELECT public.st_ashexewkb( public.st_setsrid( public.st_extent( public.st_envelope('
			|| quote_ident(rastcolumn)
			|| ')), ' || srid || ')) FROM '
			|| fqtn;
		EXECUTE sql INTO attr;

		-- NOTE: I put NOT VALID to prevent the costly step of validating the constraint
		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK ( public.st_envelope('
			|| quote_ident(rastcolumn)
			|| ') @ ''' || attr || '''::geometry) NOT VALID';
		RETURN  public._add_raster_constraint(cn, sql);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		fqtn text;
		cn name;
		sql text;
		attr numeric[];
		max int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_nodata_values_' || $3;

		sql := 'SELECT public._raster_constraint_nodata_values(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' WHERE '
			|| quote_ident($3)
			|| ' IS NOT NULL LIMIT 1;';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the nodata values of a sample raster: % (%)',
        SQLERRM, SQLSTATE;
			RETURN FALSE;
		END;
		max := array_length(attr, 1);
		IF max < 1 OR max IS NULL THEN
			RAISE NOTICE 'Unable to get the nodata values of a sample raster (max < 1 or null)';
			RETURN FALSE;
		END IF;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (_raster_constraint_nodata_values(' || quote_ident($3)
			|| ')::numeric[] = ''{';
		FOR x in 1..max LOOP
			IF attr[x] IS NULL THEN
				sql := sql || 'NULL';
			ELSE
				sql := sql || attr[x];
			END IF;
			IF x < max THEN
				sql := sql || ',';
			END IF;
		END LOOP;
		sql := sql || '}''::numeric[])';

		RETURN  public._add_raster_constraint(cn, sql);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		fqtn text;
		cn name;
		sql text;
		attr int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_num_bands_' || $3;

		sql := 'SELECT public.st_numbands(' || quote_ident($3)
			|| ') FROM '
			|| fqtn
			|| ' WHERE '
			|| quote_ident($3)
			|| ' IS NOT NULL LIMIT 1;';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the number of bands of a sample raster: % (%)',
        SQLERRM, SQLSTATE;
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (public.st_numbands(' || quote_ident($3)
			|| ') = ' || attr
			|| ')';
		RETURN  public._add_raster_constraint(cn, sql);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		fqtn text;
		cn name;
		sql text;
		attr boolean[];
		max int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_out_db_' || $3;

		sql := 'SELECT public._raster_constraint_out_db(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' WHERE '
			|| quote_ident($3)
			|| ' IS NOT NULL LIMIT 1;';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the out-of-database bands of a sample raster: % (%)',
        SQLERRM, SQLSTATE;
			RETURN FALSE;
		END;
		max := array_length(attr, 1);
		IF max < 1 OR max IS NULL THEN
			RAISE NOTICE 'Unable to get the out-of-database bands of a sample raster (max < 1 or null)';
			RETURN FALSE;
		END IF;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK ( public._raster_constraint_out_db(' || quote_ident($3)
			|| ') = ''{';
		FOR x in 1..max LOOP
			IF attr[x] IS FALSE THEN
				sql := sql || 'FALSE';
			ELSE
				sql := sql || 'TRUE';
			END IF;
			IF x < max THEN
				sql := sql || ',';
			END IF;
		END LOOP;
		sql := sql || '}''::boolean[])';

		RETURN  public._add_raster_constraint(cn, sql);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		fqtn text;
		cn name;
		sql text;
		attr text[];
		max int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_pixel_types_' || $3;

		sql := 'SELECT public._raster_constraint_pixel_types(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' WHERE '
			|| quote_ident($3)
			|| ' IS NOT NULL LIMIT 1;';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the pixel types of a sample raster: % (%)',
        SQLERRM, SQLSTATE;
			RETURN FALSE;
		END;
		max := array_length(attr, 1);
		IF max < 1 OR max IS NULL THEN
			RAISE NOTICE 'Unable to get the pixel types of a sample raster (max < 1 or null)';
			RETURN FALSE;
		END IF;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (public._raster_constraint_pixel_types(' || quote_ident($3)
			|| ') = ''{';
		FOR x in 1..max LOOP
			sql := sql || '"' || attr[x] || '"';
			IF x < max THEN
				sql := sql || ',';
			END IF;
		END LOOP;
		sql := sql || '}''::text[])';

		RETURN  public._add_raster_constraint(cn, sql);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		fqtn text;
		cn name;
		sql text;
		attr double precision;
	BEGIN
		IF lower($4) != 'x' AND lower($4) != 'y' THEN
			RAISE EXCEPTION 'axis must be either "x" or "y"';
			RETURN FALSE;
		END IF;

		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_scale' || $4 || '_' || $3;

		sql := 'SELECT public.st_scale' || $4 || '('
			|| quote_ident($3)
			|| ') FROM '
			|| fqtn
			|| ' WHERE '
			|| quote_ident($3)
			|| ' IS NOT NULL LIMIT 1;';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the %-scale of a sample raster: % (%)',
        upper($4), SQLERRM, SQLSTATE;
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (round(public.st_scale' || $4 || '('
			|| quote_ident($3)
			|| ')::numeric, 10) = round(' || text(attr) || '::numeric, 10))';
		RETURN  public._add_raster_constraint(cn, sql);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
            <parameter mode="IN" name="axis" type="character"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		fqtn text;
		cn name;
		sql text;
		attr text;
		meta record;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_spatially_unique_' || quote_ident($2) || '_'|| $3;

		sql := 'ALTER TABLE ' || fqtn ||
			' ADD CONSTRAINT ' || quote_ident(cn) ||
			' EXCLUDE ((' || quote_ident($3) || '::public.geometry) WITH =)';
		RETURN  public._add_raster_constraint(cn, sql);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_add_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		fqtn text;
		cn name;
		sql text;
		attr int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		cn := 'enforce_srid_' || $3;

		sql := 'SELECT public.st_srid('
			|| quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' WHERE '
			|| quote_ident($3)
			|| ' IS NOT NULL LIMIT 1;';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the SRID of a sample raster: % (%)',
        SQLERRM, SQLSTATE;
			RETURN FALSE;
		END;

		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (public.st_srid('
			|| quote_ident($3)
			|| ') = ' || attr || ')';

		RETURN  public._add_raster_constraint(cn, sql);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_overview_constraint(ovschema name, ovtable name, ovcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT  public._drop_raster_constraint($1, $2, 'enforce_overview_' || $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="ovschema" type="name"/>
            <parameter mode="IN" name="ovtable" type="name"/>
            <parameter mode="IN" name="ovcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint(rastschema name, rasttable name, cn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		fqtn text;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		BEGIN
			EXECUTE 'ALTER TABLE '
				|| fqtn
				|| ' DROP CONSTRAINT '
				|| quote_ident(cn);
			RETURN TRUE;
		EXCEPTION
			WHEN undefined_object THEN
				RAISE NOTICE 'The constraint "%" does not exist.  Skipping', cn;
			WHEN OTHERS THEN
				RAISE NOTICE 'Unable to drop constraint "%": % (%)',
          cn, SQLERRM, SQLSTATE;
				RETURN FALSE;
		END;

		RETURN TRUE;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="cn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT  public._drop_raster_constraint($1, $2, 'enforce_same_alignment_' || $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[BEGIN
		IF lower($4) != 'width' AND lower($4) != 'height' THEN
			RAISE EXCEPTION 'axis must be either "width" or "height"';
			RETURN FALSE;
		END IF;

		RETURN  public._drop_raster_constraint($1, $2, 'enforce_' || $4 || '_' || $3);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
            <parameter mode="IN" name="axis" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT  public._drop_raster_constraint($1, $2, 'enforce_coverage_tile_' || $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT  public._drop_raster_constraint($1, $2, 'enforce_max_extent_' || $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT  public._drop_raster_constraint($1, $2, 'enforce_nodata_values_' || $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT  public._drop_raster_constraint($1, $2, 'enforce_num_bands_' || $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT  public._drop_raster_constraint($1, $2, 'enforce_out_db_' || $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT  public._drop_raster_constraint($1, $2, 'enforce_pixel_types_' || $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_regular_blocking(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._drop_raster_constraint($1, $2, 'enforce_regular_blocking_' || $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[BEGIN
		IF lower($4) != 'x' AND lower($4) != 'y' THEN
			RAISE EXCEPTION 'axis must be either "x" or "y"';
			RETURN FALSE;
		END IF;

		RETURN  public._drop_raster_constraint($1, $2, 'enforce_scale' || $4 || '_' || $3);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
            <parameter mode="IN" name="axis" type="character"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		cn text;
	BEGIN
		SELECT
			s.conname INTO cn
		FROM pg_class c, pg_namespace n, pg_attribute a
		, (SELECT connamespace, conname, conrelid, conkey, conindid, contype, conexclop, pg_get_constraintdef(oid) As consrc
			FROM pg_constraint) AS s
		, pg_index idx, pg_operator op
		WHERE n.nspname = $1
			AND c.relname = $2
			AND a.attname = $3
			AND a.attrelid = c.oid
			AND s.connamespace = n.oid
			AND s.conrelid = c.oid
			AND s.contype = 'x'
			AND 0::smallint = ANY (s.conkey)
			AND idx.indexrelid = s.conindid
			AND pg_get_indexdef(idx.indexrelid, 1, true) LIKE '(' || quote_ident($3) || '::%geometry)'
			AND s.conexclop[1] = op.oid
			AND op.oprname = '=';

		RETURN  public._drop_raster_constraint($1, $2, cn);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_drop_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT  public._drop_raster_constraint($1, $2, 'enforce_srid_' || $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_overview_constraint(ov raster, factor integer, refschema name, reftable name, refcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT COALESCE((SELECT TRUE FROM public.raster_columns WHERE r_table_catalog = current_database() AND r_table_schema = $3 AND r_table_name = $4 AND r_raster_column = $5), FALSE)]]></definition>
         <parameters>
            <parameter mode="IN" name="ov" type="raster"/>
            <parameter mode="IN" name="factor" type="integer"/>
            <parameter mode="IN" name="refschema" type="name"/>
            <parameter mode="IN" name="reftable" type="name"/>
            <parameter mode="IN" name="refcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_overview_constraint_info(ovschema name, ovtable name, ovcolumn name, OUT refschema name, OUT reftable name, OUT refcolumn name, OUT factor integer)" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT
		split_part(split_part(s.consrc, '''::name', 1), '''', 2)::name,
		split_part(split_part(s.consrc, '''::name', 2), '''', 2)::name,
		split_part(split_part(s.consrc, '''::name', 3), '''', 2)::name,
		trim(both from split_part(s.consrc, ',', 2))::integer
	FROM pg_class c, pg_namespace n, pg_attribute a
		, (SELECT connamespace, conrelid, conkey, pg_get_constraintdef(oid) As consrc
			FROM pg_constraint) AS s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_overview_constraint(%']]></definition>
         <parameters>
            <parameter mode="IN" name="ovschema" type="name"/>
            <parameter mode="IN" name="ovtable" type="name"/>
            <parameter mode="IN" name="ovcolumn" type="name"/>
            <parameter mode="OUT" name="refschema" type="name"/>
            <parameter mode="OUT" name="reftable" type="name"/>
            <parameter mode="OUT" name="refcolumn" type="name"/>
            <parameter mode="OUT" name="factor" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_postgis_deprecate(oldname text, newname text, version text)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
  curver_text text;
BEGIN
  --
  -- Raises a NOTICE if it was deprecated in this version,
  -- a WARNING if in a previous version (only up to minor version checked)
  --
    curver_text := '2.5.5';
    IF split_part(curver_text,'.',1)::int > split_part(version,'.',1)::int OR
       ( split_part(curver_text,'.',1) = split_part(version,'.',1) AND
         split_part(curver_text,'.',2) != split_part(version,'.',2) )
    THEN
      RAISE WARNING '% signature was deprecated in %. Please use %', oldname, version, newname;
    ELSE
      RAISE DEBUG '% signature was deprecated in %. Please use %', oldname, version, newname;
    END IF;
END;]]></definition>
         <parameters>
            <parameter mode="IN" name="oldname" type="text"/>
            <parameter mode="IN" name="newname" type="text"/>
            <parameter mode="IN" name="version" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_postgis_index_extent(tbl regclass, col text)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[_postgis_gserialized_index_extent]]></definition>
         <parameters>
            <parameter mode="IN" name="tbl" type="regclass"/>
            <parameter mode="IN" name="col" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_postgis_join_selectivity(regclass, text, regclass, text, text DEFAULT '2'::text)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[_postgis_gserialized_joinsel]]></definition>
         <parameters>
            <parameter mode="IN" type="regclass"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="regclass"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_postgis_pgsql_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN split_part(s,'.',1)::integer > 9 THEN split_part(s,'.',1) || '0' ELSE split_part(s,'.', 1) || split_part(s,'.', 2) END AS v
	FROM substring(version(), 'PostgreSQL ([0-9\.]+)') AS s;]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_postgis_scripts_pgsql_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT '120'::text AS version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_postgis_selectivity(tbl regclass, att_name text, geom geometry, mode text DEFAULT '2'::text)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[_postgis_gserialized_sel]]></definition>
         <parameters>
            <parameter mode="IN" name="tbl" type="regclass"/>
            <parameter mode="IN" name="att_name" type="text"/>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="mode" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_postgis_stats(tbl regclass, att_name text, text DEFAULT '2'::text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[_postgis_gserialized_stats]]></definition>
         <parameters>
            <parameter mode="IN" name="tbl" type="regclass"/>
            <parameter mode="IN" name="att_name" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_alignment(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT
		TRUE
	FROM pg_class c, pg_namespace n, pg_attribute a
		, (SELECT connamespace, conrelid, conkey, pg_get_constraintdef(oid) As consrc
			FROM pg_constraint) AS s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_samealignment(%';]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_blocksize(rastschema name, rasttable name, rastcolumn name, axis text)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT
		CASE
			WHEN strpos(s.consrc, 'ANY (ARRAY[') > 0 THEN
				split_part((substring(s.consrc FROM E'ARRAY\\[(.*?){1}\\]')), ',', 1)::integer
			ELSE
				regexp_replace(
					split_part(s.consrc, '= ', 2),
					'[\(\)]', '', 'g'
				)::integer
			END
	FROM pg_class c, pg_namespace n, pg_attribute a
		, (SELECT connamespace, conrelid, conkey, pg_get_constraintdef(oid) As consrc
			FROM pg_constraint) AS s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_' || $4 || '(%= %';]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
            <parameter mode="IN" name="axis" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_coverage_tile(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT
		TRUE
	FROM pg_class c, pg_namespace n, pg_attribute a
			, (SELECT connamespace, conrelid, conkey, pg_get_constraintdef(oid) As consrc
			FROM pg_constraint) AS s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_iscoveragetile(%';]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_extent(rastschema name, rasttable name, rastcolumn name)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT
		trim(both '''' from split_part(trim(split_part(s.consrc, ' @ ', 2)), '::', 1))::public.geometry
	FROM pg_class c, pg_namespace n, pg_attribute a
		, (SELECT connamespace, conrelid, conkey, pg_get_constraintdef(oid) As consrc
			FROM pg_constraint) AS s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_envelope(% @ %';]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_index(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT
			TRUE
		FROM pg_catalog.pg_class c
		JOIN pg_catalog.pg_index i
			ON i.indexrelid = c.oid
		JOIN pg_catalog.pg_class c2
			ON i.indrelid = c2.oid
		JOIN pg_catalog.pg_namespace n
			ON n.oid = c.relnamespace
		JOIN pg_am am
			ON c.relam = am.oid
		JOIN pg_attribute att
			ON att.attrelid = c2.oid
				AND pg_catalog.format_type(att.atttypid, att.atttypmod) = 'raster'
		WHERE c.relkind IN ('i')
			AND n.nspname = $1
			AND c2.relname = $2
			AND att.attname = $3
			AND am.amname = 'gist'
			AND strpos(pg_catalog.pg_get_expr(i.indexprs, i.indrelid), att.attname) > 0;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_nodata_values(rastschema name, rasttable name, rastcolumn name)" returnType="double precision[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT
		trim(both '''' from
			split_part(
				regexp_replace(
					split_part(s.consrc, ' = ', 2),
					'[\(\)]', '', 'g'
				),
				'::', 1
			)
		)::double precision[]
	FROM pg_class c, pg_namespace n, pg_attribute a
		, (SELECT connamespace, conrelid, conkey, pg_get_constraintdef(oid) As consrc
			FROM pg_constraint) AS s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_raster_constraint_nodata_values(%';]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_num_bands(rastschema name, rasttable name, rastcolumn name)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT
		regexp_replace(
			split_part(s.consrc, ' = ', 2),
			'[\(\)]', '', 'g'
		)::integer
	FROM pg_class c, pg_namespace n, pg_attribute a
		, (SELECT connamespace, conrelid, conkey, pg_get_constraintdef(oid) As consrc
			FROM pg_constraint) AS s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_numbands(%';]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_out_db(rastschema name, rasttable name, rastcolumn name)" returnType="boolean[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT
		trim(
			both '''' from split_part(
				regexp_replace(
					split_part(s.consrc, ' = ', 2),
					'[\(\)]', '', 'g'
				),
				'::', 1
			)
		)::boolean[]
	FROM pg_class c, pg_namespace n, pg_attribute a
			, (SELECT connamespace, conrelid, conkey, pg_get_constraintdef(oid) As consrc
			FROM pg_constraint) AS s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_raster_constraint_out_db(%';]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_pixel_types(rastschema name, rasttable name, rastcolumn name)" returnType="text[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT
		trim(
			both '''' from split_part(
				regexp_replace(
					split_part(s.consrc, ' = ', 2),
					'[\(\)]', '', 'g'
				),
				'::', 1
			)
		)::text[]
	FROM pg_class c, pg_namespace n, pg_attribute a
		, (SELECT connamespace, conrelid, conkey, pg_get_constraintdef(oid) As consrc
			FROM pg_constraint) AS s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_raster_constraint_pixel_types(%';]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_regular_blocking(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		covtile boolean;
		spunique boolean;
	BEGIN
		-- check existance of constraints
		-- coverage tile constraint
		covtile := COALESCE( public._raster_constraint_info_coverage_tile($1, $2, $3), FALSE);

		-- spatially unique constraint
		spunique := COALESCE( public._raster_constraint_info_spatially_unique($1, $2, $3), FALSE);

		RETURN (covtile AND spunique);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_scale(rastschema name, rasttable name, rastcolumn name, axis character)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[WITH c AS (SELECT
		regexp_replace(
			replace(
				split_part(
					split_part(s.consrc, ' = ', 2),
					'::', 1
				),
				'round(', ''
			),
			'[ ''''\(\)]', '', 'g'
		)::text AS val
	FROM pg_class c, pg_namespace n, pg_attribute a
		, (SELECT connamespace, conrelid, conkey, pg_get_constraintdef(oid) As consrc
			FROM pg_constraint) AS s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_scale' || $4 || '(% = %')
-- if it is a comma separated list of two numbers then need to use round
   SELECT CASE WHEN split_part(c.val,',', 2) > ''
        THEN round( split_part(c.val, ',',1)::numeric, split_part(c.val,',',2)::integer )::float8
        ELSE c.val::float8 END
        FROM c;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
            <parameter mode="IN" name="axis" type="character"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_spatially_unique(rastschema name, rasttable name, rastcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT
		TRUE
	FROM pg_class c, pg_namespace n, pg_attribute a
		, (SELECT connamespace, conrelid, conindid, conkey, contype, conexclop, pg_get_constraintdef(oid) As consrc
			FROM pg_constraint) AS s
		, pg_index idx, pg_operator op
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND s.contype = 'x'
		AND 0::smallint = ANY (s.conkey)
		AND idx.indexrelid = s.conindid
		AND pg_get_indexdef(idx.indexrelid, 1, true) LIKE '(' || quote_ident($3) || '::%geometry)'
		AND s.conexclop[1] = op.oid
		AND op.oprname = '=';]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_info_srid(rastschema name, rasttable name, rastcolumn name)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT
		regexp_replace(
			split_part(s.consrc, ' = ', 2),
			'[\(\)]', '', 'g'
		)::integer
	FROM pg_class c, pg_namespace n, pg_attribute a
		, (SELECT connamespace, conrelid, conkey, pg_get_constraintdef(oid) As consrc
		    FROM pg_constraint) AS s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_srid(% = %';]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_raster_constraint_nodata_values(rast raster)" returnType="numeric[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT array_agg(round(nodatavalue::numeric, 10))::numeric[] FROM public.ST_BandMetaData($1, ARRAY[]::int[]);]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_raster_constraint_out_db(rast raster)" returnType="boolean[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT array_agg(isoutdb)::boolean[] FROM public.ST_BandMetaData($1, ARRAY[]::int[]);]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_raster_constraint_pixel_types(rast raster)" returnType="text[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT array_agg(pixeltype)::text[] FROM  public.ST_BandMetaData($1, ARRAY[]::int[]);]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_dfullywithin3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_3ddwithin(geom1 geometry, geom2 geometry, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_dwithin3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_3dintersects(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[intersects3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_asgeojson(integer, geography, integer, integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_as_geojson]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_asgeojson(integer, geometry, integer, integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_AsGeoJson($2::public.geometry, $3::int4, $4::int4);]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_asgml(integer, geography, integer, integer, text, text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_as_gml]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_asgml(integer, geometry, integer, integer, text, text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asGML]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_askml(integer, geography, integer, text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_as_kml]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_askml(integer, geometry, integer, text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asKML]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_aspect4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		x integer;
		y integer;
		z integer;

		_width double precision;
		_height double precision;
		_units text;

		dz_dx double precision;
		dz_dy double precision;
		aspect double precision;
		halfpi double precision;

		_value double precision[][][];
		ndims int;
	BEGIN
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;

		IF array_length(userargs, 1) < 3 THEN
			RAISE EXCEPTION 'At least three elements must be provided for the third parameter';
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);

		_width := userargs[1]::double precision;
		_height := userargs[2]::double precision;
		_units := userargs[3];

		
		-- check that center pixel isn't NODATA
		IF _value[z][2][2] IS NULL THEN
			RETURN NULL;
		-- substitute center pixel for any neighbor pixels that are NODATA
		ELSE
			FOR y IN 1..3 LOOP
				FOR x IN 1..3 LOOP
					IF _value[z][y][x] IS NULL THEN
						_value[z][y][x] = _value[z][2][2];
					END IF;
				END LOOP;
			END LOOP;
		END IF;

		dz_dy := ((_value[z][3][1] + _value[z][3][2] + _value[z][3][2] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][1][2] + _value[z][1][2] + _value[z][1][3]));
		dz_dx := ((_value[z][1][3] + _value[z][2][3] + _value[z][2][3] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][2][1] + _value[z][2][1] + _value[z][3][1]));

		-- aspect is flat
		IF abs(dz_dx) = 0::double precision AND abs(dz_dy) = 0::double precision THEN
			RETURN -1;
		END IF;

		-- aspect is in radians
		aspect := atan2(dz_dy, -dz_dx);

		-- north = 0, pi/2 = east, 3pi/2 = west
		halfpi := pi() / 2.0;
		IF aspect > halfpi THEN
			aspect := (5.0 * halfpi) - aspect;
		ELSE
			aspect := halfpi - aspect;
		END IF;

		IF aspect = 2 * pi() THEN
			aspect := 0.;
		END IF;

		-- output depends on user preference
		CASE substring(upper(trim(leading from _units)) for 3)
			-- radians
			WHEN 'rad' THEN
				RETURN aspect;
			-- degrees (default)
			ELSE
				RETURN degrees(aspect);
		END CASE;

	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="value" type="double precision[]"/>
            <parameter mode="IN" name="pos" type="integer[]"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_asraster(geom geometry, scalex double precision DEFAULT 0, scaley double precision DEFAULT 0, width integer DEFAULT 0, height integer DEFAULT 0, pixeltype text[] DEFAULT ARRAY['8BUI'::text], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], upperleftx double precision DEFAULT NULL::double precision, upperlefty double precision DEFAULT NULL::double precision, gridx double precision DEFAULT NULL::double precision, gridy double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_asRaster]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="scalex" type="double precision"/>
            <parameter mode="IN" name="scaley" type="double precision"/>
            <parameter mode="IN" name="width" type="integer"/>
            <parameter mode="IN" name="height" type="integer"/>
            <parameter mode="IN" name="pixeltype" type="text[]"/>
            <parameter mode="IN" name="value" type="double precision[]"/>
            <parameter mode="IN" name="nodataval" type="double precision[]"/>
            <parameter mode="IN" name="upperleftx" type="double precision"/>
            <parameter mode="IN" name="upperlefty" type="double precision"/>
            <parameter mode="IN" name="gridx" type="double precision"/>
            <parameter mode="IN" name="gridy" type="double precision"/>
            <parameter mode="IN" name="skewx" type="double precision"/>
            <parameter mode="IN" name="skewy" type="double precision"/>
            <parameter mode="IN" name="touched" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_asx3d(integer, geometry, integer, integer, text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_asX3D]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_bestsrid(geography)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_BestSRID($1,$1)]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_bestsrid(geography, geography)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_bestsrid]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_buffer(geometry, double precision, cstring)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[buffer]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[] DEFAULT NULL::double precision[], crop boolean DEFAULT true)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_clip]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer[]"/>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="nodataval" type="double precision[]"/>
            <parameter mode="IN" name="crop" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_colormap(rast raster, nband integer, colormap text, method text DEFAULT 'INTERPOLATE'::text)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_colorMap]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="colormap" type="text"/>
            <parameter mode="IN" name="method" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_concavehull(param_inputgeom geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	vexhull public.geometry;
	var_resultgeom public.geometry;
	var_inputgeom public.geometry;
	vexring public.geometry;
	cavering public.geometry;
	cavept public.geometry[];
	seglength double precision;
	var_tempgeom public.geometry;
	scale_factor float := 1;
	i integer;
	BEGIN
		-- First compute the ConvexHull of the geometry
		vexhull := public.ST_ConvexHull(param_inputgeom);
		var_inputgeom := param_inputgeom;
		--A point really has no concave hull
		IF public.ST_GeometryType(vexhull) = 'ST_Point' OR public.ST_GeometryType(vexHull) = 'ST_LineString' THEN
			RETURN vexhull;
		END IF;

		-- convert the hull perimeter to a linestring so we can manipulate individual points
		vexring := CASE WHEN public.ST_GeometryType(vexhull) = 'ST_LineString' THEN vexhull ELSE public.ST_ExteriorRing(vexhull) END;
		IF abs(public.ST_X(public.ST_PointN(vexring,1))) < 1 THEN --scale the geometry to prevent stupid precision errors - not sure it works so make low for now
			scale_factor := 100;
			vexring := public.ST_Scale(vexring, scale_factor,scale_factor);
			var_inputgeom := public.ST_Scale(var_inputgeom, scale_factor, scale_factor);
			--RAISE NOTICE 'Scaling';
		END IF;
		seglength := public.ST_Length(vexring)/least(public.ST_NPoints(vexring)*2,1000) ;

		vexring := public.ST_Segmentize(vexring, seglength);
		-- find the point on the original geom that is closest to each point of the convex hull and make a new linestring out of it.
		cavering := public.ST_Collect(
			ARRAY(

				SELECT
					public.ST_ClosestPoint(var_inputgeom, pt ) As the_geom
					FROM (
						SELECT  public.ST_PointN(vexring, n ) As pt, n
							FROM
							generate_series(1, public.ST_NPoints(vexring) ) As n
						) As pt

				)
			)
		;

		var_resultgeom := public.ST_MakeLine(geom)
			FROM public.ST_Dump(cavering) As foo;

		IF public.ST_IsSimple(var_resultgeom) THEN
			var_resultgeom := public.ST_MakePolygon(var_resultgeom);
			--RAISE NOTICE 'is Simple: %', var_resultgeom;
		ELSE 
			--RAISE NOTICE 'is not Simple: %', var_resultgeom;
			var_resultgeom := public.ST_ConvexHull(var_resultgeom);
		END IF;

		IF scale_factor > 1 THEN -- scale the result back
			var_resultgeom := public.ST_Scale(var_resultgeom, 1/scale_factor, 1/scale_factor);
		END IF;

		-- make sure result covers original (#3638)
		-- Using ST_UnaryUnion since SFCGAL doesn't replace with its own implementation
		-- and SFCGAL one chokes for some reason
		var_resultgeom := public.ST_UnaryUnion(public.ST_Collect(param_inputgeom, var_resultgeom) );
		RETURN var_resultgeom;

	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="param_inputgeom" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_contains(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[contains]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_contains]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="nband1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nband2" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_containsproperly(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[containsproperly]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_containsProperly]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="nband1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nband2" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_convertarray4ma(value double precision[])" returnType="double precision[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		_value double precision[][][];
		x int;
		y int;
	BEGIN
		IF array_ndims(value) != 2 THEN
			RAISE EXCEPTION 'Function parameter must be a 2-dimension array';
		END IF;

		_value := array_fill(NULL::double precision, ARRAY[1, array_length(value, 1), array_length(value, 2)]::int[], ARRAY[1, array_lower(value, 1), array_lower(value, 2)]::int[]);

		-- row
		FOR y IN array_lower(value, 1)..array_upper(value, 1) LOOP
			-- column
			FOR x IN array_lower(value, 2)..array_upper(value, 2) LOOP
				_value[1][y][x] = value[y][x];
			END LOOP;
		END LOOP;

		RETURN _value;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="value" type="double precision[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_count(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1)" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		rtn bigint;
	BEGIN
		IF exclude_nodata_value IS FALSE THEN
			SELECT width * height INTO rtn FROM public.ST_Metadata(rast);
		ELSE
			SELECT count INTO rtn FROM public._ST_summarystats($1, $2, $3, $4);
		END IF;

		RETURN rtn;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_st_count(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1)" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		count bigint;
	BEGIN
		EXECUTE 'SELECT public.ST_CountAgg('
			|| quote_ident($2) || ', '
			|| $3 || ', '
			|| $4 || ', '
			|| $5 || ') '
			|| 'FROM ' || quote_ident($1)
	 	INTO count;
		RETURN count;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_countagg_finalfn(agg agg_count)" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[BEGIN
		IF agg IS NULL THEN
			RAISE EXCEPTION 'Cannot count coverage';
		END IF;

		RETURN agg.count;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="agg" type="agg_count"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_countagg_transfn(agg agg_count, rast raster, exclude_nodata_value boolean)" returnType="agg_count" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		rtn_agg agg_count;
	BEGIN
		rtn_agg :=  public.__ST_countagg_transfn(
			agg,
			rast,
			1, exclude_nodata_value,
			1
		);
		RETURN rtn_agg;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="agg" type="agg_count"/>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean)" returnType="agg_count" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		rtn_agg agg_count;
	BEGIN
		rtn_agg :=  public.__ST_countagg_transfn(
			agg,
			rast,
			nband, exclude_nodata_value,
			1
		);
		RETURN rtn_agg;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="agg" type="agg_count"/>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision)" returnType="agg_count" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		rtn_agg agg_count;
	BEGIN
		rtn_agg :=  public.__st_countagg_transfn(
			agg,
			rast,
			nband, exclude_nodata_value,
			sample_percent
		);
		RETURN rtn_agg;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="agg" type="agg_count"/>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_coveredby(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[coveredby]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_coveredby]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="nband1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nband2" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_covers(geography, geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_covers]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_covers(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[covers]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_covers]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="nband1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nband2" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_crosses(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[crosses]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_dfullywithin(geom1 geometry, geom2 geometry, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_dfullywithin]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_dfullywithin]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="nband1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nband2" type="integer"/>
            <parameter mode="IN" name="distance" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_distance(geography, geography, double precision, boolean)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_distancetree(geography, geography)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_DistanceTree($1, $2, 0.0, true)]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_distancetree(geography, geography, double precision, boolean)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_distance_tree]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_distanceuncached(geography, geography)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_DistanceUnCached($1, $2, 0.0, true)]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_distanceuncached(geography, geography, boolean)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_DistanceUnCached($1, $2, 0.0, $3)]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_distanceuncached(geography, geography, double precision, boolean)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_distance_uncached]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_dwithin(geography, geography, double precision, boolean)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_dwithin]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_dwithin(geom1 geometry, geom2 geometry, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_dwithin]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_dwithin]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="nband1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nband2" type="integer"/>
            <parameter mode="IN" name="distance" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_dwithinuncached(geography, geography, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) public._ST_Expand($2,$3) AND $2 OPERATOR(public.&&) public._ST_Expand($1,$3) AND public._ST_DWithinUnCached($1, $2, $3, true)]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_dwithinuncached(geography, geography, double precision, boolean)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_dwithin_uncached]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_equals(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Equals]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_expand(geography, double precision)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_expand]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_gdalwarp(rast raster, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125, srid integer DEFAULT NULL::integer, scalex double precision DEFAULT 0, scaley double precision DEFAULT 0, gridx double precision DEFAULT NULL::double precision, gridy double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, width integer DEFAULT NULL::integer, height integer DEFAULT NULL::integer)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_GDALWarp]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="algorithm" type="text"/>
            <parameter mode="IN" name="maxerr" type="double precision"/>
            <parameter mode="IN" name="srid" type="integer"/>
            <parameter mode="IN" name="scalex" type="double precision"/>
            <parameter mode="IN" name="scaley" type="double precision"/>
            <parameter mode="IN" name="gridx" type="double precision"/>
            <parameter mode="IN" name="gridy" type="double precision"/>
            <parameter mode="IN" name="skewx" type="double precision"/>
            <parameter mode="IN" name="skewy" type="double precision"/>
            <parameter mode="IN" name="width" type="integer"/>
            <parameter mode="IN" name="height" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_geomfromgml(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geom_from_gml]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_grayscale4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		ndims integer;
		_value double precision[][][];

		red double precision;
		green double precision;
		blue double precision;

		gray double precision;
	BEGIN

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		red := _value[1][1][1];
		green := _value[2][1][1];
		blue := _value[3][1][1];

		gray = round(0.2989 * red + 0.5870 * green + 0.1140 * blue);
		RETURN gray;

	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="value" type="double precision[]"/>
            <parameter mode="IN" name="pos" type="integer[]"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_hillshade4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		_pixwidth double precision;
		_pixheight double precision;
		_width double precision;
		_height double precision;
		_azimuth double precision;
		_altitude double precision;
		_bright double precision;
		_scale double precision;

		dz_dx double precision;
		dz_dy double precision;
		azimuth double precision;
		zenith double precision;
		slope double precision;
		aspect double precision;
		shade double precision;

		_value double precision[][][];
		ndims int;
		z int;
	BEGIN
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;

		IF array_length(userargs, 1) < 8 THEN
			RAISE EXCEPTION 'At least eight elements must be provided for the third parameter';
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);

		_pixwidth := userargs[1]::double precision;
		_pixheight := userargs[2]::double precision;
		_width := userargs[3]::double precision;
		_height := userargs[4]::double precision;
		_azimuth := userargs[5]::double precision;
		_altitude := userargs[6]::double precision;
		_bright := userargs[7]::double precision;
		_scale := userargs[8]::double precision;

		-- check that pixel is not edge pixel
		IF (pos[1][1] = 1 OR pos[1][2] = 1) OR (pos[1][1] = _width OR pos[1][2] = _height) THEN
			RETURN NULL;
		END IF;

		-- clamp azimuth
		IF _azimuth < 0. THEN
			RAISE NOTICE 'Clamping provided azimuth value % to 0', _azimuth;
			_azimuth := 0.;
		ELSEIF _azimuth >= 360. THEN
			RAISE NOTICE 'Converting provided azimuth value % to be between 0 and 360', _azimuth;
			_azimuth := _azimuth - (360. * floor(_azimuth / 360.));
		END IF;
		azimuth := 360. - _azimuth + 90.;
		IF azimuth >= 360. THEN
			azimuth := azimuth - 360.;
		END IF;
		azimuth := radians(azimuth);
		--RAISE NOTICE 'azimuth = %', azimuth;

		-- clamp altitude
		IF _altitude < 0. THEN
			RAISE NOTICE 'Clamping provided altitude value % to 0', _altitude;
			_altitude := 0.;
		ELSEIF _altitude > 90. THEN
			RAISE NOTICE 'Clamping provided altitude value % to 90', _altitude;
			_altitude := 90.;
		END IF;
		zenith := radians(90. - _altitude);
		--RAISE NOTICE 'zenith = %', zenith;

		-- clamp bright
		IF _bright < 0. THEN
			RAISE NOTICE 'Clamping provided bright value % to 0', _bright;
			_bright := 0.;
		ELSEIF _bright > 255. THEN
			RAISE NOTICE 'Clamping provided bright value % to 255', _bright;
			_bright := 255.;
		END IF;

		dz_dy := ((_value[z][3][1] + _value[z][3][2] + _value[z][3][2] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][1][2] + _value[z][1][2] + _value[z][1][3])) / (8 * _pixheight);
		dz_dx := ((_value[z][1][3] + _value[z][2][3] + _value[z][2][3] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][2][1] + _value[z][2][1] + _value[z][3][1])) / (8 * _pixwidth);

		slope := atan(sqrt(dz_dx * dz_dx + dz_dy * dz_dy) / _scale);

		IF dz_dx != 0. THEN
			aspect := atan2(dz_dy, -dz_dx);

			IF aspect < 0. THEN
				aspect := aspect + (2.0 * pi());
			END IF;
		ELSE
			IF dz_dy > 0. THEN
				aspect := pi() / 2.;
			ELSEIF dz_dy < 0. THEN
				aspect := (2. * pi()) - (pi() / 2.);
			-- set to pi as that is the expected PostgreSQL answer in Linux
			ELSE
				aspect := pi();
			END IF;
		END IF;

		shade := _bright * ((cos(zenith) * cos(slope)) + (sin(zenith) * sin(slope) * cos(azimuth - aspect)));

		IF shade < 0. THEN
			shade := 0;
		END IF;

		RETURN shade;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="value" type="double precision[]"/>
            <parameter mode="IN" name="pos" type="integer[]"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_histogram(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1, bins integer DEFAULT 0, width double precision[] DEFAULT NULL::double precision[], &quot;right&quot; boolean DEFAULT false, min double precision DEFAULT NULL::double precision, max double precision DEFAULT NULL::double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_histogram]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="bins" type="integer"/>
            <parameter mode="IN" name="width" type="double precision[]"/>
            <parameter mode="IN" name="right" type="boolean"/>
            <parameter mode="IN" name="min" type="double precision"/>
            <parameter mode="IN" name="max" type="double precision"/>
            <parameter mode="OUT" name="min" type="double precision"/>
            <parameter mode="OUT" name="max" type="double precision"/>
            <parameter mode="OUT" name="count" type="bigint"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_histogram(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1, bins integer DEFAULT 0, width double precision[] DEFAULT NULL::double precision[], &quot;right&quot; boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_histogramCoverage]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="bins" type="integer"/>
            <parameter mode="IN" name="width" type="double precision[]"/>
            <parameter mode="IN" name="right" type="boolean"/>
            <parameter mode="OUT" name="min" type="double precision"/>
            <parameter mode="OUT" name="max" type="double precision"/>
            <parameter mode="OUT" name="count" type="bigint"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_intersects(geom geometry, rast raster, nband integer DEFAULT NULL::integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		hasnodata boolean := TRUE;
		_geom public.geometry;
	BEGIN
		IF public.ST_SRID(rast) != public.ST_SRID(geom) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;

		_geom := public.ST_ConvexHull(rast);
		IF nband IS NOT NULL THEN
			SELECT CASE WHEN bmd.nodatavalue IS NULL THEN FALSE ELSE NULL END INTO hasnodata FROM public.ST_BandMetaData(rast, nband) AS bmd;
		END IF;

		IF public.ST_Intersects(geom, _geom) IS NOT TRUE THEN
			RETURN FALSE;
		ELSEIF nband IS NULL OR hasnodata IS FALSE THEN
			RETURN TRUE;
		END IF;

		SELECT public.ST_Buffer(public.ST_Collect(t.geom), 0) INTO _geom FROM public.ST_PixelAsPolygons(rast, nband) AS t;
		RETURN public.ST_Intersects(geom, _geom);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_intersects(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[intersects]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_intersects]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="nband1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nband2" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_linecrossingdirection(geom1 geometry, geom2 geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_LineCrossingDirection]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_longestline(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_longestline2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text DEFAULT NULL::text, distancex integer DEFAULT 0, distancey integer DEFAULT 0, extenttype text DEFAULT 'INTERSECTION'::text, customextent raster DEFAULT NULL::raster, mask double precision[] DEFAULT NULL::double precision[], weighted boolean DEFAULT NULL::boolean, VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_nMapAlgebra]]></definition>
         <parameters>
            <parameter mode="IN" name="rastbandargset" type="rastbandarg[]"/>
            <parameter mode="IN" name="callbackfunc" type="regprocedure"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="distancex" type="integer"/>
            <parameter mode="IN" name="distancey" type="integer"/>
            <parameter mode="IN" name="extenttype" type="text"/>
            <parameter mode="IN" name="customextent" type="raster"/>
            <parameter mode="IN" name="mask" type="double precision[]"/>
            <parameter mode="IN" name="weighted" type="boolean"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_mapalgebra(rastbandargset rastbandarg[], expression text, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, nodata1expr text DEFAULT NULL::text, nodata2expr text DEFAULT NULL::text, nodatanodataval double precision DEFAULT NULL::double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_nMapAlgebraExpr]]></definition>
         <parameters>
            <parameter mode="IN" name="rastbandargset" type="rastbandarg[]"/>
            <parameter mode="IN" name="expression" type="text"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="extenttype" type="text"/>
            <parameter mode="IN" name="nodata1expr" type="text"/>
            <parameter mode="IN" name="nodata2expr" type="text"/>
            <parameter mode="IN" name="nodatanodataval" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_maxdistance(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_maxdistance2d_linestring]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean DEFAULT true)" returnType="double precision[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_neighborhood]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="columnx" type="integer"/>
            <parameter mode="IN" name="rowy" type="integer"/>
            <parameter mode="IN" name="distancex" type="integer"/>
            <parameter mode="IN" name="distancey" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_orderingequals(geometrya geometry, geometryb geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_same]]></definition>
         <parameters>
            <parameter mode="IN" name="geometrya" type="geometry"/>
            <parameter mode="IN" name="geometryb" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_overlaps(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[overlaps]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_overlaps]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="nband1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nband2" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_pixelaspolygons(rast raster, band integer DEFAULT 1, columnx integer DEFAULT NULL::integer, rowy integer DEFAULT NULL::integer, exclude_nodata_value boolean DEFAULT true, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_getPixelPolygons]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="columnx" type="integer"/>
            <parameter mode="IN" name="rowy" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="OUT" name="geom" type="geometry"/>
            <parameter mode="OUT" name="val" type="double precision"/>
            <parameter mode="OUT" name="x" type="integer"/>
            <parameter mode="OUT" name="y" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_pointoutside(geography)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_point_outside]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_quantile(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_quantile]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="quantiles" type="double precision[]"/>
            <parameter mode="OUT" name="quantile" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_st_quantile(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_quantileCoverage]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="quantiles" type="double precision[]"/>
            <parameter mode="OUT" name="quantile" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_rastertoworldcoord(rast raster, columnx integer DEFAULT NULL::integer, rowy integer DEFAULT NULL::integer, OUT longitude double precision, OUT latitude double precision)" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_rasterToWorldCoord]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="columnx" type="integer"/>
            <parameter mode="IN" name="rowy" type="integer"/>
            <parameter mode="OUT" name="longitude" type="double precision"/>
            <parameter mode="OUT" name="latitude" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_reclass(rast raster, VARIADIC reclassargset reclassarg[])" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_reclass]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="VARIADIC" name="reclassargset" type="reclassarg[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_roughness4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		x integer;
		y integer;
		z integer;

		minimum double precision;
		maximum double precision;

		_value double precision[][][];
		ndims int;
	BEGIN

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);

		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;

		-- check that center pixel isn't NODATA
		IF _value[z][2][2] IS NULL THEN
			RETURN NULL;
		-- substitute center pixel for any neighbor pixels that are NODATA
		ELSE
			FOR y IN 1..3 LOOP
				FOR x IN 1..3 LOOP
					IF _value[z][y][x] IS NULL THEN
						_value[z][y][x] = _value[z][2][2];
					END IF;
				END LOOP;
			END LOOP;
		END IF;

		minimum := _value[z][1][1];
		maximum := _value[z][1][1];

		FOR Y IN 1..3 LOOP
		    FOR X IN 1..3 LOOP
		    	 IF _value[z][y][x] < minimum THEN
			    minimum := _value[z][y][x];
			 ELSIF _value[z][y][x] > maximum THEN
			    maximum := _value[z][y][x];
			 END IF;
		    END LOOP;
		END LOOP;

		RETURN maximum - minimum;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="value" type="double precision[]"/>
            <parameter mode="IN" name="pos" type="integer[]"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_samealignment_finalfn(agg agg_samealignment)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT $1.aligned]]></definition>
         <parameters>
            <parameter mode="IN" name="agg" type="agg_samealignment"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_samealignment_transfn(agg agg_samealignment, rast raster)" returnType="agg_samealignment" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		m record;
		aligned boolean;
	BEGIN
		IF agg IS NULL THEN
			agg.refraster := NULL;
			agg.aligned := NULL;
		END IF;

		IF rast IS NULL THEN
			agg.aligned := NULL;
		ELSE
			IF agg.refraster IS NULL THEN
				m := ST_Metadata(rast);
				agg.refraster := ST_MakeEmptyRaster(1, 1, m.upperleftx, m.upperlefty, m.scalex, m.scaley, m.skewx, m.skewy, m.srid);
				agg.aligned := TRUE;
			ELSIF agg.aligned IS TRUE THEN
				agg.aligned := ST_SameAlignment(agg.refraster, rast);
			END IF;
		END IF;
		RETURN agg;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="agg" type="agg_samealignment"/>
            <parameter mode="IN" name="rast" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[] DEFAULT NULL::boolean[], hasnosetvalue boolean DEFAULT false, nosetvalue double precision DEFAULT NULL::double precision, keepnodata boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_setPixelValuesArray]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="x" type="integer"/>
            <parameter mode="IN" name="y" type="integer"/>
            <parameter mode="IN" name="newvalueset" type="double precision[]"/>
            <parameter mode="IN" name="noset" type="boolean[]"/>
            <parameter mode="IN" name="hasnosetvalue" type="boolean"/>
            <parameter mode="IN" name="nosetvalue" type="double precision"/>
            <parameter mode="IN" name="keepnodata" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_slope4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		x integer;
		y integer;
		z integer;

		_pixwidth double precision;
		_pixheight double precision;
		_width double precision;
		_height double precision;
		_units text;
		_scale double precision;

		dz_dx double precision;
		dz_dy double precision;

		slope double precision;

		_value double precision[][][];
		ndims int;
	BEGIN

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);

		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;

		IF array_length(userargs, 1) < 6 THEN
			RAISE EXCEPTION 'At least six elements must be provided for the third parameter';
		END IF;

		_pixwidth := userargs[1]::double precision;
		_pixheight := userargs[2]::double precision;
		_width := userargs[3]::double precision;
		_height := userargs[4]::double precision;
		_units := userargs[5];
		_scale := userargs[6]::double precision;

		
		-- check that center pixel isn't NODATA
		IF _value[z][2][2] IS NULL THEN
			RETURN NULL;
		-- substitute center pixel for any neighbor pixels that are NODATA
		ELSE
			FOR y IN 1..3 LOOP
				FOR x IN 1..3 LOOP
					IF _value[z][y][x] IS NULL THEN
						_value[z][y][x] = _value[z][2][2];
					END IF;
				END LOOP;
			END LOOP;
		END IF;

		dz_dy := ((_value[z][3][1] + _value[z][3][2] + _value[z][3][2] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][1][2] + _value[z][1][2] + _value[z][1][3])) / _pixheight;
		dz_dx := ((_value[z][1][3] + _value[z][2][3] + _value[z][2][3] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][2][1] + _value[z][2][1] + _value[z][3][1])) / _pixwidth;

		slope := sqrt(dz_dx * dz_dx + dz_dy * dz_dy) / (8 * _scale);

		-- output depends on user preference
		CASE substring(upper(trim(leading from _units)) for 3)
			-- percentages
			WHEN 'PER' THEN
				slope := 100.0 * slope;
			-- radians
			WHEN 'rad' THEN
				slope := atan(slope);
			-- degrees (default)
			ELSE
				slope := degrees(atan(slope));
		END CASE;

		RETURN slope;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="value" type="double precision[]"/>
            <parameter mode="IN" name="pos" type="integer[]"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_summarystats(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1)" returnType="summarystats" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_summaryStats]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_summarystats(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1)" returnType="summarystats" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		stats summarystats;
	BEGIN
		EXECUTE 'SELECT (stats).* FROM (SELECT public.ST_SummaryStatsAgg('
			|| quote_ident($2) || ', '
			|| $3 || ', '
			|| $4 || ', '
			|| $5 || ') AS stats '
			|| 'FROM ' || quote_ident($1)
			|| ') foo'
			INTO stats;
		RETURN stats;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_summarystats_finalfn(internal)" returnType="summarystats" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_summaryStats_finalfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_summarystats_transfn(internal, raster, boolean, double precision)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_summaryStats_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="boolean"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_summarystats_transfn(internal, raster, integer, boolean)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_summaryStats_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_summarystats_transfn(internal, raster, integer, boolean, double precision)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_summaryStats_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_tile(rast raster, width integer, height integer, nband integer[] DEFAULT NULL::integer[], padwithnodata boolean DEFAULT false, nodataval double precision DEFAULT NULL::double precision)" returnType="SETOF raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_tile]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="width" type="integer"/>
            <parameter mode="IN" name="height" type="integer"/>
            <parameter mode="IN" name="nband" type="integer[]"/>
            <parameter mode="IN" name="padwithnodata" type="boolean"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_touches(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[touches]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_touches]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="nband1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nband2" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_tpi4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		x integer;
		y integer;
		z integer;

		Z1 double precision;
		Z2 double precision;
		Z3 double precision;
		Z4 double precision;
		Z5 double precision;
		Z6 double precision;
		Z7 double precision;
		Z8 double precision;
		Z9 double precision;

		tpi double precision;
		mean double precision;
		_value double precision[][][];
		ndims int;
	BEGIN
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);

		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;

		-- check that center pixel isn't NODATA
		IF _value[z][2][2] IS NULL THEN
			RETURN NULL;
		-- substitute center pixel for any neighbor pixels that are NODATA
		ELSE
			FOR y IN 1..3 LOOP
				FOR x IN 1..3 LOOP
					IF _value[z][y][x] IS NULL THEN
						_value[z][y][x] = _value[z][2][2];
					END IF;
				END LOOP;
			END LOOP;
		END IF;

		-------------------------------------------------
		--|   Z1= Z(-1,1) |  Z2= Z(0,1)	| Z3= Z(1,1)  |--
		-------------------------------------------------
		--|   Z4= Z(-1,0) |  Z5= Z(0,0) | Z6= Z(1,0)  |--
		-------------------------------------------------
		--|   Z7= Z(-1,-1)|  Z8= Z(0,-1)|  Z9= Z(1,-1)|--
		-------------------------------------------------

		Z1 := _value[z][1][1];
		Z2 := _value[z][2][1];
		Z3 := _value[z][3][1];
		Z4 := _value[z][1][2];
		Z5 := _value[z][2][2];
		Z6 := _value[z][3][2];
		Z7 := _value[z][1][3];
		Z8 := _value[z][2][3];
		Z9 := _value[z][3][3];

		mean := (Z1 + Z2 + Z3 + Z4 + Z6 + Z7 + Z8 + Z9)/8;
		tpi := Z5-mean;

		return tpi;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="value" type="double precision[]"/>
            <parameter mode="IN" name="pos" type="integer[]"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_tri4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		x integer;
		y integer;
		z integer;

		Z1 double precision;
		Z2 double precision;
		Z3 double precision;
		Z4 double precision;
		Z5 double precision;
		Z6 double precision;
		Z7 double precision;
		Z8 double precision;
		Z9 double precision;

		tri double precision;
		_value double precision[][][];
		ndims int;
	BEGIN
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);

		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;

		-- check that center pixel isn't NODATA
		IF _value[z][2][2] IS NULL THEN
			RETURN NULL;
		-- substitute center pixel for any neighbor pixels that are NODATA
		ELSE
			FOR y IN 1..3 LOOP
				FOR x IN 1..3 LOOP
					IF _value[z][y][x] IS NULL THEN
						_value[z][y][x] = _value[z][2][2];
					END IF;
				END LOOP;
			END LOOP;
		END IF;

		-------------------------------------------------
		--|   Z1= Z(-1,1) |  Z2= Z(0,1)	| Z3= Z(1,1)  |--
		-------------------------------------------------
		--|   Z4= Z(-1,0) |  Z5= Z(0,0) | Z6= Z(1,0)  |--
		-------------------------------------------------
		--|   Z7= Z(-1,-1)|  Z8= Z(0,-1)|  Z9= Z(1,-1)|--
		-------------------------------------------------

		-- _scale width and height units / z units to make z units equal to height width units
		Z1 := _value[z][1][1];
		Z2 := _value[z][2][1];
		Z3 := _value[z][3][1];
		Z4 := _value[z][1][2];
		Z5 := _value[z][2][2];
		Z6 := _value[z][3][2];
		Z7 := _value[z][1][3];
		Z8 := _value[z][2][3];
		Z9 := _value[z][3][3];

		tri := ( abs(Z1 - Z5 ) + abs( Z2 - Z5 ) + abs( Z3 - Z5 ) + abs( Z4 - Z5 ) + abs( Z6 - Z5 ) + abs( Z7 - Z5 ) + abs( Z8 - Z5 ) + abs ( Z9 - Z5 )) / 8;

		return tri;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="value" type="double precision[]"/>
            <parameter mode="IN" name="pos" type="integer[]"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_union_finalfn(internal)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_union_finalfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_union_transfn(internal, raster)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_union_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_union_transfn(internal, raster, integer)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_union_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_union_transfn(internal, raster, integer, text)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_union_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_union_transfn(internal, raster, text)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_union_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_union_transfn(internal, raster, unionarg[])" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_union_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="unionarg[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_valuecount(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, searchvalues double precision[] DEFAULT NULL::double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_valueCount]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="searchvalues" type="double precision[]"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
            <parameter mode="OUT" name="count" type="integer"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_st_valuecount(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, searchvalues double precision[] DEFAULT NULL::double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_valueCountCoverage]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="searchvalues" type="double precision[]"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
            <parameter mode="OUT" name="count" type="integer"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_voronoi(g1 geometry, clip geometry DEFAULT NULL::geometry, tolerance double precision DEFAULT 0.0, return_polygons boolean DEFAULT true)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Voronoi]]></definition>
         <parameters>
            <parameter mode="IN" name="g1" type="geometry"/>
            <parameter mode="IN" name="clip" type="geometry"/>
            <parameter mode="IN" name="tolerance" type="double precision"/>
            <parameter mode="IN" name="return_polygons" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_within(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_Contains($2,$1)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._st_contains($3, $4, $1, $2)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="nband1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nband2" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="_st_worldtorastercoord(rast raster, longitude double precision DEFAULT NULL::double precision, latitude double precision DEFAULT NULL::double precision, OUT columnx integer, OUT rowy integer)" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_worldToRasterCoord]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="longitude" type="double precision"/>
            <parameter mode="IN" name="latitude" type="double precision"/>
            <parameter mode="OUT" name="columnx" type="integer"/>
            <parameter mode="OUT" name="rowy" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="_updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		fqtn text;
		schema name;
		sql text;
		srid integer;
		ct boolean;
	BEGIN
		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;

		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;

		-- clamp SRID
		IF new_srid < 0 THEN
			srid :=  public.ST_SRID('POINT EMPTY'::public.geometry);
			RAISE NOTICE 'SRID % converted to the officially unknown SRID %', new_srid, srid;
		ELSE
			srid := new_srid;
		END IF;

		-- drop coverage tile constraint
		-- done separately just in case constraint doesn't exist
		ct := public._raster_constraint_info_coverage_tile(schema, $2, $3);
		IF ct IS TRUE THEN
			PERFORM  public._drop_raster_constraint_coverage_tile(schema, $2, $3);
		END IF;

		-- drop SRID, extent, alignment constraints
		PERFORM  public.DropRasterConstraints(schema, $2, $3, 'extent', 'alignment', 'srid');

		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);

		-- update SRID
		sql := 'UPDATE ' || fqtn ||
			' SET ' || quote_ident($3) ||
			' =  public.ST_SetSRID(' || quote_ident($3) ||
			'::public.raster, ' || srid || ')';
		RAISE NOTICE 'sql = %', sql;
		EXECUTE sql;

		-- add SRID constraint
		PERFORM  public.AddRasterConstraints(schema, $2, $3, 'srid', 'extent', 'alignment');

		-- add coverage tile constraint if needed
		IF ct IS TRUE THEN
			PERFORM  public._add_raster_constraint_coverage_tile(schema, $2, $3);
		END IF;

		RETURN TRUE;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="schema_name" type="name"/>
            <parameter mode="IN" name="table_name" type="name"/>
            <parameter mode="IN" name="column_name" type="name"/>
            <parameter mode="IN" name="new_srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="addauth(text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: auth_token - Add an authorization token to be used in current transaction.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
	lockid alias for $1;
	okay boolean;
	myrec record;
BEGIN
	-- check to see if table exists
	--  if not, CREATE TEMP TABLE mylock (transid xid, lockcode text)
	okay := 'f';
	FOR myrec IN SELECT * FROM pg_class WHERE relname = 'temp_lock_have_table' LOOP
		okay := 't';
	END LOOP;
	IF (okay <> 't') THEN
		CREATE TEMP TABLE temp_lock_have_table (transid xid, lockcode text);
			-- this will only work from pgsql7.4 up
			-- ON COMMIT DELETE ROWS;
	END IF;

	--  INSERT INTO mylock VALUES ( $1)
--	EXECUTE 'INSERT INTO temp_lock_have_table VALUES ( '||
--		quote_literal(getTransactionID()) || ',' ||
--		quote_literal(lockid) ||')';

	INSERT INTO temp_lock_have_table VALUES (getTransactionID(), lockid);

	RETURN true::boolean;
END;]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="addgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer, new_type character varying, new_dim integer, use_typmod boolean DEFAULT true)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: catalog_name, schema_name, table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table of attributes. By default uses type modifier to define rather than constraints. Pass in false for use_typmod to get old check constraint based behavior]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
	rec RECORD;
	sr varchar;
	real_schema name;
	sql text;
	new_srid integer;

BEGIN

	-- Verify geometry type
	IF (postgis_type_name(new_type,new_dim) IS NULL )
	THEN
		RAISE EXCEPTION 'Invalid type name "%(%)" - valid ones are:
	POINT, MULTIPOINT,
	LINESTRING, MULTILINESTRING,
	POLYGON, MULTIPOLYGON,
	CIRCULARSTRING, COMPOUNDCURVE, MULTICURVE,
	CURVEPOLYGON, MULTISURFACE,
	GEOMETRY, GEOMETRYCOLLECTION,
	POINTM, MULTIPOINTM,
	LINESTRINGM, MULTILINESTRINGM,
	POLYGONM, MULTIPOLYGONM,
	CIRCULARSTRINGM, COMPOUNDCURVEM, MULTICURVEM
	CURVEPOLYGONM, MULTISURFACEM, TRIANGLE, TRIANGLEM,
	POLYHEDRALSURFACE, POLYHEDRALSURFACEM, TIN, TINM
	or GEOMETRYCOLLECTIONM', new_type, new_dim;
		RETURN 'fail';
	END IF;

	-- Verify dimension
	IF ( (new_dim >4) OR (new_dim <2) ) THEN
		RAISE EXCEPTION 'invalid dimension';
		RETURN 'fail';
	END IF;

	IF ( (new_type LIKE '%M') AND (new_dim!=3) ) THEN
		RAISE EXCEPTION 'TypeM needs 3 dimensions';
		RETURN 'fail';
	END IF;

	-- Verify SRID
	IF ( new_srid_in > 0 ) THEN
		IF new_srid_in > 998999 THEN
			RAISE EXCEPTION 'AddGeometryColumn() - SRID must be <= %', 998999;
		END IF;
		new_srid := new_srid_in;
		SELECT SRID INTO sr FROM spatial_ref_sys WHERE SRID = new_srid;
		IF NOT FOUND THEN
			RAISE EXCEPTION 'AddGeometryColumn() - invalid SRID';
			RETURN 'fail';
		END IF;
	ELSE
		new_srid := public.ST_SRID('POINT EMPTY'::public.geometry);
		IF ( new_srid_in != new_srid ) THEN
			RAISE NOTICE 'SRID value % converted to the officially unknown SRID value %', new_srid_in, new_srid;
		END IF;
	END IF;

	-- Verify schema
	IF ( schema_name IS NOT NULL AND schema_name != '' ) THEN
		sql := 'SELECT nspname FROM pg_namespace ' ||
			'WHERE text(nspname) = ' || quote_literal(schema_name) ||
			'LIMIT 1';
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;

		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Schema % is not a valid schemaname', quote_literal(schema_name);
			RETURN 'fail';
		END IF;
	END IF;

	IF ( real_schema IS NULL ) THEN
		RAISE DEBUG 'Detecting schema';
		sql := 'SELECT n.nspname AS schemaname ' ||
			'FROM pg_catalog.pg_class c ' ||
			  'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace ' ||
			'WHERE c.relkind = ' || quote_literal('r') ||
			' AND n.nspname NOT IN (' || quote_literal('pg_catalog') || ', ' || quote_literal('pg_toast') || ')' ||
			' AND pg_catalog.pg_table_is_visible(c.oid)' ||
			' AND c.relname = ' || quote_literal(table_name);
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;

		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Table % does not occur in the search_path', quote_literal(table_name);
			RETURN 'fail';
		END IF;
	END IF;

	-- Add geometry column to table
	IF use_typmod THEN
	     sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD COLUMN ' || quote_ident(column_name) ||
            ' geometry(' || public.postgis_type_name(new_type, new_dim) || ', ' || new_srid::text || ')';
        RAISE DEBUG '%', sql;
	ELSE
        sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD COLUMN ' || quote_ident(column_name) ||
            ' geometry ';
        RAISE DEBUG '%', sql;
    END IF;
	EXECUTE sql;

	IF NOT use_typmod THEN
        -- Add table CHECKs
        sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD CONSTRAINT '
            || quote_ident('enforce_srid_' || column_name)
            || ' CHECK (st_srid(' || quote_ident(column_name) ||
            ') = ' || new_srid::text || ')' ;
        RAISE DEBUG '%', sql;
        EXECUTE sql;

        sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD CONSTRAINT '
            || quote_ident('enforce_dims_' || column_name)
            || ' CHECK (st_ndims(' || quote_ident(column_name) ||
            ') = ' || new_dim::text || ')' ;
        RAISE DEBUG '%', sql;
        EXECUTE sql;

        IF ( NOT (new_type = 'GEOMETRY')) THEN
            sql := 'ALTER TABLE ' ||
                quote_ident(real_schema) || '.' || quote_ident(table_name) || ' ADD CONSTRAINT ' ||
                quote_ident('enforce_geotype_' || column_name) ||
                ' CHECK (GeometryType(' ||
                quote_ident(column_name) || ')=' ||
                quote_literal(new_type) || ' OR (' ||
                quote_ident(column_name) || ') is null)';
            RAISE DEBUG '%', sql;
            EXECUTE sql;
        END IF;
    END IF;

	RETURN
		real_schema || '.' ||
		table_name || '.' || column_name ||
		' SRID:' || new_srid::text ||
		' TYPE:' || new_type ||
		' DIMS:' || new_dim::text || ' ';
END;]]></definition>
         <parameters>
            <parameter mode="IN" name="catalog_name" type="character varying"/>
            <parameter mode="IN" name="schema_name" type="character varying"/>
            <parameter mode="IN" name="table_name" type="character varying"/>
            <parameter mode="IN" name="column_name" type="character varying"/>
            <parameter mode="IN" name="new_srid_in" type="integer"/>
            <parameter mode="IN" name="new_type" type="character varying"/>
            <parameter mode="IN" name="new_dim" type="integer"/>
            <parameter mode="IN" name="use_typmod" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="addgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean DEFAULT true)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: schema_name, table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table of attributes. By default uses type modifier to define rather than constraints. Pass in false for use_typmod to get old check constraint based behavior]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
	ret  text;
BEGIN
	SELECT public.AddGeometryColumn('',$1,$2,$3,$4,$5,$6,$7) into ret;
	RETURN ret;
END;]]></definition>
         <parameters>
            <parameter mode="IN" name="schema_name" type="character varying"/>
            <parameter mode="IN" name="table_name" type="character varying"/>
            <parameter mode="IN" name="column_name" type="character varying"/>
            <parameter mode="IN" name="new_srid" type="integer"/>
            <parameter mode="IN" name="new_type" type="character varying"/>
            <parameter mode="IN" name="new_dim" type="integer"/>
            <parameter mode="IN" name="use_typmod" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="addgeometrycolumn(table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean DEFAULT true)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table of attributes. By default uses type modifier to define rather than constraints. Pass in false for use_typmod to get old check constraint based behavior]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
	ret  text;
BEGIN
	SELECT public.AddGeometryColumn('','',$1,$2,$3,$4,$5, $6) into ret;
	RETURN ret;
END;]]></definition>
         <parameters>
            <parameter mode="IN" name="table_name" type="character varying"/>
            <parameter mode="IN" name="column_name" type="character varying"/>
            <parameter mode="IN" name="new_srid" type="integer"/>
            <parameter mode="IN" name="new_type" type="character varying"/>
            <parameter mode="IN" name="new_dim" type="integer"/>
            <parameter mode="IN" name="use_typmod" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="addoverviewconstraints(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, ovfactor integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: ovschema, ovtable, ovcolumn, refschema, reftable, refcolumn, ovfactor - Tag a raster column as being an overview of another.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		x int;
		s name;
		t name;
		oschema name;
		rschema name;
		sql text;
		rtn boolean;
	BEGIN
		FOR x IN 1..2 LOOP
			s := '';

			IF x = 1 THEN
				s := $1;
				t := $2;
			ELSE
				s := $4;
				t := $5;
			END IF;

			-- validate user-provided schema
			IF length(s) > 0 THEN
				sql := 'SELECT nspname FROM pg_namespace '
					|| 'WHERE nspname = ' || quote_literal(s)
					|| 'LIMIT 1';
				EXECUTE sql INTO s;

				IF s IS NULL THEN
					RAISE EXCEPTION 'The value % is not a valid schema', quote_literal(s);
					RETURN FALSE;
				END IF;
			END IF;

			-- no schema, determine what it could be using the table
			IF length(s) < 1 THEN
				sql := 'SELECT n.nspname AS schemaname '
					|| 'FROM pg_catalog.pg_class c '
					|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
					|| 'WHERE c.relkind = ' || quote_literal('r')
					|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
					|| ', ' || quote_literal('pg_toast')
					|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
					|| ' AND c.relname = ' || quote_literal(t);
				EXECUTE sql INTO s;

				IF s IS NULL THEN
					RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal(t);
					RETURN FALSE;
				END IF;
			END IF;

			IF x = 1 THEN
				oschema := s;
			ELSE
				rschema := s;
			END IF;
		END LOOP;

		-- reference raster
		rtn :=  public._add_overview_constraint(oschema, $2, $3, rschema, $5, $6, $7);
		IF rtn IS FALSE THEN
			RAISE EXCEPTION 'Unable to add the overview constraint.  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;

		RETURN TRUE;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="ovschema" type="name"/>
            <parameter mode="IN" name="ovtable" type="name"/>
            <parameter mode="IN" name="ovcolumn" type="name"/>
            <parameter mode="IN" name="refschema" type="name"/>
            <parameter mode="IN" name="reftable" type="name"/>
            <parameter mode="IN" name="refcolumn" type="name"/>
            <parameter mode="IN" name="ovfactor" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="addoverviewconstraints(ovtable name, ovcolumn name, reftable name, refcolumn name, ovfactor integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: ovtable, ovcolumn, reftable, refcolumn, ovfactor - Tag a raster column as being an overview of another.]]></comment>
         <definition language="sql"><![CDATA[SELECT  public.AddOverviewConstraints('', $1, $2, '', $3, $4, $5)]]></definition>
         <parameters>
            <parameter mode="IN" name="ovtable" type="name"/>
            <parameter mode="IN" name="ovcolumn" type="name"/>
            <parameter mode="IN" name="reftable" type="name"/>
            <parameter mode="IN" name="refcolumn" type="name"/>
            <parameter mode="IN" name="ovfactor" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="addrasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[])" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastschema, rasttable, rastcolumn, VARIADIC constraints - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true if the constraint setting was accomplished and issues a notice otherwise.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		max int;
		cnt int;
		sql text;
		schema name;
		x int;
		kw text;
		rtn boolean;
	BEGIN
		cnt := 0;
		max := array_length(constraints, 1);
		IF max < 1 THEN
			RAISE NOTICE 'No constraints indicated to be added.  Doing nothing';
			RETURN TRUE;
		END IF;

		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;

		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;

		<<kwloop>>
		FOR x in 1..max LOOP
			kw := trim(both from lower(constraints[x]));

			BEGIN
				CASE
					WHEN kw = 'srid' THEN
						RAISE NOTICE 'Adding SRID constraint';
						rtn :=  public._add_raster_constraint_srid(schema, $2, $3);
					WHEN kw IN ('scale_x', 'scalex') THEN
						RAISE NOTICE 'Adding scale-X constraint';
						rtn :=  public._add_raster_constraint_scale(schema, $2, $3, 'x');
					WHEN kw IN ('scale_y', 'scaley') THEN
						RAISE NOTICE 'Adding scale-Y constraint';
						rtn :=  public._add_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw = 'scale' THEN
						RAISE NOTICE 'Adding scale-X constraint';
						rtn :=  public._add_raster_constraint_scale(schema, $2, $3, 'x');
						RAISE NOTICE 'Adding scale-Y constraint';
						rtn :=  public._add_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw IN ('blocksize_x', 'blocksizex', 'width') THEN
						RAISE NOTICE 'Adding blocksize-X constraint';
						rtn :=  public._add_raster_constraint_blocksize(schema, $2, $3, 'width');
					WHEN kw IN ('blocksize_y', 'blocksizey', 'height') THEN
						RAISE NOTICE 'Adding blocksize-Y constraint';
						rtn :=  public._add_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw = 'blocksize' THEN
						RAISE NOTICE 'Adding blocksize-X constraint';
						rtn :=  public._add_raster_constraint_blocksize(schema, $2, $3, 'width');
						RAISE NOTICE 'Adding blocksize-Y constraint';
						rtn :=  public._add_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw IN ('same_alignment', 'samealignment', 'alignment') THEN
						RAISE NOTICE 'Adding alignment constraint';
						rtn :=  public._add_raster_constraint_alignment(schema, $2, $3);
					WHEN kw IN ('regular_blocking', 'regularblocking') THEN
						RAISE NOTICE 'Adding coverage tile constraint required for regular blocking';
						rtn :=  public._add_raster_constraint_coverage_tile(schema, $2, $3);
						IF rtn IS NOT FALSE THEN
							RAISE NOTICE 'Adding spatially unique constraint required for regular blocking';
							rtn :=  public._add_raster_constraint_spatially_unique(schema, $2, $3);
						END IF;
					WHEN kw IN ('num_bands', 'numbands') THEN
						RAISE NOTICE 'Adding number of bands constraint';
						rtn :=  public._add_raster_constraint_num_bands(schema, $2, $3);
					WHEN kw IN ('pixel_types', 'pixeltypes') THEN
						RAISE NOTICE 'Adding pixel type constraint';
						rtn :=  public._add_raster_constraint_pixel_types(schema, $2, $3);
					WHEN kw IN ('nodata_values', 'nodatavalues', 'nodata') THEN
						RAISE NOTICE 'Adding nodata value constraint';
						rtn :=  public._add_raster_constraint_nodata_values(schema, $2, $3);
					WHEN kw IN ('out_db', 'outdb') THEN
						RAISE NOTICE 'Adding out-of-database constraint';
						rtn :=  public._add_raster_constraint_out_db(schema, $2, $3);
					WHEN kw = 'extent' THEN
						RAISE NOTICE 'Adding maximum extent constraint';
						rtn :=  public._add_raster_constraint_extent(schema, $2, $3);
					ELSE
						RAISE NOTICE 'Unknown constraint: %.  Skipping', quote_literal(constraints[x]);
						CONTINUE kwloop;
				END CASE;
			END;

			IF rtn IS FALSE THEN
				cnt := cnt + 1;
				RAISE WARNING 'Unable to add constraint: %.  Skipping', quote_literal(constraints[x]);
			END IF;

		END LOOP kwloop;

		IF cnt = max THEN
			RAISE EXCEPTION 'None of the constraints specified could be added.  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;

		RETURN TRUE;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
            <parameter mode="VARIADIC" name="constraints" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="addrasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean DEFAULT true, scale_x boolean DEFAULT true, scale_y boolean DEFAULT true, blocksize_x boolean DEFAULT true, blocksize_y boolean DEFAULT true, same_alignment boolean DEFAULT true, regular_blocking boolean DEFAULT false, num_bands boolean DEFAULT true, pixel_types boolean DEFAULT true, nodata_values boolean DEFAULT true, out_db boolean DEFAULT true, extent boolean DEFAULT true)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastschema, rasttable, rastcolumn, srid=true, scale_x=true, scale_y=true, blocksize_x=true, blocksize_y=true, same_alignment=true, regular_blocking=false, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true if the constraint setting was accomplished and issues a notice otherwise.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		constraints text[];
	BEGIN
		IF srid IS TRUE THEN
			constraints := constraints || 'srid'::text;
		END IF;

		IF scale_x IS TRUE THEN
			constraints := constraints || 'scale_x'::text;
		END IF;

		IF scale_y IS TRUE THEN
			constraints := constraints || 'scale_y'::text;
		END IF;

		IF blocksize_x IS TRUE THEN
			constraints := constraints || 'blocksize_x'::text;
		END IF;

		IF blocksize_y IS TRUE THEN
			constraints := constraints || 'blocksize_y'::text;
		END IF;

		IF same_alignment IS TRUE THEN
			constraints := constraints || 'same_alignment'::text;
		END IF;

		IF regular_blocking IS TRUE THEN
			constraints := constraints || 'regular_blocking'::text;
		END IF;

		IF num_bands IS TRUE THEN
			constraints := constraints || 'num_bands'::text;
		END IF;

		IF pixel_types IS TRUE THEN
			constraints := constraints || 'pixel_types'::text;
		END IF;

		IF nodata_values IS TRUE THEN
			constraints := constraints || 'nodata_values'::text;
		END IF;

		IF out_db IS TRUE THEN
			constraints := constraints || 'out_db'::text;
		END IF;

		IF extent IS TRUE THEN
			constraints := constraints || 'extent'::text;
		END IF;

		RETURN public.AddRasterConstraints($1, $2, $3, VARIADIC constraints);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
            <parameter mode="IN" name="srid" type="boolean"/>
            <parameter mode="IN" name="scale_x" type="boolean"/>
            <parameter mode="IN" name="scale_y" type="boolean"/>
            <parameter mode="IN" name="blocksize_x" type="boolean"/>
            <parameter mode="IN" name="blocksize_y" type="boolean"/>
            <parameter mode="IN" name="same_alignment" type="boolean"/>
            <parameter mode="IN" name="regular_blocking" type="boolean"/>
            <parameter mode="IN" name="num_bands" type="boolean"/>
            <parameter mode="IN" name="pixel_types" type="boolean"/>
            <parameter mode="IN" name="nodata_values" type="boolean"/>
            <parameter mode="IN" name="out_db" type="boolean"/>
            <parameter mode="IN" name="extent" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="addrasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[])" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rasttable, rastcolumn, VARIADIC constraints - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true if the constraint setting was accomplished and issues a notice otherwise.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.AddRasterConstraints('', $1, $2, VARIADIC $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
            <parameter mode="VARIADIC" name="constraints" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="addrasterconstraints(rasttable name, rastcolumn name, srid boolean DEFAULT true, scale_x boolean DEFAULT true, scale_y boolean DEFAULT true, blocksize_x boolean DEFAULT true, blocksize_y boolean DEFAULT true, same_alignment boolean DEFAULT true, regular_blocking boolean DEFAULT false, num_bands boolean DEFAULT true, pixel_types boolean DEFAULT true, nodata_values boolean DEFAULT true, out_db boolean DEFAULT true, extent boolean DEFAULT true)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rasttable, rastcolumn, srid=true, scale_x=true, scale_y=true, blocksize_x=true, blocksize_y=true, same_alignment=true, regular_blocking=false, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true if the constraint setting was accomplished and issues a notice otherwise.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.AddRasterConstraints('', $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)]]></definition>
         <parameters>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
            <parameter mode="IN" name="srid" type="boolean"/>
            <parameter mode="IN" name="scale_x" type="boolean"/>
            <parameter mode="IN" name="scale_y" type="boolean"/>
            <parameter mode="IN" name="blocksize_x" type="boolean"/>
            <parameter mode="IN" name="blocksize_y" type="boolean"/>
            <parameter mode="IN" name="same_alignment" type="boolean"/>
            <parameter mode="IN" name="regular_blocking" type="boolean"/>
            <parameter mode="IN" name="num_bands" type="boolean"/>
            <parameter mode="IN" name="pixel_types" type="boolean"/>
            <parameter mode="IN" name="nodata_values" type="boolean"/>
            <parameter mode="IN" name="out_db" type="boolean"/>
            <parameter mode="IN" name="extent" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="armor(bytea)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pg_armor]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="armor(bytea, text[], text[])" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pg_armor]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="text[]"/>
            <parameter mode="IN" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box(box3d)" returnType="box" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_to_BOX]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box(geometry)" returnType="box" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_to_BOX]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box2d(box3d)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_to_BOX2D]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box2d(geometry)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Returns a BOX2D representing the maximum extents of the geometry.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_to_BOX2D]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box2d_in(cstring)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX2D_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box2d_out(box2d)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX2D_out]]></definition>
         <parameters>
            <parameter mode="IN" type="box2d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box2df_in(cstring)" returnType="box2df" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[box2df_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box2df_out(box2df)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[box2df_out]]></definition>
         <parameters>
            <parameter mode="IN" type="box2df"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box3d(box2d)" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX2D_to_BOX3D]]></definition>
         <parameters>
            <parameter mode="IN" type="box2d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box3d(geometry)" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Returns a BOX3D representing the maximum extents of the geometry.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_to_BOX3D]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box3d(raster)" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[select box3d( public.ST_convexhull($1))]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box3d_in(cstring)" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box3d_out(box3d)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_out]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="box3dtobox(box3d)" returnType="box" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_to_BOX]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="bytea(geography)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_to_bytea]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="bytea(geometry)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_to_bytea]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="bytea(raster)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_to_bytea]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="checkauth(text, text)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_table_name, a_key_column_name - Creates trigger on a table to prevent/allow updates and deletes of rows based on authorization token.]]></comment>
         <definition language="sql"><![CDATA[SELECT CheckAuth('', $1, $2)]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="checkauth(text, text, text)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_schema_name, a_table_name, a_key_column_name - Creates trigger on a table to prevent/allow updates and deletes of rows based on authorization token.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
	schema text;
BEGIN
	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	if ( $1 != '' ) THEN
		schema = $1;
	ELSE
		SELECT current_schema() into schema;
	END IF;

	-- TODO: check for an already existing trigger ?

	EXECUTE 'CREATE TRIGGER check_auth BEFORE UPDATE OR DELETE ON '
		|| quote_ident(schema) || '.' || quote_ident($2)
		||' FOR EACH ROW EXECUTE PROCEDURE CheckAuthTrigger('
		|| quote_literal($3) || ')';

	RETURN 0;
END;]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="checkauthtrigger()" returnType="trigger" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[check_authorization]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="citext(boolean)" returnType="citext" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="internal"><![CDATA[booltext]]></definition>
         <parameters>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="citext(character)" returnType="citext" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="internal"><![CDATA[rtrim1]]></definition>
         <parameters>
            <parameter mode="IN" type="character"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="citext(inet)" returnType="citext" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="internal"><![CDATA[network_show]]></definition>
         <parameters>
            <parameter mode="IN" type="inet"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="citext_cmp(citext, citext)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[citext_cmp]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="citext_eq(citext, citext)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[citext_eq]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="citext_ge(citext, citext)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[citext_ge]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="citext_gt(citext, citext)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[citext_gt]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="citext_hash(citext)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[citext_hash]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="citext_hash_extended(citext, bigint)" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[citext_hash_extended]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="bigint"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="citext_larger(citext, citext)" returnType="citext" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[citext_larger]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="citext_le(citext, citext)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[citext_le]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="citext_lt(citext, citext)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[citext_lt]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="citext_ne(citext, citext)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[citext_ne]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="citext_pattern_cmp(citext, citext)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[citext_pattern_cmp]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="citext_pattern_ge(citext, citext)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[citext_pattern_ge]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="citext_pattern_gt(citext, citext)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[citext_pattern_gt]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="citext_pattern_le(citext, citext)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[citext_pattern_le]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="citext_pattern_lt(citext, citext)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[citext_pattern_lt]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="citext_smaller(citext, citext)" returnType="citext" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[citext_smaller]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="citextin(cstring)" returnType="citext" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="internal"><![CDATA[textin]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="citextout(citext)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="internal"><![CDATA[textout]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="citextrecv(internal)" returnType="citext" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="internal"><![CDATA[textrecv]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="citextsend(citext)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="internal"><![CDATA[textsend]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="contains_2d(box2df, box2df)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_contains_box2df_box2df_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="box2df"/>
            <parameter mode="IN" type="box2df"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="contains_2d(box2df, geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_contains_box2df_geom_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="box2df"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="contains_2d(geometry, box2df)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT $2 OPERATOR(public.@) $1;]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="box2df"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="crypt(text, text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pg_crypt]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="dearmor(text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pg_dearmor]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="decrypt(bytea, bytea, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pg_decrypt]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="decrypt_iv(bytea, bytea, bytea, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pg_decrypt_iv]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="difference(text, text)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[difference]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="digest(bytea, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pg_digest]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="digest(text, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pg_digest]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="disablelongtransactions()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Disable long transaction support. This function removes the long transaction support metadata tables, and drops all triggers attached to lock-checked tables.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
	rec RECORD;

BEGIN

	--
	-- Drop all triggers applied by CheckAuth()
	--
	FOR rec IN
		SELECT c.relname, t.tgname, t.tgargs FROM pg_trigger t, pg_class c, pg_proc p
		WHERE p.proname = 'checkauthtrigger' and t.tgfoid = p.oid and t.tgrelid = c.oid
	LOOP
		EXECUTE 'DROP TRIGGER ' || quote_ident(rec.tgname) ||
			' ON ' || quote_ident(rec.relname);
	END LOOP;

	--
	-- Drop the authorization_table table
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorization_table' LOOP
		DROP TABLE authorization_table;
	END LOOP;

	--
	-- Drop the authorized_tables view
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorized_tables' LOOP
		DROP VIEW authorized_tables;
	END LOOP;

	RETURN 'Long transactions support disabled';
END;]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="dmetaphone(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[dmetaphone]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="dmetaphone_alt(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[dmetaphone_alt]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="dropgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: catalog_name, schema_name, table_name, column_name - Removes a geometry column from a spatial table.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
	myrec RECORD;
	okay boolean;
	real_schema name;

BEGIN

	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = false;

		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := true;
		END LOOP;

		IF ( okay <>  true ) THEN
			RAISE NOTICE 'Invalid schema name - using current_schema()';
			SELECT current_schema() into real_schema;
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT current_schema() into real_schema;
	END IF;

	-- Find out if the column is in the geometry_columns table
	okay = false;
	FOR myrec IN SELECT * from public.geometry_columns where f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := true;
	END LOOP;
	IF (okay <> true) THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN false;
	END IF;

	-- Remove table column
	EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) || '.' ||
		quote_ident(table_name) || ' DROP COLUMN ' ||
		quote_ident(column_name);

	RETURN real_schema || '.' || table_name || '.' || column_name ||' effectively removed.';

END;]]></definition>
         <parameters>
            <parameter mode="IN" name="catalog_name" type="character varying"/>
            <parameter mode="IN" name="schema_name" type="character varying"/>
            <parameter mode="IN" name="table_name" type="character varying"/>
            <parameter mode="IN" name="column_name" type="character varying"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="dropgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: schema_name, table_name, column_name - Removes a geometry column from a spatial table.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
	ret text;
BEGIN
	SELECT public.DropGeometryColumn('',$1,$2,$3) into ret;
	RETURN ret;
END;]]></definition>
         <parameters>
            <parameter mode="IN" name="schema_name" type="character varying"/>
            <parameter mode="IN" name="table_name" type="character varying"/>
            <parameter mode="IN" name="column_name" type="character varying"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="dropgeometrycolumn(table_name character varying, column_name character varying)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: table_name, column_name - Removes a geometry column from a spatial table.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
	ret text;
BEGIN
	SELECT public.DropGeometryColumn('','',$1,$2) into ret;
	RETURN ret;
END;]]></definition>
         <parameters>
            <parameter mode="IN" name="table_name" type="character varying"/>
            <parameter mode="IN" name="column_name" type="character varying"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="dropgeometrytable(catalog_name character varying, schema_name character varying, table_name character varying)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: catalog_name, schema_name, table_name - Drops a table and all its references in geometry_columns.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
	real_schema name;

BEGIN

	IF ( schema_name = '' ) THEN
		SELECT current_schema() into real_schema;
	ELSE
		real_schema = schema_name;
	END IF;

	-- TODO: Should we warn if table doesn't exist probably instead just saying dropped
	-- Remove table
	EXECUTE 'DROP TABLE IF EXISTS '
		|| quote_ident(real_schema) || '.' ||
		quote_ident(table_name) || ' RESTRICT';

	RETURN
		real_schema || '.' ||
		table_name ||' dropped.';

END;]]></definition>
         <parameters>
            <parameter mode="IN" name="catalog_name" type="character varying"/>
            <parameter mode="IN" name="schema_name" type="character varying"/>
            <parameter mode="IN" name="table_name" type="character varying"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="dropgeometrytable(schema_name character varying, table_name character varying)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: schema_name, table_name - Drops a table and all its references in geometry_columns.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.DropGeometryTable('',$1,$2)]]></definition>
         <parameters>
            <parameter mode="IN" name="schema_name" type="character varying"/>
            <parameter mode="IN" name="table_name" type="character varying"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="dropgeometrytable(table_name character varying)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: table_name - Drops a table and all its references in geometry_columns.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.DropGeometryTable('','',$1)]]></definition>
         <parameters>
            <parameter mode="IN" name="table_name" type="character varying"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="dropoverviewconstraints(ovschema name, ovtable name, ovcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: ovschema, ovtable, ovcolumn - Untag a raster column from being an overview of another.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		schema name;
		sql text;
		rtn boolean;
	BEGIN
		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;

		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;

		rtn :=  public._drop_overview_constraint(schema, $2, $3);
		IF rtn IS FALSE THEN
			RAISE EXCEPTION 'Unable to drop the overview constraint .  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;

		RETURN TRUE;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="ovschema" type="name"/>
            <parameter mode="IN" name="ovtable" type="name"/>
            <parameter mode="IN" name="ovcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="dropoverviewconstraints(ovtable name, ovcolumn name)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: ovtable, ovcolumn - Untag a raster column from being an overview of another.]]></comment>
         <definition language="sql"><![CDATA[SELECT  public.DropOverviewConstraints('', $1, $2)]]></definition>
         <parameters>
            <parameter mode="IN" name="ovtable" type="name"/>
            <parameter mode="IN" name="ovcolumn" type="name"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="droprasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[])" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastschema, rasttable, rastcolumn, constraints - Drops PostGIS raster constraints that refer to a raster table column. Useful if you need to reload data or update your raster column data.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		max int;
		x int;
		schema name;
		sql text;
		kw text;
		rtn boolean;
		cnt int;
	BEGIN
		cnt := 0;
		max := array_length(constraints, 1);
		IF max < 1 THEN
			RAISE NOTICE 'No constraints indicated to be dropped.  Doing nothing';
			RETURN TRUE;
		END IF;

		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;

		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;

			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;

		<<kwloop>>
		FOR x in 1..max LOOP
			kw := trim(both from lower(constraints[x]));

			BEGIN
				CASE
					WHEN kw = 'srid' THEN
						RAISE NOTICE 'Dropping SRID constraint';
						rtn :=  public._drop_raster_constraint_srid(schema, $2, $3);
					WHEN kw IN ('scale_x', 'scalex') THEN
						RAISE NOTICE 'Dropping scale-X constraint';
						rtn :=  public._drop_raster_constraint_scale(schema, $2, $3, 'x');
					WHEN kw IN ('scale_y', 'scaley') THEN
						RAISE NOTICE 'Dropping scale-Y constraint';
						rtn :=  public._drop_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw = 'scale' THEN
						RAISE NOTICE 'Dropping scale-X constraint';
						rtn :=  public._drop_raster_constraint_scale(schema, $2, $3, 'x');
						RAISE NOTICE 'Dropping scale-Y constraint';
						rtn :=  public._drop_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw IN ('blocksize_x', 'blocksizex', 'width') THEN
						RAISE NOTICE 'Dropping blocksize-X constraint';
						rtn :=  public._drop_raster_constraint_blocksize(schema, $2, $3, 'width');
					WHEN kw IN ('blocksize_y', 'blocksizey', 'height') THEN
						RAISE NOTICE 'Dropping blocksize-Y constraint';
						rtn :=  public._drop_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw = 'blocksize' THEN
						RAISE NOTICE 'Dropping blocksize-X constraint';
						rtn :=  public._drop_raster_constraint_blocksize(schema, $2, $3, 'width');
						RAISE NOTICE 'Dropping blocksize-Y constraint';
						rtn :=  public._drop_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw IN ('same_alignment', 'samealignment', 'alignment') THEN
						RAISE NOTICE 'Dropping alignment constraint';
						rtn :=  public._drop_raster_constraint_alignment(schema, $2, $3);
					WHEN kw IN ('regular_blocking', 'regularblocking') THEN
						rtn :=  public._drop_raster_constraint_regular_blocking(schema, $2, $3);

						RAISE NOTICE 'Dropping coverage tile constraint required for regular blocking';
						rtn :=  public._drop_raster_constraint_coverage_tile(schema, $2, $3);

						IF rtn IS NOT FALSE THEN
							RAISE NOTICE 'Dropping spatially unique constraint required for regular blocking';
							rtn :=  public._drop_raster_constraint_spatially_unique(schema, $2, $3);
						END IF;
					WHEN kw IN ('num_bands', 'numbands') THEN
						RAISE NOTICE 'Dropping number of bands constraint';
						rtn :=  public._drop_raster_constraint_num_bands(schema, $2, $3);
					WHEN kw IN ('pixel_types', 'pixeltypes') THEN
						RAISE NOTICE 'Dropping pixel type constraint';
						rtn :=  public._drop_raster_constraint_pixel_types(schema, $2, $3);
					WHEN kw IN ('nodata_values', 'nodatavalues', 'nodata') THEN
						RAISE NOTICE 'Dropping nodata value constraint';
						rtn :=  public._drop_raster_constraint_nodata_values(schema, $2, $3);
					WHEN kw IN ('out_db', 'outdb') THEN
						RAISE NOTICE 'Dropping out-of-database constraint';
						rtn :=  public._drop_raster_constraint_out_db(schema, $2, $3);
					WHEN kw = 'extent' THEN
						RAISE NOTICE 'Dropping maximum extent constraint';
						rtn :=  public._drop_raster_constraint_extent(schema, $2, $3);
					ELSE
						RAISE NOTICE 'Unknown constraint: %.  Skipping', quote_literal(constraints[x]);
						CONTINUE kwloop;
				END CASE;
			END;

			IF rtn IS FALSE THEN
				cnt := cnt + 1;
				RAISE WARNING 'Unable to drop constraint: %.  Skipping', quote_literal(constraints[x]);
			END IF;

		END LOOP kwloop;

		IF cnt = max THEN
			RAISE EXCEPTION 'None of the constraints specified could be dropped.  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;

		RETURN TRUE;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
            <parameter mode="VARIADIC" name="constraints" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="droprasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean DEFAULT true, scale_x boolean DEFAULT true, scale_y boolean DEFAULT true, blocksize_x boolean DEFAULT true, blocksize_y boolean DEFAULT true, same_alignment boolean DEFAULT true, regular_blocking boolean DEFAULT true, num_bands boolean DEFAULT true, pixel_types boolean DEFAULT true, nodata_values boolean DEFAULT true, out_db boolean DEFAULT true, extent boolean DEFAULT true)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastschema, rasttable, rastcolumn, srid=true, scale_x=true, scale_y=true, blocksize_x=true, blocksize_y=true, same_alignment=true, regular_blocking=false, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Drops PostGIS raster constraints that refer to a raster table column. Useful if you need to reload data or update your raster column data.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		constraints text[];
	BEGIN
		IF srid IS TRUE THEN
			constraints := constraints || 'srid'::text;
		END IF;

		IF scale_x IS TRUE THEN
			constraints := constraints || 'scale_x'::text;
		END IF;

		IF scale_y IS TRUE THEN
			constraints := constraints || 'scale_y'::text;
		END IF;

		IF blocksize_x IS TRUE THEN
			constraints := constraints || 'blocksize_x'::text;
		END IF;

		IF blocksize_y IS TRUE THEN
			constraints := constraints || 'blocksize_y'::text;
		END IF;

		IF same_alignment IS TRUE THEN
			constraints := constraints || 'same_alignment'::text;
		END IF;

		IF regular_blocking IS TRUE THEN
			constraints := constraints || 'regular_blocking'::text;
		END IF;

		IF num_bands IS TRUE THEN
			constraints := constraints || 'num_bands'::text;
		END IF;

		IF pixel_types IS TRUE THEN
			constraints := constraints || 'pixel_types'::text;
		END IF;

		IF nodata_values IS TRUE THEN
			constraints := constraints || 'nodata_values'::text;
		END IF;

		IF out_db IS TRUE THEN
			constraints := constraints || 'out_db'::text;
		END IF;

		IF extent IS TRUE THEN
			constraints := constraints || 'extent'::text;
		END IF;

		RETURN DropRasterConstraints($1, $2, $3, VARIADIC constraints);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastschema" type="name"/>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
            <parameter mode="IN" name="srid" type="boolean"/>
            <parameter mode="IN" name="scale_x" type="boolean"/>
            <parameter mode="IN" name="scale_y" type="boolean"/>
            <parameter mode="IN" name="blocksize_x" type="boolean"/>
            <parameter mode="IN" name="blocksize_y" type="boolean"/>
            <parameter mode="IN" name="same_alignment" type="boolean"/>
            <parameter mode="IN" name="regular_blocking" type="boolean"/>
            <parameter mode="IN" name="num_bands" type="boolean"/>
            <parameter mode="IN" name="pixel_types" type="boolean"/>
            <parameter mode="IN" name="nodata_values" type="boolean"/>
            <parameter mode="IN" name="out_db" type="boolean"/>
            <parameter mode="IN" name="extent" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="droprasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[])" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT  public.DropRasterConstraints('', $1, $2, VARIADIC $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
            <parameter mode="VARIADIC" name="constraints" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="droprasterconstraints(rasttable name, rastcolumn name, srid boolean DEFAULT true, scale_x boolean DEFAULT true, scale_y boolean DEFAULT true, blocksize_x boolean DEFAULT true, blocksize_y boolean DEFAULT true, same_alignment boolean DEFAULT true, regular_blocking boolean DEFAULT true, num_bands boolean DEFAULT true, pixel_types boolean DEFAULT true, nodata_values boolean DEFAULT true, out_db boolean DEFAULT true, extent boolean DEFAULT true)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rasttable, rastcolumn, srid, scale_x, scale_y, blocksize_x, blocksize_y, same_alignment, regular_blocking, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Drops PostGIS raster constraints that refer to a raster table column. Useful if you need to reload data or update your raster column data.]]></comment>
         <definition language="sql"><![CDATA[SELECT DropRasterConstraints('', $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)]]></definition>
         <parameters>
            <parameter mode="IN" name="rasttable" type="name"/>
            <parameter mode="IN" name="rastcolumn" type="name"/>
            <parameter mode="IN" name="srid" type="boolean"/>
            <parameter mode="IN" name="scale_x" type="boolean"/>
            <parameter mode="IN" name="scale_y" type="boolean"/>
            <parameter mode="IN" name="blocksize_x" type="boolean"/>
            <parameter mode="IN" name="blocksize_y" type="boolean"/>
            <parameter mode="IN" name="same_alignment" type="boolean"/>
            <parameter mode="IN" name="regular_blocking" type="boolean"/>
            <parameter mode="IN" name="num_bands" type="boolean"/>
            <parameter mode="IN" name="pixel_types" type="boolean"/>
            <parameter mode="IN" name="nodata_values" type="boolean"/>
            <parameter mode="IN" name="out_db" type="boolean"/>
            <parameter mode="IN" name="extent" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="enablelongtransactions()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Enable long transaction support. This function creates the required metadata tables, needs to be called once before using the other functions in this section. Calling it twice is harmless.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
	"query" text;
	exists bool;
	rec RECORD;

BEGIN

	exists = 'f';
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorization_table'
	LOOP
		exists = 't';
	END LOOP;

	IF NOT exists
	THEN
		"query" = 'CREATE TABLE authorization_table (
			toid oid, -- table oid
			rid text, -- row id
			expires timestamp,
			authid text
		)';
		EXECUTE "query";
	END IF;

	exists = 'f';
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorized_tables'
	LOOP
		exists = 't';
	END LOOP;

	IF NOT exists THEN
		"query" = 'CREATE VIEW authorized_tables AS ' ||
			'SELECT ' ||
			'n.nspname as schema, ' ||
			'c.relname as table, trim(' ||
			quote_literal(chr(92) || '000') ||
			' from t.tgargs) as id_column ' ||
			'FROM pg_trigger t, pg_class c, pg_proc p ' ||
			', pg_namespace n ' ||
			'WHERE p.proname = ' || quote_literal('checkauthtrigger') ||
			' AND c.relnamespace = n.oid' ||
			' AND t.tgfoid = p.oid and t.tgrelid = c.oid';
		EXECUTE "query";
	END IF;

	RETURN 'Long transactions support enabled';
END;]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="encrypt(bytea, bytea, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pg_encrypt]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="encrypt_iv(bytea, bytea, bytea, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pg_encrypt_iv]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="equals(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_Equals]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="exec(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[BEGIN
      EXECUTE $1;
      RETURN $1;
    END;]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="find_srid(character varying, character varying, character varying)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_schema_name, a_table_name, a_geomfield_name - The syntax is find_srid(a_db_schema, a_table, a_column) and the function returns the integer SRID of the specified column by searching through the GEOMETRY_COLUMNS table.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
	schem varchar =  $1;
	tabl varchar = $2;
	sr int4;
BEGIN
-- if the table contains a . and the schema is empty
-- split the table into a schema and a table
-- otherwise drop through to default behavior
	IF ( schem = '' and strpos(tabl,'.') > 0 ) THEN
	 schem = substr(tabl,1,strpos(tabl,'.')-1);
	 tabl = substr(tabl,length(schem)+2);
	END IF;

	select SRID into sr from public.geometry_columns where (f_table_schema = schem or schem = '') and f_table_name = tabl and f_geometry_column = $3;
	IF NOT FOUND THEN
	   RAISE EXCEPTION 'find_srid() - could not find the corresponding SRID - is the geometry registered in the GEOMETRY_COLUMNS table?  Is there an uppercase/lowercase mismatch?';
	END IF;
	return sr;
END;]]></definition>
         <parameters>
            <parameter mode="IN" type="character varying"/>
            <parameter mode="IN" type="character varying"/>
            <parameter mode="IN" type="character varying"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="gen_random_bytes(integer)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pg_random_bytes]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="gen_random_uuid()" returnType="uuid" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pg_random_uuid]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="gen_salt(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pg_gen_salt]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="gen_salt(text, integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pg_gen_salt_rounds]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geog_brin_inclusion_add_value(internal, internal, internal, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geog_brin_inclusion_add_value]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography(bytea)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_from_binary]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography(geography, integer, boolean)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_enforce_typmod]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography(geometry)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_from_geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_analyze(internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_analyze_nd]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_cmp(geography, geography)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_cmp]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_distance_knn(geography, geography)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_distance_knn]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_eq(geography, geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_eq]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_ge(geography, geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_ge]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_compress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_consistent(internal, geography, integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_decompress(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_decompress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_distance(internal, geography, integer)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_geog_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_penalty(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_picksplit(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_same(box2d, box2d, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_same]]></definition>
         <parameters>
            <parameter mode="IN" type="box2d"/>
            <parameter mode="IN" type="box2d"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geography_gist_union(bytea, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_union]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_gt(geography, geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_gt]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_in(cstring, oid, integer)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_le(geography, geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_le]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_lt(geography, geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_lt]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_out(geography)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_out]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_overlaps(geography, geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_overlaps]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_recv(internal, oid, integer)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_recv]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_send(geography)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_send]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_typmod_in(cstring[])" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geography_typmod_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geography_typmod_out(integer)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_typmod_out]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geom2d_brin_inclusion_add_value(internal, internal, internal, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geom2d_brin_inclusion_add_value]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geom3d_brin_inclusion_add_value(internal, internal, internal, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geom3d_brin_inclusion_add_value]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geom4d_brin_inclusion_add_value(internal, internal, internal, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geom4d_brin_inclusion_add_value]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry(box2d)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX2D_to_LWGEOM]]></definition>
         <parameters>
            <parameter mode="IN" type="box2d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry(box3d)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_to_LWGEOM]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_from_bytea]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry(geography)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geometry_from_geography]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry(geometry, integer, boolean)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geometry_enforce_typmod]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry(path)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[path_to_geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="path"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry(point)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[point_to_geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="point"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry(polygon)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[polygon_to_geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="polygon"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[parse_WKT_lwgeom]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_above(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_above_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_analyze(internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_analyze_nd]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_below(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_below_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_cmp(geom1 geometry, geom2 geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[lwgeom_cmp]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_contained_3d(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_contained_3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_contained_by_raster(geometry, raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[select $1 OPERATOR(public.@) $2::public.geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_contains(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_contains_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_contains_3d(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_contains_3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_distance_box(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_distance_box_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_distance_centroid(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[distance]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_distance_centroid_nd(geometry, geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_distance_nd]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_distance_cpa(geometry, geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_DistanceCPA]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_eq(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[lwgeom_eq]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_ge(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[lwgeom_ge]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_compress_2d(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_compress_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_compress_nd(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_compress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_consistent_2d(internal, geometry, integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_consistent_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_consistent_nd(internal, geometry, integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_consistent]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_decompress_2d(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_decompress_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_decompress_nd(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_decompress]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_distance_2d(internal, geometry, integer)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_distance_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_distance_nd(internal, geometry, integer)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_distance]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_penalty_2d(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_penalty_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_penalty_nd(internal, internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_penalty]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_picksplit_2d(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_picksplit_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_picksplit_nd(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_picksplit]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_same_2d(geom1 geometry, geom2 geometry, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_same_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_same_nd(geometry, geometry, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_same]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_union_2d(bytea, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_union_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="geometry_gist_union_nd(bytea, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_union]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_gt(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[lwgeom_gt]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_hash(geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[lwgeom_hash]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_in(cstring)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_le(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[lwgeom_le]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_left(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_left_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_lt(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[lwgeom_lt]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_out(geometry)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_out]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_overabove(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_overabove_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_overbelow(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_overbelow_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_overlaps(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_overlaps_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_overlaps_3d(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_overlaps_3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_overlaps_nd(geometry, geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_overlaps]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_overleft(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_overleft_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_overright(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_overright_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_raster_contain(geometry, raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[select $1 OPERATOR(public.~) $2::public.geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_raster_overlap(geometry, raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[select $1 OPERATOR(public.&&) $2::public.geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_recv(internal)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_recv]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_right(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_right_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_same(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_same_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_same_3d(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_same_3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_send(geometry)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_send]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_choose_2d(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_choose_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_choose_3d(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_choose_3d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_compress_2d(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_compress_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_compress_3d(internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_compress_3d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_config_2d(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_config_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_config_3d(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_config_3d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_inner_consistent_2d(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_inner_consistent_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_inner_consistent_3d(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_inner_consistent_3d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_leaf_consistent_2d(internal, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_leaf_consistent_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_leaf_consistent_3d(internal, internal)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_leaf_consistent_3d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_picksplit_2d(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_picksplit_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_spgist_picksplit_3d(internal, internal)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_spgist_picksplit_3d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_typmod_in(cstring[])" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geometry_typmod_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_typmod_out(integer)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_typmod_out]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometry_within(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_within_2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometrytype(geography)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_getTYPE]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geometrytype(geometry)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Returns the type of the geometry as a string. Eg: LINESTRING, POLYGON, MULTIPOINT, etc.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_getTYPE]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geomfromewkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOMFromEWKB]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="geomfromewkt(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[parse_WKT_lwgeom]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="get_proj4_from_srid(integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[BEGIN
	RETURN proj4text::text FROM public.spatial_ref_sys WHERE srid= $1;
END;]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="gettransactionid()" returnType="xid" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[getTransactionID]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gidx_in(cstring)" returnType="gidx" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gidx_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="gidx_out(gidx)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gidx_out]]></definition>
         <parameters>
            <parameter mode="IN" type="gidx"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="gserialized_gist_joinsel_2d(internal, oid, internal, smallint)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_joinsel_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="smallint"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="gserialized_gist_joinsel_nd(internal, oid, internal, smallint)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_joinsel_nd]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="smallint"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="gserialized_gist_sel_2d(internal, oid, internal, integer)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_sel_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="gserialized_gist_sel_nd(internal, oid, internal, integer)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gist_sel_nd]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="oid"/>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hmac(bytea, bytea, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pg_hmac]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="hmac(text, text, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pg_hmac]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="is_contained_2d(box2df, box2df)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_contains_box2df_box2df_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="box2df"/>
            <parameter mode="IN" type="box2df"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="is_contained_2d(box2df, geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_within_box2df_geom_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="box2df"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="is_contained_2d(geometry, box2df)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT $2 OPERATOR(public.~) $1;]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="box2df"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="isnumeric(text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE x NUMERIC;
BEGIN
    x = $1::NUMERIC;
    RETURN TRUE;
EXCEPTION WHEN others THEN
    RETURN FALSE;
END;]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="levenshtein(text, text)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[levenshtein]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="levenshtein(text, text, integer, integer, integer)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[levenshtein_with_costs]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="levenshtein_less_equal(text, text, integer)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[levenshtein_less_equal]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="levenshtein_less_equal(text, text, integer, integer, integer, integer)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[levenshtein_less_equal_with_costs]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="lockrow(text, text, text)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_table_name, a_row_key, an_auth_token - Set lock/authorization for specific row in table]]></comment>
         <definition language="sql"><![CDATA[SELECT LockRow(current_schema(), $1, $2, $3, now()::timestamp+'1:00');]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="lockrow(text, text, text, text)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT LockRow($1, $2, $3, $4, now()::timestamp+'1:00');]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="lockrow(text, text, text, text, timestamp without time zone)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_schema_name, a_table_name, a_row_key, an_auth_token, expire_dt - Set lock/authorization for specific row in table]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
	myschema alias for $1;
	mytable alias for $2;
	myrid   alias for $3;
	authid alias for $4;
	expires alias for $5;
	ret int;
	mytoid oid;
	myrec RECORD;

BEGIN

	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	EXECUTE 'DELETE FROM authorization_table WHERE expires < now()';

	SELECT c.oid INTO mytoid FROM pg_class c, pg_namespace n
		WHERE c.relname = mytable
		AND c.relnamespace = n.oid
		AND n.nspname = myschema;

	-- RAISE NOTICE 'toid: %', mytoid;

	FOR myrec IN SELECT * FROM authorization_table WHERE
		toid = mytoid AND rid = myrid
	LOOP
		IF myrec.authid != authid THEN
			RETURN 0;
		ELSE
			RETURN 1;
		END IF;
	END LOOP;

	EXECUTE 'INSERT INTO authorization_table VALUES ('||
		quote_literal(mytoid::text)||','||quote_literal(myrid)||
		','||quote_literal(expires::text)||
		','||quote_literal(authid) ||')';

	GET DIAGNOSTICS ret = ROW_COUNT;

	RETURN ret;
END;]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="timestamp without time zone"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="lockrow(text, text, text, timestamp without time zone)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_table_name, a_row_key, an_auth_token, expire_dt - Set lock/authorization for specific row in table]]></comment>
         <definition language="sql"><![CDATA[SELECT LockRow(current_schema(), $1, $2, $3, $4);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="timestamp without time zone"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="longtransactionsenabled()" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	rec RECORD;
BEGIN
	FOR rec IN SELECT oid FROM pg_class WHERE relname = 'authorized_tables'
	LOOP
		return 't';
	END LOOP;
	return 'f';
END;]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="max(citext)" returnType="citext" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="metaphone(text, integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[metaphone]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="min(citext)" returnType="citext" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="overlaps_2d(box2df, box2df)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_contains_box2df_box2df_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="box2df"/>
            <parameter mode="IN" type="box2df"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="overlaps_2d(box2df, geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_overlaps_box2df_geom_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="box2df"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="overlaps_2d(geometry, box2df)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT $2 OPERATOR(public.&&) $1;]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="box2df"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="overlaps_geog(geography, gidx)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT $2 OPERATOR(public.&&) $1;]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="gidx"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="overlaps_geog(gidx, geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gidx_geog_overlaps]]></definition>
         <parameters>
            <parameter mode="IN" type="gidx"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="overlaps_geog(gidx, gidx)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gidx_gidx_overlaps]]></definition>
         <parameters>
            <parameter mode="IN" type="gidx"/>
            <parameter mode="IN" type="gidx"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="overlaps_nd(geometry, gidx)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT $2 OPERATOR(public.&&&) $1;]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="gidx"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="overlaps_nd(gidx, geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gidx_geom_overlaps]]></definition>
         <parameters>
            <parameter mode="IN" type="gidx"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="overlaps_nd(gidx, gidx)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[gserialized_gidx_gidx_overlaps]]></definition>
         <parameters>
            <parameter mode="IN" type="gidx"/>
            <parameter mode="IN" type="gidx"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="path(geometry)" returnType="path" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geometry_to_path]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT queryid bigint, OUT query text, OUT calls bigint, OUT total_time double precision, OUT min_time double precision, OUT max_time double precision, OUT mean_time double precision, OUT stddev_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pg_stat_statements_1_3]]></definition>
         <parameters>
            <parameter mode="IN" name="showtext" type="boolean"/>
            <parameter mode="OUT" name="userid" type="oid"/>
            <parameter mode="OUT" name="dbid" type="oid"/>
            <parameter mode="OUT" name="queryid" type="bigint"/>
            <parameter mode="OUT" name="query" type="text"/>
            <parameter mode="OUT" name="calls" type="bigint"/>
            <parameter mode="OUT" name="total_time" type="double precision"/>
            <parameter mode="OUT" name="min_time" type="double precision"/>
            <parameter mode="OUT" name="max_time" type="double precision"/>
            <parameter mode="OUT" name="mean_time" type="double precision"/>
            <parameter mode="OUT" name="stddev_time" type="double precision"/>
            <parameter mode="OUT" name="rows" type="bigint"/>
            <parameter mode="OUT" name="shared_blks_hit" type="bigint"/>
            <parameter mode="OUT" name="shared_blks_read" type="bigint"/>
            <parameter mode="OUT" name="shared_blks_dirtied" type="bigint"/>
            <parameter mode="OUT" name="shared_blks_written" type="bigint"/>
            <parameter mode="OUT" name="local_blks_hit" type="bigint"/>
            <parameter mode="OUT" name="local_blks_read" type="bigint"/>
            <parameter mode="OUT" name="local_blks_dirtied" type="bigint"/>
            <parameter mode="OUT" name="local_blks_written" type="bigint"/>
            <parameter mode="OUT" name="temp_blks_read" type="bigint"/>
            <parameter mode="OUT" name="temp_blks_written" type="bigint"/>
            <parameter mode="OUT" name="blk_read_time" type="double precision"/>
            <parameter mode="OUT" name="blk_write_time" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pg_stat_statements_reset(userid oid DEFAULT 0, dbid oid DEFAULT 0, queryid bigint DEFAULT 0)" returnType="void" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pg_stat_statements_reset_1_7]]></definition>
         <parameters>
            <parameter mode="IN" name="userid" type="oid"/>
            <parameter mode="IN" name="dbid" type="oid"/>
            <parameter mode="IN" name="queryid" type="bigint"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asgeobuf_finalfn(internal)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asgeobuf_finalfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asgeobuf_transfn(internal, anyelement)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asgeobuf_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="anyelement"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asgeobuf_transfn(internal, anyelement, text)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asgeobuf_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asmvt_combinefn(internal, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asmvt_combinefn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asmvt_deserialfn(bytea, internal)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asmvt_deserialfn]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asmvt_finalfn(internal)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asmvt_finalfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asmvt_serialfn(internal)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asmvt_serialfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asmvt_transfn(internal, anyelement)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asmvt_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="anyelement"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asmvt_transfn(internal, anyelement, text)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asmvt_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asmvt_transfn(internal, anyelement, text, integer)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asmvt_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgis_asmvt_transfn(internal, anyelement, text, integer, text)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_asmvt_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_accum_finalfn(internal)" returnType="geometry[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_accum_finalfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_accum_transfn(internal, geometry)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_accum_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_accum_transfn(internal, geometry, double precision)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_accum_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_accum_transfn(internal, geometry, double precision, integer)" returnType="internal" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_accum_transfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_clusterintersecting_finalfn(internal)" returnType="geometry[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_clusterintersecting_finalfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_clusterwithin_finalfn(internal)" returnType="geometry[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_clusterwithin_finalfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_collect_finalfn(internal)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_collect_finalfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_makeline_finalfn(internal)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_makeline_finalfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_polygonize_finalfn(internal)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_polygonize_finalfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgis_geometry_union_finalfn(internal)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgis_geometry_union_finalfn]]></definition>
         <parameters>
            <parameter mode="IN" type="internal"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgp_armor_headers(text, OUT key text, OUT value text)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgp_armor_headers]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="OUT" name="key" type="text"/>
            <parameter mode="OUT" name="value" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgp_key_id(bytea)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgp_key_id_w]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgp_pub_decrypt(bytea, bytea)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgp_pub_decrypt_text]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgp_pub_decrypt(bytea, bytea, text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgp_pub_decrypt_text]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgp_pub_decrypt(bytea, bytea, text, text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgp_pub_decrypt_text]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgp_pub_decrypt_bytea(bytea, bytea)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgp_pub_decrypt_bytea]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgp_pub_decrypt_bytea(bytea, bytea, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgp_pub_decrypt_bytea]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgp_pub_decrypt_bytea(bytea, bytea, text, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgp_pub_decrypt_bytea]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgp_pub_encrypt(text, bytea)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgp_pub_encrypt_text]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgp_pub_encrypt(text, bytea, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgp_pub_encrypt_text]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgp_pub_encrypt_bytea(bytea, bytea)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgp_pub_encrypt_bytea]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgp_pub_encrypt_bytea(bytea, bytea, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgp_pub_encrypt_bytea]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgp_sym_decrypt(bytea, text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgp_sym_decrypt_text]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgp_sym_decrypt(bytea, text, text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgp_sym_decrypt_text]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgp_sym_decrypt_bytea(bytea, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgp_sym_decrypt_bytea]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="pgp_sym_decrypt_bytea(bytea, text, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgp_sym_decrypt_bytea]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgp_sym_encrypt(text, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgp_sym_encrypt_text]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgp_sym_encrypt(text, text, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgp_sym_encrypt_text]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgp_sym_encrypt_bytea(bytea, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgp_sym_encrypt_bytea]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="pgp_sym_encrypt_bytea(bytea, text, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[pgp_sym_encrypt_bytea]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="point(geometry)" returnType="point" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geometry_to_point]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="polygon(geometry)" returnType="polygon" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[geometry_to_polygon]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="populate_geometry_columns(tbl_oid oid, use_typmod boolean DEFAULT true)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: relation_oid, use_typmod=true - Ensures geometry columns are defined with type modifiers or have appropriate spatial constraints This ensures they will be registered correctly in geometry_columns view. By default will convert all geometry columns with no type modifier to ones with type modifiers. To get old behavior set use_typmod=false]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
	gcs         RECORD;
	gc          RECORD;
	gc_old      RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;
	inserted    integer;
	constraint_successful boolean := false;

BEGIN
	inserted := 0;

	-- Iterate through all geometry columns in this table
	FOR gcs IN
	SELECT n.nspname, c.relname, a.attname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind IN('r', 'f')
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%'
		AND c.oid = tbl_oid
	LOOP

        RAISE DEBUG 'Processing column %.%.%', gcs.nspname, gcs.relname, gcs.attname;

        gc_is_valid := true;
        -- Find the srid, coord_dimension, and type of current geometry
        -- in geometry_columns -- which is now a view

        SELECT type, srid, coord_dimension INTO gc_old
            FROM geometry_columns
            WHERE f_table_schema = gcs.nspname AND f_table_name = gcs.relname AND f_geometry_column = gcs.attname;

        IF upper(gc_old.type) = 'GEOMETRY' THEN
        -- This is an unconstrained geometry we need to do something
        -- We need to figure out what to set the type by inspecting the data
            EXECUTE 'SELECT public.ST_srid(' || quote_ident(gcs.attname) || ') As srid, public.GeometryType(' || quote_ident(gcs.attname) || ') As type, public.ST_NDims(' || quote_ident(gcs.attname) || ') As dims ' ||
                     ' FROM ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) ||
                     ' WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1;'
                INTO gc;
            IF gc IS NULL THEN -- there is no data so we can not determine geometry type
            	RAISE WARNING 'No data in table %.%, so no information to determine geometry type and srid', gcs.nspname, gcs.relname;
            	RETURN 0;
            END IF;
            gsrid := gc.srid; gtype := gc.type; gndims := gc.dims;

            IF use_typmod THEN
                BEGIN
                    EXECUTE 'ALTER TABLE ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || ' ALTER COLUMN ' || quote_ident(gcs.attname) ||
                        ' TYPE geometry(' || postgis_type_name(gtype, gndims, true) || ', ' || gsrid::text  || ') ';
                    inserted := inserted + 1;
                EXCEPTION
                        WHEN invalid_parameter_value OR feature_not_supported THEN
                        RAISE WARNING 'Could not convert ''%'' in ''%.%'' to use typmod with srid %, type %: %', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), gsrid, postgis_type_name(gtype, gndims, true), SQLERRM;
                            gc_is_valid := false;
                END;

            ELSE
                -- Try to apply srid check to column
            	constraint_successful = false;
                IF (gsrid > 0 AND postgis_constraint_srid(gcs.nspname, gcs.relname,gcs.attname) IS NULL ) THEN
                    BEGIN
                        EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) ||
                                 ' ADD CONSTRAINT ' || quote_ident('enforce_srid_' || gcs.attname) ||
                                 ' CHECK (ST_srid(' || quote_ident(gcs.attname) || ') = ' || gsrid || ')';
                        constraint_successful := true;
                    EXCEPTION
                        WHEN check_violation THEN
                            RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (st_srid(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gsrid;
                            gc_is_valid := false;
                    END;
                END IF;

                -- Try to apply ndims check to column
                IF (gndims IS NOT NULL AND postgis_constraint_dims(gcs.nspname, gcs.relname,gcs.attname) IS NULL ) THEN
                    BEGIN
                        EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
                                 ADD CONSTRAINT ' || quote_ident('enforce_dims_' || gcs.attname) || '
                                 CHECK (st_ndims(' || quote_ident(gcs.attname) || ') = '||gndims||')';
                        constraint_successful := true;
                    EXCEPTION
                        WHEN check_violation THEN
                            RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (st_ndims(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gndims;
                            gc_is_valid := false;
                    END;
                END IF;

                -- Try to apply geometrytype check to column
                IF (gtype IS NOT NULL AND postgis_constraint_type(gcs.nspname, gcs.relname,gcs.attname) IS NULL ) THEN
                    BEGIN
                        EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
                        ADD CONSTRAINT ' || quote_ident('enforce_geotype_' || gcs.attname) || '
                        CHECK (geometrytype(' || quote_ident(gcs.attname) || ') = ' || quote_literal(gtype) || ')';
                        constraint_successful := true;
                    EXCEPTION
                        WHEN check_violation THEN
                            -- No geometry check can be applied. This column contains a number of geometry types.
                            RAISE WARNING 'Could not add geometry type check (%) to table column: %.%.%', gtype, quote_ident(gcs.nspname),quote_ident(gcs.relname),quote_ident(gcs.attname);
                    END;
                END IF;
                 --only count if we were successful in applying at least one constraint
                IF constraint_successful THEN
                	inserted := inserted + 1;
                END IF;
            END IF;
	    END IF;

	END LOOP;

	RETURN inserted;
END]]></definition>
         <parameters>
            <parameter mode="IN" name="tbl_oid" type="oid"/>
            <parameter mode="IN" name="use_typmod" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="populate_geometry_columns(use_typmod boolean DEFAULT true)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: use_typmod=true - Ensures geometry columns are defined with type modifiers or have appropriate spatial constraints This ensures they will be registered correctly in geometry_columns view. By default will convert all geometry columns with no type modifier to ones with type modifiers. To get old behavior set use_typmod=false]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
	inserted    integer;
	oldcount    integer;
	probed      integer;
	stale       integer;
	gcs         RECORD;
	gc          RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;

BEGIN
	SELECT count(*) INTO oldcount FROM public.geometry_columns;
	inserted := 0;

	-- Count the number of geometry columns in all tables and views
	SELECT count(DISTINCT c.oid) INTO probed
	FROM pg_class c,
		 pg_attribute a,
		 pg_type t,
		 pg_namespace n
	WHERE c.relkind IN('r','v','f')
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%' AND c.relname != 'raster_columns' ;

	-- Iterate through all non-dropped geometry columns
	RAISE DEBUG 'Processing Tables.....';

	FOR gcs IN
	SELECT DISTINCT ON (c.oid) c.oid, n.nspname, c.relname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind IN( 'r', 'f')
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%' AND c.relname != 'raster_columns'
	LOOP

		inserted := inserted + public.populate_geometry_columns(gcs.oid, use_typmod);
	END LOOP;

	IF oldcount > inserted THEN
	    stale = oldcount-inserted;
	ELSE
	    stale = 0;
	END IF;

	RETURN 'probed:' ||probed|| ' inserted:'||inserted;
END]]></definition>
         <parameters>
            <parameter mode="IN" name="use_typmod" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_addbbox(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Add bounding box to the geometry.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_addBBOX]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="postgis_cache_bbox()" returnType="trigger" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[cache_bbox]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="postgis_constraint_dims(geomschema text, geomtable text, geomcolumn text)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT  replace(split_part(s.consrc, ' = ', 2), ')', '')::integer

		 FROM pg_class c, pg_namespace n, pg_attribute a
		 , (SELECT connamespace, conrelid, conkey, pg_get_constraintdef(oid) As consrc
		    FROM pg_constraint) AS s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%ndims(% = %';]]></definition>
         <parameters>
            <parameter mode="IN" name="geomschema" type="text"/>
            <parameter mode="IN" name="geomtable" type="text"/>
            <parameter mode="IN" name="geomcolumn" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="postgis_constraint_srid(geomschema text, geomtable text, geomcolumn text)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')::integer
		 FROM pg_class c, pg_namespace n, pg_attribute a
		 , (SELECT connamespace, conrelid, conkey, pg_get_constraintdef(oid) As consrc
		    FROM pg_constraint) AS s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%srid(% = %';]]></definition>
         <parameters>
            <parameter mode="IN" name="geomschema" type="text"/>
            <parameter mode="IN" name="geomtable" type="text"/>
            <parameter mode="IN" name="geomcolumn" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="postgis_constraint_type(geomschema text, geomtable text, geomcolumn text)" returnType="character varying" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT  replace(split_part(s.consrc, '''', 2), ')', '')::varchar

		 FROM pg_class c, pg_namespace n, pg_attribute a
		 , (SELECT connamespace, conrelid, conkey, pg_get_constraintdef(oid) As consrc
		    FROM pg_constraint) AS s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%geometrytype(% = %';]]></definition>
         <parameters>
            <parameter mode="IN" name="geomschema" type="text"/>
            <parameter mode="IN" name="geomtable" type="text"/>
            <parameter mode="IN" name="geomcolumn" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_dropbbox(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Drop the bounding box cache from the geometry.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_dropBBOX]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="postgis_extensions_upgrade()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Upgrades installed postgis packaged extensions (e.g. postgis_sfcgal, postgis_topology, postgis_sfcgal) to latest installed version. Reports full postgis version and build configuration infos after.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE rec record; sql text;
BEGIN
	-- if at a version different from default version or we are at a dev version,
	-- then do an upgrade to default version

	FOR rec in SELECT  name, default_version, installed_version
		FROM pg_available_extensions
		WHERE installed_version > '' AND name IN('postgis', 'postgis_sfcgal', 'postgis_tiger_geocoder', 'postgis_topology')
		AND ( default_version <> installed_version  OR
			( default_version = installed_version AND default_version ILIKE '%dev%' AND  installed_version ILIKE '%dev%'  )  ) LOOP

		-- we need to upgrade to next so our installed is different from current
		-- and then we can upgrade to default_version
		IF rec.installed_version = rec.default_version THEN
			sql = 'ALTER EXTENSION ' || rec.name || ' UPDATE TO ' || quote_ident(rec.default_version || 'next')   || ';';
			EXECUTE sql;
			RAISE NOTICE '%', sql;
		END IF;

		sql = 'ALTER EXTENSION ' || rec.name || ' UPDATE TO ' || quote_ident(rec.default_version)   || ';';
		EXECUTE sql;
		RAISE NOTICE '%', sql;
	END LOOP;

	RETURN public.postgis_full_version();

END]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_full_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Reports full postgis version and build configuration infos.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
	libver text;
	svnver text;
	projver text;
	geosver text;
	sfcgalver text;
	cgalver text;
	gdalver text;
	libxmlver text;
	liblwgeomver text;
	dbproc text;
	relproc text;
	fullver text;
	rast_lib_ver text;
	rast_scr_ver text;
	topo_scr_ver text;
	json_lib_ver text;
	protobuf_lib_ver text;
	sfcgal_lib_ver text;
	sfcgal_scr_ver text;
	pgsql_scr_ver text;
	pgsql_ver text;
	core_is_extension bool;
BEGIN
	SELECT public.postgis_lib_version() INTO libver;
	SELECT public.postgis_proj_version() INTO projver;
	SELECT public.postgis_geos_version() INTO geosver;
	SELECT public.postgis_libjson_version() INTO json_lib_ver;
	SELECT public.postgis_libprotobuf_version() INTO protobuf_lib_ver;
	SELECT public._postgis_scripts_pgsql_version() INTO pgsql_scr_ver;
	SELECT public._postgis_pgsql_version() INTO pgsql_ver;
	BEGIN
		SELECT public.postgis_gdal_version() INTO gdalver;
	EXCEPTION
		WHEN undefined_function THEN
			gdalver := NULL;
			RAISE NOTICE 'Function postgis_gdal_version() not found.  Is raster support enabled and rtpostgis.sql installed?';
	END;
	BEGIN
		SELECT public.postgis_sfcgal_version() INTO sfcgalver;
    BEGIN
      SELECT public.postgis_sfcgal_scripts_installed() INTO sfcgal_scr_ver;
    EXCEPTION
      WHEN undefined_function THEN
        sfcgal_scr_ver := 'missing';
    END;
	EXCEPTION
		WHEN undefined_function THEN
			sfcgalver := NULL;
	END;
	SELECT public.postgis_liblwgeom_version() INTO liblwgeomver;
	SELECT public.postgis_libxml_version() INTO libxmlver;
	SELECT public.postgis_scripts_installed() INTO dbproc;
	SELECT public.postgis_scripts_released() INTO relproc;
	select public.postgis_svn_version() INTO svnver;
	BEGIN
		SELECT topology.postgis_topology_scripts_installed() INTO topo_scr_ver;
	EXCEPTION
		WHEN undefined_function OR invalid_schema_name THEN
			topo_scr_ver := NULL;
			RAISE DEBUG 'Function postgis_topology_scripts_installed() not found. Is topology support enabled and topology.sql installed?';
		WHEN insufficient_privilege THEN
			RAISE NOTICE 'Topology support cannot be inspected. Is current user granted USAGE on schema "topology" ?';
		WHEN OTHERS THEN
			RAISE NOTICE 'Function postgis_topology_scripts_installed() could not be called: % (%)', SQLERRM, SQLSTATE;
	END;

	BEGIN
		SELECT postgis_raster_scripts_installed() INTO rast_scr_ver;
	EXCEPTION
		WHEN undefined_function THEN
			rast_scr_ver := NULL;
			RAISE NOTICE 'Function postgis_raster_scripts_installed() not found. Is raster support enabled and rtpostgis.sql installed?';
	END;

	BEGIN
		SELECT public.postgis_raster_lib_version() INTO rast_lib_ver;
	EXCEPTION
		WHEN undefined_function THEN
			rast_lib_ver := NULL;
			RAISE NOTICE 'Function postgis_raster_lib_version() not found. Is raster support enabled and rtpostgis.sql installed?';
	END;

	fullver = 'POSTGIS="' || libver;

	IF  svnver IS NOT NULL THEN
		fullver = fullver || ' r' || svnver;
	END IF;

	fullver = fullver || '"';

	IF EXISTS (
		SELECT * FROM pg_catalog.pg_extension
		WHERE extname = 'postgis')
	THEN
			fullver = fullver || ' [EXTENSION]';
			core_is_extension := true;
	ELSE
			core_is_extension := false;
	END IF;

	IF liblwgeomver != relproc THEN
		fullver = fullver || ' (liblwgeom version mismatch: "' || liblwgeomver || '")';
	END IF;

	fullver = fullver || ' PGSQL="' || pgsql_scr_ver || '"';
	IF pgsql_scr_ver != pgsql_ver THEN
		fullver = fullver || ' (procs need upgrade for use with "' || pgsql_ver || '")';
	END IF;

	IF  geosver IS NOT NULL THEN
		fullver = fullver || ' GEOS="' || geosver || '"';
	END IF;

	IF  sfcgalver IS NOT NULL THEN
		fullver = fullver || ' SFCGAL="' || sfcgalver || '"';
	END IF;

	IF  projver IS NOT NULL THEN
		fullver = fullver || ' PROJ="' || projver || '"';
	END IF;

	IF  gdalver IS NOT NULL THEN
		fullver = fullver || ' GDAL="' || gdalver || '"';
	END IF;

	IF  libxmlver IS NOT NULL THEN
		fullver = fullver || ' LIBXML="' || libxmlver || '"';
	END IF;

	IF json_lib_ver IS NOT NULL THEN
		fullver = fullver || ' LIBJSON="' || json_lib_ver || '"';
	END IF;

	IF protobuf_lib_ver IS NOT NULL THEN
		fullver = fullver || ' LIBPROTOBUF="' || protobuf_lib_ver || '"';
	END IF;

	IF dbproc != relproc THEN
		fullver = fullver || ' (core procs from "' || dbproc || '" need upgrade)';
	END IF;

	IF topo_scr_ver IS NOT NULL THEN
		fullver = fullver || ' TOPOLOGY';
		IF topo_scr_ver != relproc THEN
			fullver = fullver || ' (topology procs from "' || topo_scr_ver || '" need upgrade)';
		END IF;
		IF core_is_extension AND NOT EXISTS (
			SELECT * FROM pg_catalog.pg_extension
			WHERE extname = 'postgis_topology')
		THEN
				fullver = fullver || ' [UNPACKAGED!]';
		END IF;
	END IF;

	IF rast_lib_ver IS NOT NULL THEN
		fullver = fullver || ' RASTER';
		IF rast_lib_ver != relproc THEN
			fullver = fullver || ' (raster lib from "' || rast_lib_ver || '" need upgrade)';
		END IF;
	END IF;

	IF rast_scr_ver IS NOT NULL AND rast_scr_ver != relproc THEN
		fullver = fullver || ' (raster procs from "' || rast_scr_ver || '" need upgrade)';
	END IF;

	IF sfcgal_scr_ver IS NOT NULL AND sfcgal_scr_ver != relproc THEN
    fullver = fullver || ' (sfcgal procs from "' || sfcgal_scr_ver || '" need upgrade)';
	END IF;

	RETURN fullver;
END]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_gdal_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Reports the version of the GDAL library in use by PostGIS.]]></comment>
         <definition language="c"><![CDATA[RASTER_gdal_version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_geos_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Returns the version number of the GEOS library.]]></comment>
         <definition language="c"><![CDATA[postgis_geos_version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_getbbox(geometry)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_to_BOX2DF]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_hasbbox(geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Returns TRUE if the bbox of this geometry is cached, FALSE otherwise.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_hasBBOX]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_lib_build_date()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Returns build date of the PostGIS library.]]></comment>
         <definition language="c"><![CDATA[postgis_lib_build_date]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_lib_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Returns the version number of the PostGIS library.]]></comment>
         <definition language="c"><![CDATA[postgis_lib_version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_libjson_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_libjson_version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_liblwgeom_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Returns the version number of the liblwgeom library. This should match the version of PostGIS.]]></comment>
         <definition language="c"><![CDATA[postgis_liblwgeom_version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_libprotobuf_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_libprotobuf_version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_libxml_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Returns the version number of the libxml2 library.]]></comment>
         <definition language="c"><![CDATA[postgis_libxml_version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_noop(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_noop]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="postgis_noop(raster)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_noop]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_proj_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Returns the version number of the PROJ4 library.]]></comment>
         <definition language="c"><![CDATA[postgis_proj_version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_raster_lib_build_date()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Reports full raster library build date.]]></comment>
         <definition language="c"><![CDATA[RASTER_lib_build_date]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_raster_lib_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Reports full raster version and build configuration infos.]]></comment>
         <definition language="c"><![CDATA[RASTER_lib_version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_raster_scripts_installed()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT '2.5.5'::text || ' r' || 0::text AS version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_scripts_build_date()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Returns build date of the PostGIS scripts.]]></comment>
         <definition language="sql"><![CDATA[SELECT '2021-09-20 05:31:42'::text AS version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_scripts_installed()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Returns version of the postgis scripts installed in this database.]]></comment>
         <definition language="sql"><![CDATA[SELECT '2.5.5'::text || ' r' || 0::text AS version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_scripts_released()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Returns the version number of the postgis.sql script released with the installed postgis lib.]]></comment>
         <definition language="c"><![CDATA[postgis_scripts_released]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_svn_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_svn_version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_transform_geometry(geometry, text, text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[transform_geom]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_type_name(geomname character varying, coord_dimension integer, use_new_name boolean DEFAULT true)" returnType="character varying" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN $3 THEN new_name ELSE old_name END As geomname
	FROM
	( VALUES
			('GEOMETRY', 'Geometry', 2),
			('GEOMETRY', 'GeometryZ', 3),
			('GEOMETRYM', 'GeometryM', 3),
			('GEOMETRY', 'GeometryZM', 4),

			('GEOMETRYCOLLECTION', 'GeometryCollection', 2),
			('GEOMETRYCOLLECTION', 'GeometryCollectionZ', 3),
			('GEOMETRYCOLLECTIONM', 'GeometryCollectionM', 3),
			('GEOMETRYCOLLECTION', 'GeometryCollectionZM', 4),

			('POINT', 'Point', 2),
			('POINT', 'PointZ', 3),
			('POINTM','PointM', 3),
			('POINT', 'PointZM', 4),

			('MULTIPOINT','MultiPoint', 2),
			('MULTIPOINT','MultiPointZ', 3),
			('MULTIPOINTM','MultiPointM', 3),
			('MULTIPOINT','MultiPointZM', 4),

			('POLYGON', 'Polygon', 2),
			('POLYGON', 'PolygonZ', 3),
			('POLYGONM', 'PolygonM', 3),
			('POLYGON', 'PolygonZM', 4),

			('MULTIPOLYGON', 'MultiPolygon', 2),
			('MULTIPOLYGON', 'MultiPolygonZ', 3),
			('MULTIPOLYGONM', 'MultiPolygonM', 3),
			('MULTIPOLYGON', 'MultiPolygonZM', 4),

			('MULTILINESTRING', 'MultiLineString', 2),
			('MULTILINESTRING', 'MultiLineStringZ', 3),
			('MULTILINESTRINGM', 'MultiLineStringM', 3),
			('MULTILINESTRING', 'MultiLineStringZM', 4),

			('LINESTRING', 'LineString', 2),
			('LINESTRING', 'LineStringZ', 3),
			('LINESTRINGM', 'LineStringM', 3),
			('LINESTRING', 'LineStringZM', 4),

			('CIRCULARSTRING', 'CircularString', 2),
			('CIRCULARSTRING', 'CircularStringZ', 3),
			('CIRCULARSTRINGM', 'CircularStringM' ,3),
			('CIRCULARSTRING', 'CircularStringZM', 4),

			('COMPOUNDCURVE', 'CompoundCurve', 2),
			('COMPOUNDCURVE', 'CompoundCurveZ', 3),
			('COMPOUNDCURVEM', 'CompoundCurveM', 3),
			('COMPOUNDCURVE', 'CompoundCurveZM', 4),

			('CURVEPOLYGON', 'CurvePolygon', 2),
			('CURVEPOLYGON', 'CurvePolygonZ', 3),
			('CURVEPOLYGONM', 'CurvePolygonM', 3),
			('CURVEPOLYGON', 'CurvePolygonZM', 4),

			('MULTICURVE', 'MultiCurve', 2),
			('MULTICURVE', 'MultiCurveZ', 3),
			('MULTICURVEM', 'MultiCurveM', 3),
			('MULTICURVE', 'MultiCurveZM', 4),

			('MULTISURFACE', 'MultiSurface', 2),
			('MULTISURFACE', 'MultiSurfaceZ', 3),
			('MULTISURFACEM', 'MultiSurfaceM', 3),
			('MULTISURFACE', 'MultiSurfaceZM', 4),

			('POLYHEDRALSURFACE', 'PolyhedralSurface', 2),
			('POLYHEDRALSURFACE', 'PolyhedralSurfaceZ', 3),
			('POLYHEDRALSURFACEM', 'PolyhedralSurfaceM', 3),
			('POLYHEDRALSURFACE', 'PolyhedralSurfaceZM', 4),

			('TRIANGLE', 'Triangle', 2),
			('TRIANGLE', 'TriangleZ', 3),
			('TRIANGLEM', 'TriangleM', 3),
			('TRIANGLE', 'TriangleZM', 4),

			('TIN', 'Tin', 2),
			('TIN', 'TinZ', 3),
			('TINM', 'TinM', 3),
			('TIN', 'TinZM', 4) )
			 As g(old_name, new_name, coord_dimension)
	WHERE (upper(old_name) = upper($1) OR upper(new_name) = upper($1))
		AND coord_dimension = $2;]]></definition>
         <parameters>
            <parameter mode="IN" name="geomname" type="character varying"/>
            <parameter mode="IN" name="coord_dimension" type="integer"/>
            <parameter mode="IN" name="use_new_name" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_typmod_dims(integer)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_typmod_dims]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_typmod_srid(integer)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_typmod_srid]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_typmod_type(integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[postgis_typmod_type]]></definition>
         <parameters>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="postgis_version()" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[Returns PostGIS version number and compile-time options.]]></comment>
         <definition language="c"><![CDATA[postgis_version]]></definition>
         <parameters>
            <parameter mode="IN"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_above(raster, raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[select $1::public.geometry |>> $2::public.geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_below(raster, raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[select $1::public.geometry <<| $2::public.geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_contain(raster, raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[select $1::public.geometry ~ $2::public.geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_contained(raster, raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[select $1::public.geometry OPERATOR(public.@) $2::public.geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_contained_by_geometry(raster, geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[select $1::public.geometry OPERATOR(public.@) $2]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_eq(raster, raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.raster_hash($1) = public.raster_hash($2)]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_geometry_contain(raster, geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[select $1::public.geometry ~ $2]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_geometry_overlap(raster, geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[select $1::public.geometry OPERATOR(public.&&) $2]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_hash(raster)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="internal"><![CDATA[hashvarlena]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_in(cstring)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_left(raster, raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[select $1::public.geometry << $2::public.geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_out(raster)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_out]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_overabove(raster, raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[select $1::public.geometry |&> $2::public.geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_overbelow(raster, raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[select $1::public.geometry &<| $2::public.geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_overlap(raster, raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[select $1::public.geometry OPERATOR(public.&&) $2::public.geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_overleft(raster, raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[select $1::public.geometry &< $2::public.geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_overright(raster, raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[select $1::public.geometry &> $2::public.geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_right(raster, raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[select $1::public.geometry >> $2::public.geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="raster_same(raster, raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[select $1::public.geometry ~= $2::public.geometry]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="regexp_match(citext, citext)" returnType="text[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT pg_catalog.regexp_match( $1::pg_catalog.text, $2::pg_catalog.text, 'i' );]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="regexp_match(citext, citext, text)" returnType="text[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT pg_catalog.regexp_match( $1::pg_catalog.text, $2::pg_catalog.text, CASE WHEN pg_catalog.strpos($3, 'c') = 0 THEN  $3 || 'i' ELSE $3 END );]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="regexp_matches(citext, citext)" returnType="SETOF text[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT pg_catalog.regexp_matches( $1::pg_catalog.text, $2::pg_catalog.text, 'i' );]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="regexp_matches(citext, citext, text)" returnType="SETOF text[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT pg_catalog.regexp_matches( $1::pg_catalog.text, $2::pg_catalog.text, CASE WHEN pg_catalog.strpos($3, 'c') = 0 THEN  $3 || 'i' ELSE $3 END );]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="regexp_replace(citext, citext, text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT pg_catalog.regexp_replace( $1::pg_catalog.text, $2::pg_catalog.text, $3, 'i');]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="regexp_replace(citext, citext, text, text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT pg_catalog.regexp_replace( $1::pg_catalog.text, $2::pg_catalog.text, $3, CASE WHEN pg_catalog.strpos($4, 'c') = 0 THEN  $4 || 'i' ELSE $4 END);]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="regexp_split_to_array(citext, citext)" returnType="text[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT pg_catalog.regexp_split_to_array( $1::pg_catalog.text, $2::pg_catalog.text, 'i' );]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="regexp_split_to_array(citext, citext, text)" returnType="text[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT pg_catalog.regexp_split_to_array( $1::pg_catalog.text, $2::pg_catalog.text, CASE WHEN pg_catalog.strpos($3, 'c') = 0 THEN  $3 || 'i' ELSE $3 END );]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="regexp_split_to_table(citext, citext)" returnType="SETOF text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT pg_catalog.regexp_split_to_table( $1::pg_catalog.text, $2::pg_catalog.text, 'i' );]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="regexp_split_to_table(citext, citext, text)" returnType="SETOF text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT pg_catalog.regexp_split_to_table( $1::pg_catalog.text, $2::pg_catalog.text, CASE WHEN pg_catalog.strpos($3, 'c') = 0 THEN  $3 || 'i' ELSE $3 END );]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="replace(citext, citext, citext)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT pg_catalog.regexp_replace( $1::pg_catalog.text, pg_catalog.regexp_replace($2::pg_catalog.text, '([^a-zA-Z_0-9])', E'\\\\\\1', 'g'), $3::pg_catalog.text, 'gi' );]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="replace_in_table(table_name text, original text, replacement text, run boolean)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[declare
        r record;
        q text;
    begin
        q = '';
        for r in
            select attname
            from pg_attribute
            where attrelid = table_name::regclass
                and attnum > 0
                and not attisdropped
                and (atttypid = 25
                or atttypid = 1042
                or atttypid = 1043)
                and not attnotnull
            order by attnum
        loop
            q = format($fmt$%supdate %s set %s = %s where %s = %s;$fmt$,
                q, table_name, r.attname, replacement, r.attname, original);
        end loop;
        q = format('%s;', rtrim(q, ';'));
        if run then
            execute q;
        end if;
        return q;
    end]]></definition>
         <parameters>
            <parameter mode="IN" name="table_name" type="text"/>
            <parameter mode="IN" name="original" type="text"/>
            <parameter mode="IN" name="replacement" type="text"/>
            <parameter mode="IN" name="run" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="soundex(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[soundex]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="spheroid_in(cstring)" returnType="spheroid" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ellipsoid_in]]></definition>
         <parameters>
            <parameter mode="IN" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="spheroid_out(spheroid)" returnType="cstring" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ellipsoid_out]]></definition>
         <parameters>
            <parameter mode="IN" type="spheroid"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="split_part(citext, citext, integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT (pg_catalog.regexp_split_to_array( $1::pg_catalog.text, pg_catalog.regexp_replace($2::pg_catalog.text, '([^a-zA-Z_0-9])', E'\\\\\\1', 'g'), 'i'))[$3];]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dclosestpoint(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - Returns the 3-dimensional point on g1 that is closest to g2. This is the first point of the 3D shortest line.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_closestpoint3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2, distance - Returns true if all of the 3D geometries are within the specified distance of one another.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) public.ST_Expand($2,$3) AND $2 OPERATOR(public.&&) public.ST_Expand($1,$3) AND public._ST_3DDFullyWithin($1, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3ddistance(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - For geometry type Returns the 3-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units.]]></comment>
         <definition language="c"><![CDATA[distance3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3ddwithin(geom1 geometry, geom2 geometry, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2, distance_of_srid - For 3d (z) geometry type Returns true if two geometries 3d distance is within number of units.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) public.ST_Expand($2,$3) AND $2 OPERATOR(public.&&) public.ST_Expand($1,$3) AND public._ST_3DDWithin($1, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dextent(geometry)" returnType="box3d" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: geomfield - an aggregate function that returns the box3D bounding box that bounds rows of geometries.]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dintersects(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, geomB - Returns TRUE if the Geometries "spatially intersect" in 3d - only for points, linestrings, polygons, polyhedral surface (area). With SFCGAL backend enabled also supports TINS]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) $2 AND public._ST_3DIntersects($1, $2)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dlength(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_3dlinestring - Returns the 3-dimensional or 2-dimensional length of the geometry if it is a linestring or multi-linestring.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_length_linestring]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dlength_spheroid(geometry, spheroid)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_3DLength_Spheroid', 'ST_LengthSpheroid', '2.2.0');
    SELECT public.ST_LengthSpheroid($1,$2);]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="spheroid"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dlongestline(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - Returns the 3-dimensional longest line between two geometries]]></comment>
         <definition language="c"><![CDATA[LWGEOM_longestline3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dmakebox(geom1 geometry, geom2 geometry)" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: point3DLowLeftBottom, point3DUpRightTop - Creates a BOX3D defined by the given 3d point geometries.]]></comment>
         <definition language="c"><![CDATA[BOX3D_construct]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dmaxdistance(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - For geometry type Returns the 3-dimensional cartesian maximum distance (based on spatial ref) between two geometries in projected units.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_maxdistance3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dperimeter(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Returns the 3-dimensional perimeter of the geometry, if it is a polygon or multi-polygon.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_perimeter_poly]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_3dshortestline(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - Returns the 3-dimensional shortest line between two geometries]]></comment>
         <definition language="c"><![CDATA[LWGEOM_shortestline3d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_accum(geometry)" returnType="geometry[]" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: geomfield - Aggregate. Constructs an array of geometries.]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_addband(rast raster, addbandargset addbandarg[])" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, addbandargset - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
         <definition language="c"><![CDATA[RASTER_addBand]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="addbandargset" type="addbandarg[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_addband(rast raster, index integer, outdbfile text, outdbindex integer[], nodataval double precision DEFAULT NULL::double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, index, outdbfile, outdbindex, nodataval=NULL - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
         <definition language="c"><![CDATA[RASTER_addBandOutDB]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="index" type="integer"/>
            <parameter mode="IN" name="outdbfile" type="text"/>
            <parameter mode="IN" name="outdbindex" type="integer[]"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_addband(rast raster, index integer, pixeltype text, initialvalue double precision DEFAULT '0'::numeric, nodataval double precision DEFAULT NULL::double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, index, pixeltype, initialvalue=0, nodataval=NULL - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
         <definition language="sql"><![CDATA[SELECT  public.ST_addband($1, ARRAY[ROW($2, $3, $4, $5)]::addbandarg[])]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="index" type="integer"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="initialvalue" type="double precision"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_addband(rast raster, outdbfile text, outdbindex integer[], index integer DEFAULT NULL::integer, nodataval double precision DEFAULT NULL::double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, outdbfile, outdbindex, index=at_end, nodataval=NULL - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_AddBand($1, $4, $2, $3, $5)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="outdbfile" type="text"/>
            <parameter mode="IN" name="outdbindex" type="integer[]"/>
            <parameter mode="IN" name="index" type="integer"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_addband(rast raster, pixeltype text, initialvalue double precision DEFAULT '0'::numeric, nodataval double precision DEFAULT NULL::double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, pixeltype, initialvalue=0, nodataval=NULL - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
         <definition language="sql"><![CDATA[SELECT  public.ST_addband($1, ARRAY[ROW(NULL, $2, $3, $4)]::addbandarg[])]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="initialvalue" type="double precision"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_addband(torast raster, fromrast raster, fromband integer DEFAULT 1, torastindex integer DEFAULT NULL::integer)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: torast, fromrast, fromband=1, torastindex=at_end - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
         <definition language="c"><![CDATA[RASTER_copyBand]]></definition>
         <parameters>
            <parameter mode="IN" name="torast" type="raster"/>
            <parameter mode="IN" name="fromrast" type="raster"/>
            <parameter mode="IN" name="fromband" type="integer"/>
            <parameter mode="IN" name="torastindex" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_addband(torast raster, fromrasts raster[], fromband integer DEFAULT 1, torastindex integer DEFAULT NULL::integer)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: torast, fromrasts, fromband=1, torastindex=at_end - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
         <definition language="c"><![CDATA[RASTER_addBandRasterArray]]></definition>
         <parameters>
            <parameter mode="IN" name="torast" type="raster"/>
            <parameter mode="IN" name="fromrasts" type="raster[]"/>
            <parameter mode="IN" name="fromband" type="integer"/>
            <parameter mode="IN" name="torastindex" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_addmeasure(geometry, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom_mline, measure_start, measure_end - Return a derived geometry with measure elements linearly interpolated between the start and end points.]]></comment>
         <definition language="c"><![CDATA[ST_AddMeasure]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_addpoint(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: linestring, point - Add a point to a LineString.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_addpoint]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_addpoint(geom1 geometry, geom2 geometry, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: linestring, point, position - Add a point to a LineString.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_addpoint]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, a, b, d, e, xoff, yoff - Apply a 3d affine transformation to a geometry.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_Affine($1,  $2, $3, 0,  $4, $5, 0,  0, 0, 1,  $6, $7, 0)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, a, b, c, d, e, f, g, h, i, xoff, yoff, zoff - Apply a 3d affine transformation to a geometry.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_affine]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_angle(line1 geometry, line2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: line1, line2 - Returns the angle between 3 points, or between 2 vectors (4 points or 2 lines).]]></comment>
         <definition language="sql"><![CDATA[SELECT ST_Angle(St_StartPoint($1), ST_EndPoint($1), St_StartPoint($2), ST_EndPoint($2))]]></definition>
         <parameters>
            <parameter mode="IN" name="line1" type="geometry"/>
            <parameter mode="IN" name="line2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_angle(pt1 geometry, pt2 geometry, pt3 geometry, pt4 geometry DEFAULT '0101000000000000000000F87F000000000000F87F'::geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: point1, point2, point3, point4 - Returns the angle between 3 points, or between 2 vectors (4 points or 2 lines).]]></comment>
         <definition language="c"><![CDATA[LWGEOM_angle]]></definition>
         <parameters>
            <parameter mode="IN" name="pt1" type="geometry"/>
            <parameter mode="IN" name="pt2" type="geometry"/>
            <parameter mode="IN" name="pt3" type="geometry"/>
            <parameter mode="IN" name="pt4" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxcount(rast raster, exclude_nodata_value boolean, sample_percent double precision DEFAULT 0.1)" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_count($1, 1, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxcount(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1)" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_count($1, $2, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxcount(rast raster, nband integer, sample_percent double precision)" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_count($1, $2, TRUE, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxcount(rast raster, sample_percent double precision)" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_count($1, 1, TRUE, $2)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxcount(rastertable text, rastercolumn text, exclude_nodata_value boolean, sample_percent double precision DEFAULT 0.1)" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_count($1, $2, 1, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxcount(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1)" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_count($1, $2, $3, $4, $5)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxcount(rastertable text, rastercolumn text, nband integer, sample_percent double precision)" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_count($1, $2, $3, TRUE, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxcount(rastertable text, rastercolumn text, sample_percent double precision)" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_count($1, $2, 1, TRUE, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxhistogram(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1, bins integer DEFAULT 0, width double precision[] DEFAULT NULL::double precision[], &quot;right&quot; boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT min, max, count, percent FROM public._ST_histogram($1, $2, $3, $4, $5, $6, $7)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="bins" type="integer"/>
            <parameter mode="IN" name="width" type="double precision[]"/>
            <parameter mode="IN" name="right" type="boolean"/>
            <parameter mode="OUT" name="min" type="double precision"/>
            <parameter mode="OUT" name="max" type="double precision"/>
            <parameter mode="OUT" name="count" type="bigint"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxhistogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, &quot;right&quot; boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT min, max, count, percent FROM public._ST_histogram($1, $2, $3, $4, $5, NULL, $6)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="bins" type="integer"/>
            <parameter mode="IN" name="right" type="boolean"/>
            <parameter mode="OUT" name="min" type="double precision"/>
            <parameter mode="OUT" name="max" type="double precision"/>
            <parameter mode="OUT" name="count" type="bigint"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxhistogram(rast raster, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT min, max, count, percent FROM public._ST_histogram($1, $2, TRUE, $3, 0, NULL, FALSE)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="OUT" name="min" type="double precision"/>
            <parameter mode="OUT" name="max" type="double precision"/>
            <parameter mode="OUT" name="count" type="bigint"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, &quot;right&quot; boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT min, max, count, percent FROM public._ST_histogram($1, $2, TRUE, $3, $4, NULL, $5)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="bins" type="integer"/>
            <parameter mode="IN" name="right" type="boolean"/>
            <parameter mode="OUT" name="min" type="double precision"/>
            <parameter mode="OUT" name="max" type="double precision"/>
            <parameter mode="OUT" name="count" type="bigint"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, width double precision[] DEFAULT NULL::double precision[], &quot;right&quot; boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT min, max, count, percent FROM public._ST_histogram($1, $2, TRUE, $3, $4, $5, $6)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="bins" type="integer"/>
            <parameter mode="IN" name="width" type="double precision[]"/>
            <parameter mode="IN" name="right" type="boolean"/>
            <parameter mode="OUT" name="min" type="double precision"/>
            <parameter mode="OUT" name="max" type="double precision"/>
            <parameter mode="OUT" name="count" type="bigint"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxhistogram(rast raster, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT min, max, count, percent FROM public._ST_histogram($1, 1, TRUE, $2, 0, NULL, FALSE)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="OUT" name="min" type="double precision"/>
            <parameter mode="OUT" name="max" type="double precision"/>
            <parameter mode="OUT" name="count" type="bigint"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxhistogram(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1, bins integer DEFAULT 0, width double precision[] DEFAULT NULL::double precision[], &quot;right&quot; boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_histogram($1, $2, $3, $4, $5, $6, $7, $8)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="bins" type="integer"/>
            <parameter mode="IN" name="width" type="double precision[]"/>
            <parameter mode="IN" name="right" type="boolean"/>
            <parameter mode="OUT" name="min" type="double precision"/>
            <parameter mode="OUT" name="max" type="double precision"/>
            <parameter mode="OUT" name="count" type="bigint"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxhistogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, &quot;right&quot; boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_histogram($1, $2, $3, $4, $5, $6, NULL, $7)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="bins" type="integer"/>
            <parameter mode="IN" name="right" type="boolean"/>
            <parameter mode="OUT" name="min" type="double precision"/>
            <parameter mode="OUT" name="max" type="double precision"/>
            <parameter mode="OUT" name="count" type="bigint"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_histogram($1, $2, $3, TRUE, $4, 0, NULL, FALSE)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="OUT" name="min" type="double precision"/>
            <parameter mode="OUT" name="max" type="double precision"/>
            <parameter mode="OUT" name="count" type="bigint"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, &quot;right&quot; boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_histogram($1, $2, $3, TRUE, $4, $5, NULL, $6)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="bins" type="integer"/>
            <parameter mode="IN" name="right" type="boolean"/>
            <parameter mode="OUT" name="min" type="double precision"/>
            <parameter mode="OUT" name="max" type="double precision"/>
            <parameter mode="OUT" name="count" type="bigint"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, width double precision[] DEFAULT NULL::double precision[], &quot;right&quot; boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_histogram($1, $2, $3, TRUE, $4, $5, $6, $7)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="bins" type="integer"/>
            <parameter mode="IN" name="width" type="double precision[]"/>
            <parameter mode="IN" name="right" type="boolean"/>
            <parameter mode="OUT" name="min" type="double precision"/>
            <parameter mode="OUT" name="max" type="double precision"/>
            <parameter mode="OUT" name="count" type="bigint"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxhistogram(rastertable text, rastercolumn text, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_histogram($1, $2, 1, TRUE, $3, 0, NULL, FALSE)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="OUT" name="min" type="double precision"/>
            <parameter mode="OUT" name="max" type="double precision"/>
            <parameter mode="OUT" name="count" type="bigint"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxquantile(rast raster, exclude_nodata_value boolean, quantile double precision DEFAULT NULL::double precision)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT ( public._ST_quantile($1, 1, $2, 0.1, ARRAY[$3]::double precision[])).value]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="quantile" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxquantile(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_quantile($1, $2, $3, $4, $5)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="quantiles" type="double precision[]"/>
            <parameter mode="OUT" name="quantile" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxquantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT ( public._ST_quantile($1, $2, $3, $4, ARRAY[$5]::double precision[])).value]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="quantile" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxquantile(rast raster, nband integer, sample_percent double precision, quantile double precision)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT ( public._ST_quantile($1, $2, TRUE, $3, ARRAY[$4]::double precision[])).value]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="quantile" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxquantile(rast raster, nband integer, sample_percent double precision, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_quantile($1, $2, TRUE, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="quantiles" type="double precision[]"/>
            <parameter mode="OUT" name="quantile" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxquantile(rast raster, quantile double precision)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT ( public._ST_quantile($1, 1, TRUE, 0.1, ARRAY[$2]::double precision[])).value]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="quantile" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxquantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_quantile($1, 1, TRUE, 0.1, $2)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="quantiles" type="double precision[]"/>
            <parameter mode="OUT" name="quantile" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxquantile(rast raster, sample_percent double precision, quantile double precision)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT ( public._ST_quantile($1, 1, TRUE, $2, ARRAY[$3]::double precision[])).value]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="quantile" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxquantile(rast raster, sample_percent double precision, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_quantile($1, 1, TRUE, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="quantiles" type="double precision[]"/>
            <parameter mode="OUT" name="quantile" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxquantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision DEFAULT NULL::double precision)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT ( public._ST_quantile($1, $2, 1, $3, 0.1, ARRAY[$4]::double precision[])).value]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="quantile" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxquantile(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_quantile($1, $2, $3, $4, $5, $6)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="quantiles" type="double precision[]"/>
            <parameter mode="OUT" name="quantile" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxquantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT ( public._ST_quantile($1, $2, $3, $4, $5, ARRAY[$6]::double precision[])).value]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="quantile" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantile double precision)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT ( public._ST_quantile($1, $2, $3, TRUE, $4, ARRAY[$5]::double precision[])).value]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="quantile" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_quantile($1, $2, $3, TRUE, $4, $5)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="quantiles" type="double precision[]"/>
            <parameter mode="OUT" name="quantile" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxquantile(rastertable text, rastercolumn text, quantile double precision)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT ( public._ST_quantile($1, $2, 1, TRUE, 0.1, ARRAY[$3]::double precision[])).value]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="quantile" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxquantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_quantile($1, $2, 1, TRUE, 0.1, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="quantiles" type="double precision[]"/>
            <parameter mode="OUT" name="quantile" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantile double precision)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT ( public._ST_quantile($1, $2, 1, TRUE, $3, ARRAY[$4]::double precision[])).value]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="quantile" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_quantile($1, $2, 1, TRUE, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
            <parameter mode="IN" name="quantiles" type="double precision[]"/>
            <parameter mode="OUT" name="quantile" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxsummarystats(rast raster, exclude_nodata_value boolean, sample_percent double precision DEFAULT 0.1)" returnType="summarystats" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_summarystats($1, 1, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxsummarystats(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1)" returnType="summarystats" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_summarystats($1, $2, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxsummarystats(rast raster, nband integer, sample_percent double precision)" returnType="summarystats" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_summarystats($1, $2, TRUE, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_approxsummarystats(rast raster, sample_percent double precision)" returnType="summarystats" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_summarystats($1, 1, TRUE, $2)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxsummarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean)" returnType="summarystats" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_summarystats($1, $2, 1, $3, 0.1)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxsummarystats(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1)" returnType="summarystats" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_summarystats($1, $2, $3, $4, $5)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxsummarystats(rastertable text, rastercolumn text, nband integer, sample_percent double precision)" returnType="summarystats" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_summarystats($1, $2, $3, TRUE, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_approxsummarystats(rastertable text, rastercolumn text, sample_percent double precision)" returnType="summarystats" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_summarystats($1, $2, 1, TRUE, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="sample_percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_area(geog geography, use_spheroid boolean DEFAULT true)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geog, use_spheroid=true - Returns the area of the surface if it is a Polygon or MultiPolygon. For geometry, a 2D Cartesian area is determined with units specified by the SRID. For geography, area is determined on a curved surface with units in square meters.]]></comment>
         <definition language="c"><![CDATA[geography_area]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="use_spheroid" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_area(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Returns the area of the surface if it is a Polygon or MultiPolygon. For geometry, a 2D Cartesian area is determined with units specified by the SRID. For geography, area is determined on a curved surface with units in square meters.]]></comment>
         <definition language="c"><![CDATA[area]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_area(text)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Area($1::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_area2d(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_area_polygon]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asbinary(geography)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_asBinary]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asbinary(geography, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_AsBinary($1::public.geometry, $2);]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asbinary(geometry)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_asBinary]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asbinary(geometry, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_asBinary]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asbinary(raster, outasin boolean DEFAULT false)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, outasin=FALSE - Return the Well-Known Binary (WKB) representation of the raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_AsWKB($1, $2)]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" name="outasin" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asencodedpolyline(geom geometry, integer DEFAULT 5)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, precision=5 - Returns an Encoded Polyline from a LineString geometry.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_asEncodedPolyline]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asewkb(geometry)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Return the Well-Known Binary (WKB) representation of the geometry with SRID meta data.]]></comment>
         <definition language="c"><![CDATA[WKBFromLWGEOM]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asewkb(geometry, text)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry with SRID meta data.]]></comment>
         <definition language="c"><![CDATA[WKBFromLWGEOM]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asewkt(geography)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Return the Well-Known Text (WKT) representation of the geometry with SRID meta data.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_asEWKT]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asewkt(geometry)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Return the Well-Known Text (WKT) representation of the geometry with SRID meta data.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_asEWKT]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asewkt(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_AsEWKT($1::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgdalraster(rast raster, format text, options text[] DEFAULT NULL::text[], srid integer DEFAULT NULL::integer)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, format, options=NULL, srid=sameassource - Return the raster tile in the designated GDAL Raster format. Raster formats are one of those supported by your compiled library. Use ST_GDALDrivers() to get a list of formats supported by your library.]]></comment>
         <definition language="c"><![CDATA[RASTER_asGDALRaster]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="format" type="text"/>
            <parameter mode="IN" name="options" type="text[]"/>
            <parameter mode="IN" name="srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgeobuf(anyelement)" returnType="bytea" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: row - Return a Geobuf representation of a set of rows.]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="anyelement"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgeobuf(anyelement, text)" returnType="bytea" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: row, geom_name - Return a Geobuf representation of a set of rows.]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgeojson(geog geography, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geog, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_AsGeoJson(1, $1, $2, $3);]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
            <parameter mode="IN" name="options" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgeojson(geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_asGeoJson]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
            <parameter mode="IN" name="options" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgeojson(gj_version integer, geog geography, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: gj_version, geog, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_AsGeoJson($1, $2, $3, $4);]]></definition>
         <parameters>
            <parameter mode="IN" name="gj_version" type="integer"/>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
            <parameter mode="IN" name="options" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgeojson(gj_version integer, geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: gj_version, geom, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_AsGeoJson($2::public.geometry, $3::int4, $4::int4);]]></definition>
         <parameters>
            <parameter mode="IN" name="gj_version" type="integer"/>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
            <parameter mode="IN" name="options" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgeojson(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_AsGeoJson(1, $1::public.geometry,15,0);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgml(geog geography, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geog, maxdecimaldigits=15, options=0 - Return the geometry as a GML version 2 or 3 element.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_AsGML(2, $1, $2, $3, null, null)]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
            <parameter mode="IN" name="options" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgml(geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, maxdecimaldigits=15, options=0 - Return the geometry as a GML version 2 or 3 element.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_AsGML(2, $1, $2, $3, null, null);]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
            <parameter mode="IN" name="options" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgml(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_AsGML(2,$1::public.geometry,15,0, NULL, NULL);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgml(version integer, geog geography, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0, nprefix text DEFAULT NULL::text, id text DEFAULT NULL::text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: version, geog, maxdecimaldigits=15, options=0, nprefix=null, id=null - Return the geometry as a GML version 2 or 3 element.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_AsGML($1, $2, $3, $4, $5, $6);]]></definition>
         <parameters>
            <parameter mode="IN" name="version" type="integer"/>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
            <parameter mode="IN" name="options" type="integer"/>
            <parameter mode="IN" name="nprefix" type="text"/>
            <parameter mode="IN" name="id" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asgml(version integer, geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0, nprefix text DEFAULT NULL::text, id text DEFAULT NULL::text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: version, geom, maxdecimaldigits=15, options=0, nprefix=null, id=null - Return the geometry as a GML version 2 or 3 element.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_AsGML($1, $2, $3, $4, $5, $6);]]></definition>
         <parameters>
            <parameter mode="IN" name="version" type="integer"/>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
            <parameter mode="IN" name="options" type="integer"/>
            <parameter mode="IN" name="nprefix" type="text"/>
            <parameter mode="IN" name="id" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_ashexewkb(geometry)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Returns a Geometry in HEXEWKB format (as text) using either little-endian (NDR) or big-endian (XDR) encoding.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_asHEXEWKB]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_ashexewkb(geometry, text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, NDRorXDR - Returns a Geometry in HEXEWKB format (as text) using either little-endian (NDR) or big-endian (XDR) encoding.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_asHEXEWKB]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_ashexwkb(raster, outasin boolean DEFAULT false)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, outasin=FALSE - Return the Well-Known Binary (WKB) in Hex representation of the raster.]]></comment>
         <definition language="c"><![CDATA[RASTER_asHexWKB]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" name="outasin" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asjpeg(rast raster, nband integer, options text[] DEFAULT NULL::text[])" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, options=NULL - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.st_asjpeg(st_band($1, $2), $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="options" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asjpeg(rast raster, nband integer, quality integer)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, quality - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.st_asjpeg($1, ARRAY[$2], $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="quality" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asjpeg(rast raster, nbands integer[], options text[] DEFAULT NULL::text[])" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nbands, options=NULL - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.]]></comment>
         <definition language="sql"><![CDATA[SELECT st_asjpeg(st_band($1, $2), $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nbands" type="integer[]"/>
            <parameter mode="IN" name="options" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asjpeg(rast raster, nbands integer[], quality integer)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nbands, quality - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		quality2 int;
		options text[];
	BEGIN
		IF quality IS NOT NULL THEN
			IF quality > 100 THEN
				quality2 := 100;
			ELSEIF quality < 10 THEN
				quality2 := 10;
			ELSE
				quality2 := quality;
			END IF;

			options := array_append(options, 'QUALITY=' || quality2);
		END IF;

		RETURN public.st_asjpeg(st_band($1, $2), options);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nbands" type="integer[]"/>
            <parameter mode="IN" name="quality" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asjpeg(rast raster, options text[] DEFAULT NULL::text[])" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, options=NULL - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		rast2 public.raster;
		num_bands int;
		i int;
	BEGIN
		IF rast IS NULL THEN
			RETURN NULL;
		END IF;

		num_bands := st_numbands($1);

		-- JPEG allows 1 or 3 bands
		IF num_bands <> 1 AND num_bands <> 3 THEN
			RAISE NOTICE 'The JPEG format only permits one or three bands.  The first band will be used.';
			rast2 := st_band(rast, ARRAY[1]);
			num_bands := st_numbands(rast);
		ELSE
			rast2 := rast;
		END IF;

		-- JPEG only supports 8BUI pixeltype
		FOR i IN 1..num_bands LOOP
			IF public.ST_BandPixelType(rast, i) != '8BUI' THEN
				RAISE EXCEPTION 'The pixel type of band % in the raster is not 8BUI.  The JPEG format can only be used with the 8BUI pixel type.', i;
			END IF;
		END LOOP;

		RETURN st_asgdalraster(rast2, 'JPEG', $2, NULL);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="options" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_askml(geog geography, maxdecimaldigits integer DEFAULT 15)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geog, maxdecimaldigits=15 - Return the geometry as a KML element. Several variants. Default version=2, default maxdecimaldigits=15]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_AsKML(2, $1, $2, null)]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_askml(geom geometry, maxdecimaldigits integer DEFAULT 15)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, maxdecimaldigits=15 - Return the geometry as a KML element. Several variants. Default version=2, default maxdecimaldigits=15]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_AsKML(2, ST_Transform($1,4326), $2, null);]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_askml(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_AsKML(2, $1::public.geometry, 15, null);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_askml(version integer, geog geography, maxdecimaldigits integer DEFAULT 15, nprefix text DEFAULT NULL::text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: version, geog, maxdecimaldigits=15, nprefix=NULL - Return the geometry as a KML element. Several variants. Default version=2, default maxdecimaldigits=15]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_AsKML($1, $2, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="version" type="integer"/>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
            <parameter mode="IN" name="nprefix" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_askml(version integer, geom geometry, maxdecimaldigits integer DEFAULT 15, nprefix text DEFAULT NULL::text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: version, geom, maxdecimaldigits=15, nprefix=NULL - Return the geometry as a KML element. Several variants. Default version=2, default maxdecimaldigits=15]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_AsKML($1, public.ST_Transform($2,4326), $3, $4);]]></definition>
         <parameters>
            <parameter mode="IN" name="version" type="integer"/>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
            <parameter mode="IN" name="nprefix" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_aslatlontext(geom geometry, tmpl text DEFAULT ''::text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: pt, format=' - Return the Degrees, Minutes, Seconds representation of the given point.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_to_latlon]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="tmpl" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asmvt(anyelement)" returnType="bytea" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: row - Return a Mapbox Vector Tile representation of a set of rows.]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="anyelement"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asmvt(anyelement, text)" returnType="bytea" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: row, name - Return a Mapbox Vector Tile representation of a set of rows.]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asmvt(anyelement, text, integer)" returnType="bytea" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: row, name, extent - Return a Mapbox Vector Tile representation of a set of rows.]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asmvt(anyelement, text, integer, text)" returnType="bytea" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: row, name, extent, geom_name - Return a Mapbox Vector Tile representation of a set of rows.]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="anyelement"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asmvtgeom(geom geometry, bounds box2d, extent integer DEFAULT 4096, buffer integer DEFAULT 256, clip_geom boolean DEFAULT true)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, bounds, extent=4096, buffer=256, clip_geom=true - Transform a geometry into the coordinate space of a Mapbox Vector Tile.]]></comment>
         <definition language="c"><![CDATA[ST_AsMVTGeom]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="bounds" type="box2d"/>
            <parameter mode="IN" name="extent" type="integer"/>
            <parameter mode="IN" name="buffer" type="integer"/>
            <parameter mode="IN" name="clip_geom" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_aspect(rast raster, nband integer DEFAULT 1, pixeltype text DEFAULT '32BF'::text, units text DEFAULT 'DEGREES'::text, interpolate_nodata boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_aspect($1, $2, NULL::public.raster, $3, $4, $5)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="units" type="text"/>
            <parameter mode="IN" name="interpolate_nodata" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_aspect(rast raster, nband integer, customextent raster, pixeltype text DEFAULT '32BF'::text, units text DEFAULT 'DEGREES'::text, interpolate_nodata boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		_rast public.raster;
		_nband integer;
		_pixtype text;
		_width integer;
		_height integer;
		_customextent public.raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;

		IF interpolate_nodata IS TRUE THEN
			_rast := public.ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'public.st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;

		-- get properties
		SELECT width, height INTO _width, _height FROM public.ST_Metadata(_rast);

		RETURN public.ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			' public._ST_aspect4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1,
			_width::text, _height::text,
			units::text
		);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="customextent" type="raster"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="units" type="text"/>
            <parameter mode="IN" name="interpolate_nodata" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_aspng(rast raster, nband integer, compression integer)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, compression - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.st_aspng($1, ARRAY[$2], $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="compression" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_aspng(rast raster, nband integer, options text[] DEFAULT NULL::text[])" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, options=NULL - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.st_aspng(st_band($1, $2), $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="options" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_aspng(rast raster, nbands integer[], compression integer)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nbands, compression - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		compression2 int;
		options text[];
	BEGIN
		IF compression IS NOT NULL THEN
			IF compression > 9 THEN
				compression2 := 9;
			ELSEIF compression < 1 THEN
				compression2 := 1;
			ELSE
				compression2 := compression;
			END IF;

			options := array_append(options, 'ZLEVEL=' || compression2);
		END IF;

		RETURN public.st_aspng(st_band($1, $2), options);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nbands" type="integer[]"/>
            <parameter mode="IN" name="compression" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_aspng(rast raster, nbands integer[], options text[] DEFAULT NULL::text[])" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nbands, options=NULL - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.st_aspng(st_band($1, $2), $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nbands" type="integer[]"/>
            <parameter mode="IN" name="options" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_aspng(rast raster, options text[] DEFAULT NULL::text[])" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, options=NULL - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		rast2 public.raster;
		num_bands int;
		i int;
		pt text;
	BEGIN
		IF rast IS NULL THEN
			RETURN NULL;
		END IF;

		num_bands := st_numbands($1);

		-- PNG allows 1, 3 or 4 bands
		IF num_bands <> 1 AND num_bands <> 3 AND num_bands <> 4 THEN
			RAISE NOTICE 'The PNG format only permits one, three or four bands.  The first band will be used.';
			rast2 := public.st_band($1, ARRAY[1]);
			num_bands := public.st_numbands(rast2);
		ELSE
			rast2 := rast;
		END IF;

		-- PNG only supports 8BUI and 16BUI pixeltype
		FOR i IN 1..num_bands LOOP
			pt = public.ST_BandPixelType(rast, i);
			IF pt != '8BUI' AND pt != '16BUI' THEN
				RAISE EXCEPTION 'The pixel type of band % in the raster is not 8BUI or 16BUI.  The PNG format can only be used with 8BUI and 16BUI pixel types.', i;
			END IF;
		END LOOP;

		RETURN public.st_asgdalraster(rast2, 'PNG', $2, NULL);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="options" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asraster(geom geometry, ref raster, pixeltype text, value double precision DEFAULT 1, nodataval double precision DEFAULT 0, touched boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, ref, pixeltype, value=1, nodataval=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT  public.ST_AsRaster($1, $2, ARRAY[$3]::text[], ARRAY[$4]::double precision[], ARRAY[$5]::double precision[], $6)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="ref" type="raster"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="value" type="double precision"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
            <parameter mode="IN" name="touched" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asraster(geom geometry, ref raster, pixeltype text[] DEFAULT ARRAY['8BUI'::text], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], touched boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, ref, pixeltype=ARRAY['8BUI'], value=ARRAY[1], nodataval=ARRAY[0], touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		g public.geometry;
		g_srid integer;

		ul_x double precision;
		ul_y double precision;
		scale_x double precision;
		scale_y double precision;
		skew_x double precision;
		skew_y double precision;
		sr_id integer;
	BEGIN
		SELECT upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid INTO ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id FROM public.ST_Metadata(ref);
		--RAISE NOTICE '%, %, %, %, %, %, %', ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id;

		-- geometry and raster has different SRID
		g_srid := public.ST_SRID(geom);
		IF g_srid != sr_id THEN
			RAISE NOTICE 'The geometry''s SRID (%) is not the same as the raster''s SRID (%).  The geometry will be transformed to the raster''s projection', g_srid, sr_id;
			g := public.ST_Transform(geom, sr_id);
		ELSE
			g := geom;
		END IF;

		RETURN public._ST_asraster(g, scale_x, scale_y, NULL, NULL, $3, $4, $5, NULL, NULL, ul_x, ul_y, skew_x, skew_y, $6);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="ref" type="raster"/>
            <parameter mode="IN" name="pixeltype" type="text[]"/>
            <parameter mode="IN" name="value" type="double precision[]"/>
            <parameter mode="IN" name="nodataval" type="double precision[]"/>
            <parameter mode="IN" name="touched" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision DEFAULT NULL::double precision, gridy double precision DEFAULT NULL::double precision, pixeltype text[] DEFAULT ARRAY['8BUI'::text], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, scalex, scaley, gridx=NULL, gridy=NULL, pixeltype=ARRAY['8BUI'], value=ARRAY[1], nodataval=ARRAY[0], skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_asraster($1, $2, $3, NULL, NULL, $6, $7, $8, NULL, NULL, $4, $5, $9, $10, $11)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="scalex" type="double precision"/>
            <parameter mode="IN" name="scaley" type="double precision"/>
            <parameter mode="IN" name="gridx" type="double precision"/>
            <parameter mode="IN" name="gridy" type="double precision"/>
            <parameter mode="IN" name="pixeltype" type="text[]"/>
            <parameter mode="IN" name="value" type="double precision[]"/>
            <parameter mode="IN" name="nodataval" type="double precision[]"/>
            <parameter mode="IN" name="skewx" type="double precision"/>
            <parameter mode="IN" name="skewy" type="double precision"/>
            <parameter mode="IN" name="touched" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text, value double precision DEFAULT 1, nodataval double precision DEFAULT 0, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, scalex, scaley, gridx, gridy, pixeltype, value=1, nodataval=0, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_asraster($1, $2, $3, NULL, NULL, ARRAY[$6]::text[], ARRAY[$7]::double precision[], ARRAY[$8]::double precision[], NULL, NULL, $4, $5, $9, $10, $11)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="scalex" type="double precision"/>
            <parameter mode="IN" name="scaley" type="double precision"/>
            <parameter mode="IN" name="gridx" type="double precision"/>
            <parameter mode="IN" name="gridy" type="double precision"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="value" type="double precision"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
            <parameter mode="IN" name="skewx" type="double precision"/>
            <parameter mode="IN" name="skewy" type="double precision"/>
            <parameter mode="IN" name="touched" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text, value double precision DEFAULT 1, nodataval double precision DEFAULT 0, upperleftx double precision DEFAULT NULL::double precision, upperlefty double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, scalex, scaley, pixeltype, value=1, nodataval=0, upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_asraster($1, $2, $3, NULL, NULL, ARRAY[$4]::text[], ARRAY[$5]::double precision[], ARRAY[$6]::double precision[], $7, $8, NULL, NULL, $9, $10, $11)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="scalex" type="double precision"/>
            <parameter mode="IN" name="scaley" type="double precision"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="value" type="double precision"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
            <parameter mode="IN" name="upperleftx" type="double precision"/>
            <parameter mode="IN" name="upperlefty" type="double precision"/>
            <parameter mode="IN" name="skewx" type="double precision"/>
            <parameter mode="IN" name="skewy" type="double precision"/>
            <parameter mode="IN" name="touched" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text[], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], upperleftx double precision DEFAULT NULL::double precision, upperlefty double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, scalex, scaley, pixeltype, value=ARRAY[1], nodataval=ARRAY[0], upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_asraster($1, $2, $3, NULL, NULL, $4, $5, $6, $7, $8, NULL, NULL,	$9, $10, $11)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="scalex" type="double precision"/>
            <parameter mode="IN" name="scaley" type="double precision"/>
            <parameter mode="IN" name="pixeltype" type="text[]"/>
            <parameter mode="IN" name="value" type="double precision[]"/>
            <parameter mode="IN" name="nodataval" type="double precision[]"/>
            <parameter mode="IN" name="upperleftx" type="double precision"/>
            <parameter mode="IN" name="upperlefty" type="double precision"/>
            <parameter mode="IN" name="skewx" type="double precision"/>
            <parameter mode="IN" name="skewy" type="double precision"/>
            <parameter mode="IN" name="touched" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asraster(geom geometry, width integer, height integer, gridx double precision DEFAULT NULL::double precision, gridy double precision DEFAULT NULL::double precision, pixeltype text[] DEFAULT ARRAY['8BUI'::text], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, width, height, gridx=NULL, gridy=NULL, pixeltype=ARRAY['8BUI'], value=ARRAY[1], nodataval=ARRAY[0], skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_asraster($1, NULL, NULL, $2, $3, $6, $7, $8, NULL, NULL, $4, $5, $9, $10, $11)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="width" type="integer"/>
            <parameter mode="IN" name="height" type="integer"/>
            <parameter mode="IN" name="gridx" type="double precision"/>
            <parameter mode="IN" name="gridy" type="double precision"/>
            <parameter mode="IN" name="pixeltype" type="text[]"/>
            <parameter mode="IN" name="value" type="double precision[]"/>
            <parameter mode="IN" name="nodataval" type="double precision[]"/>
            <parameter mode="IN" name="skewx" type="double precision"/>
            <parameter mode="IN" name="skewy" type="double precision"/>
            <parameter mode="IN" name="touched" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asraster(geom geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text, value double precision DEFAULT 1, nodataval double precision DEFAULT 0, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, width, height, gridx, gridy, pixeltype, value=1, nodataval=0, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_asraster($1, NULL, NULL, $2, $3, ARRAY[$6]::text[], ARRAY[$7]::double precision[], ARRAY[$8]::double precision[], NULL, NULL, $4, $5, $9, $10, $11)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="width" type="integer"/>
            <parameter mode="IN" name="height" type="integer"/>
            <parameter mode="IN" name="gridx" type="double precision"/>
            <parameter mode="IN" name="gridy" type="double precision"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="value" type="double precision"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
            <parameter mode="IN" name="skewx" type="double precision"/>
            <parameter mode="IN" name="skewy" type="double precision"/>
            <parameter mode="IN" name="touched" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asraster(geom geometry, width integer, height integer, pixeltype text, value double precision DEFAULT 1, nodataval double precision DEFAULT 0, upperleftx double precision DEFAULT NULL::double precision, upperlefty double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, width, height, pixeltype, value=1, nodataval=0, upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_asraster($1, NULL, NULL, $2, $3, ARRAY[$4]::text[], ARRAY[$5]::double precision[], ARRAY[$6]::double precision[], $7, $8, NULL, NULL,$9, $10, $11)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="width" type="integer"/>
            <parameter mode="IN" name="height" type="integer"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="value" type="double precision"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
            <parameter mode="IN" name="upperleftx" type="double precision"/>
            <parameter mode="IN" name="upperlefty" type="double precision"/>
            <parameter mode="IN" name="skewx" type="double precision"/>
            <parameter mode="IN" name="skewy" type="double precision"/>
            <parameter mode="IN" name="touched" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asraster(geom geometry, width integer, height integer, pixeltype text[], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], upperleftx double precision DEFAULT NULL::double precision, upperlefty double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, width, height, pixeltype, value=ARRAY[1], nodataval=ARRAY[0], upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_asraster($1, NULL, NULL, $2, $3, $4, $5, $6, $7, $8, NULL, NULL,	$9, $10, $11)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="width" type="integer"/>
            <parameter mode="IN" name="height" type="integer"/>
            <parameter mode="IN" name="pixeltype" type="text[]"/>
            <parameter mode="IN" name="value" type="double precision[]"/>
            <parameter mode="IN" name="nodataval" type="double precision[]"/>
            <parameter mode="IN" name="upperleftx" type="double precision"/>
            <parameter mode="IN" name="upperlefty" type="double precision"/>
            <parameter mode="IN" name="skewx" type="double precision"/>
            <parameter mode="IN" name="skewy" type="double precision"/>
            <parameter mode="IN" name="touched" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_assvg(geog geography, rel integer DEFAULT 0, maxdecimaldigits integer DEFAULT 15)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geog, rel=0, maxdecimaldigits=15 - Returns a Geometry in SVG path data given a geometry or geography object.]]></comment>
         <definition language="c"><![CDATA[geography_as_svg]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="rel" type="integer"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_assvg(geom geometry, rel integer DEFAULT 0, maxdecimaldigits integer DEFAULT 15)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, rel=0, maxdecimaldigits=15 - Returns a Geometry in SVG path data given a geometry or geography object.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_asSVG]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="rel" type="integer"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_assvg(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_AsSVG($1::public.geometry,0,15);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_astext(geography)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Return the Well-Known Text (WKT) representation of the geometry/geography without SRID metadata.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_asText]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_astext(geography, integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, maxdecimaldigits=15 - Return the Well-Known Text (WKT) representation of the geometry/geography without SRID metadata.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_asText]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_astext(geometry)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Return the Well-Known Text (WKT) representation of the geometry/geography without SRID metadata.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_asText]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_astext(geometry, integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, maxdecimaldigits=15 - Return the Well-Known Text (WKT) representation of the geometry/geography without SRID metadata.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_asText]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_astext(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_AsText($1::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_astiff(rast raster, compression text, srid integer DEFAULT NULL::integer)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, compression=', srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified or any of specified bands does not exist in the raster, then will try to use all bands.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		compression2 text;
		c_type text;
		c_level int;
		i int;
		num_bands int;
		options text[];
	BEGIN
		IF rast IS NULL THEN
			RETURN NULL;
		END IF;

		compression2 := trim(both from upper(compression));

		IF length(compression2) > 0 THEN
			-- JPEG
			IF position('JPEG' in compression2) != 0 THEN
				c_type := 'JPEG';
				c_level := substring(compression2 from '[0-9]+$');

				IF c_level IS NOT NULL THEN
					IF c_level > 100 THEN
						c_level := 100;
					ELSEIF c_level < 1 THEN
						c_level := 1;
					END IF;

					options := array_append(options, 'JPEG_QUALITY=' || c_level);
				END IF;

				-- per band pixel type check
				num_bands := st_numbands($1);
				FOR i IN 1..num_bands LOOP
					IF public.ST_BandPixelType($1, i) != '8BUI' THEN
						RAISE EXCEPTION 'The pixel type of band % in the raster is not 8BUI.  JPEG compression can only be used with the 8BUI pixel type.', i;
					END IF;
				END LOOP;

			-- DEFLATE
			ELSEIF position('DEFLATE' in compression2) != 0 THEN
				c_type := 'DEFLATE';
				c_level := substring(compression2 from '[0-9]+$');

				IF c_level IS NOT NULL THEN
					IF c_level > 9 THEN
						c_level := 9;
					ELSEIF c_level < 1 THEN
						c_level := 1;
					END IF;

					options := array_append(options, 'ZLEVEL=' || c_level);
				END IF;

			ELSE
				c_type := compression2;

				-- CCITT
				IF position('CCITT' in compression2) THEN
					-- per band pixel type check
					num_bands := st_numbands($1);
					FOR i IN 1..num_bands LOOP
						IF public.ST_BandPixelType($1, i) != '1BB' THEN
							RAISE EXCEPTION 'The pixel type of band % in the raster is not 1BB.  CCITT compression can only be used with the 1BB pixel type.', i;
						END IF;
					END LOOP;
				END IF;

			END IF;

			-- compression type check
			IF ARRAY[c_type] <@ ARRAY['JPEG', 'LZW', 'PACKBITS', 'DEFLATE', 'CCITTRLE', 'CCITTFAX3', 'CCITTFAX4', 'NONE'] THEN
				options := array_append(options, 'COMPRESS=' || c_type);
			ELSE
				RAISE NOTICE 'Unknown compression type: %.  The outputted TIFF will not be COMPRESSED.', c_type;
			END IF;
		END IF;

		RETURN st_astiff($1, options, $3);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="compression" type="text"/>
            <parameter mode="IN" name="srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_astiff(rast raster, nbands integer[], compression text, srid integer DEFAULT NULL::integer)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nbands, compression=', srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified or any of specified bands does not exist in the raster, then will try to use all bands.]]></comment>
         <definition language="sql"><![CDATA[SELECT st_astiff(st_band($1, $2), $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nbands" type="integer[]"/>
            <parameter mode="IN" name="compression" type="text"/>
            <parameter mode="IN" name="srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_astiff(rast raster, nbands integer[], options text[] DEFAULT NULL::text[], srid integer DEFAULT NULL::integer)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nbands, options, srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified or any of specified bands does not exist in the raster, then will try to use all bands.]]></comment>
         <definition language="sql"><![CDATA[SELECT st_astiff(st_band($1, $2), $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nbands" type="integer[]"/>
            <parameter mode="IN" name="options" type="text[]"/>
            <parameter mode="IN" name="srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_astiff(rast raster, options text[] DEFAULT NULL::text[], srid integer DEFAULT NULL::integer)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, options=', srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified or any of specified bands does not exist in the raster, then will try to use all bands.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		i int;
		num_bands int;
		nodata double precision;
		last_nodata double precision;
	BEGIN
		IF rast IS NULL THEN
			RETURN NULL;
		END IF;

		num_bands := st_numbands($1);

		-- TIFF only allows one NODATA value for ALL bands
		FOR i IN 1..num_bands LOOP
			nodata := st_bandnodatavalue($1, i);
			IF last_nodata IS NULL THEN
				last_nodata := nodata;
			ELSEIF nodata != last_nodata THEN
				RAISE NOTICE 'The TIFF format only permits one NODATA value for all bands.  The value used will be the last band with a NODATA value.';
			END IF;
		END LOOP;

		RETURN st_asgdalraster($1, 'GTiff', $2, $3);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="options" type="text[]"/>
            <parameter mode="IN" name="srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_astwkb(geom geometry, prec integer DEFAULT NULL::integer, prec_z integer DEFAULT NULL::integer, prec_m integer DEFAULT NULL::integer, with_sizes boolean DEFAULT NULL::boolean, with_boxes boolean DEFAULT NULL::boolean)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, decimaldigits_xy=0, decimaldigits_z=0, decimaldigits_m=0, include_sizes=false, include_bounding boxes=false - Returns the geometry as TWKB, aka "Tiny Well-Known Binary"]]></comment>
         <definition language="c"><![CDATA[TWKBFromLWGEOM]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="prec" type="integer"/>
            <parameter mode="IN" name="prec_z" type="integer"/>
            <parameter mode="IN" name="prec_m" type="integer"/>
            <parameter mode="IN" name="with_sizes" type="boolean"/>
            <parameter mode="IN" name="with_boxes" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_astwkb(geom geometry[], ids bigint[], prec integer DEFAULT NULL::integer, prec_z integer DEFAULT NULL::integer, prec_m integer DEFAULT NULL::integer, with_sizes boolean DEFAULT NULL::boolean, with_boxes boolean DEFAULT NULL::boolean)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geometries, unique_ids, decimaldigits_xy=0, decimaldigits_z=0, decimaldigits_m=0, include_sizes=false, include_bounding_boxes=false - Returns the geometry as TWKB, aka "Tiny Well-Known Binary"]]></comment>
         <definition language="c"><![CDATA[TWKBFromLWGEOMArray]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry[]"/>
            <parameter mode="IN" name="ids" type="bigint[]"/>
            <parameter mode="IN" name="prec" type="integer"/>
            <parameter mode="IN" name="prec_z" type="integer"/>
            <parameter mode="IN" name="prec_m" type="integer"/>
            <parameter mode="IN" name="with_sizes" type="boolean"/>
            <parameter mode="IN" name="with_boxes" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_aswkb(raster, outasin boolean DEFAULT false)" returnType="bytea" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, outasin=FALSE - Return the Well-Known Binary (WKB) representation of the raster.]]></comment>
         <definition language="c"><![CDATA[RASTER_asWKB]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" name="outasin" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_asx3d(geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, maxdecimaldigits=15, options=0 - Returns a Geometry in X3D xml node element format: ISO-IEC-19776-1.2-X3DEncodings-XML]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_AsX3D(3,$1,$2,$3,'');]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="maxdecimaldigits" type="integer"/>
            <parameter mode="IN" name="options" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_azimuth(geog1 geography, geog2 geography)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: pointA, pointB - Returns the north-based azimuth as the angle in radians measured clockwise from the vertical on pointA to pointB.]]></comment>
         <definition language="c"><![CDATA[geography_azimuth]]></definition>
         <parameters>
            <parameter mode="IN" name="geog1" type="geography"/>
            <parameter mode="IN" name="geog2" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_azimuth(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: pointA, pointB - Returns the north-based azimuth as the angle in radians measured clockwise from the vertical on pointA to pointB.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_azimuth]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_band(rast raster, nband integer)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband - Returns one or more bands of an existing raster as a new raster. Useful for building new rasters from existing rasters.]]></comment>
         <definition language="sql"><![CDATA[SELECT  public.ST_band($1, ARRAY[$2])]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_band(rast raster, nbands integer[] DEFAULT ARRAY[1])" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nbands = ARRAY[1] - Returns one or more bands of an existing raster as a new raster. Useful for building new rasters from existing rasters.]]></comment>
         <definition language="c"><![CDATA[RASTER_band]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nbands" type="integer[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_band(rast raster, nbands text, delimiter character DEFAULT ','::bpchar)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nbands, delimiter=, - Returns one or more bands of an existing raster as a new raster. Useful for building new rasters from existing rasters.]]></comment>
         <definition language="sql"><![CDATA[SELECT  public.ST_band($1, regexp_split_to_array(regexp_replace($2, '[[:space:]]', '', 'g'), E'\\' || array_to_string(regexp_split_to_array($3, ''), E'\\'))::int[])]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nbands" type="text"/>
            <parameter mode="IN" name="delimiter" type="character"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_bandfilesize(rast raster, band integer DEFAULT 1)" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, bandnum=1 - Returns the file size of a band stored in file system. If no bandnum specified, 1 is assumed.]]></comment>
         <definition language="c"><![CDATA[RASTER_getBandFileSize]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_bandfiletimestamp(rast raster, band integer DEFAULT 1)" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, bandnum=1 - Returns the file timestamp of a band stored in file system. If no bandnum specified, 1 is assumed.]]></comment>
         <definition language="c"><![CDATA[RASTER_getBandFileTimestamp]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_bandisnodata(rast raster, band integer DEFAULT 1, forcechecking boolean DEFAULT false)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, band, forceChecking=true - Returns true if the band is filled with only nodata values.]]></comment>
         <definition language="c"><![CDATA[RASTER_bandIsNoData]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="forcechecking" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_bandisnodata(rast raster, forcechecking boolean)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, forceChecking=true - Returns true if the band is filled with only nodata values.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_bandisnodata($1, 1, $2)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="forcechecking" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_bandmetadata(rast raster, band integer DEFAULT 1, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text, OUT outdbbandnum integer, OUT filesize bigint, OUT filetimestamp bigint)" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, band=1 - Returns basic meta data for a specific raster band. band num 1 is assumed if none-specified.]]></comment>
         <definition language="sql"><![CDATA[SELECT pixeltype, nodatavalue, isoutdb, path, outdbbandnum, filesize, filetimestamp FROM public.ST_BandMetaData($1, ARRAY[$2]::int[]) LIMIT 1]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="OUT" name="pixeltype" type="text"/>
            <parameter mode="OUT" name="nodatavalue" type="double precision"/>
            <parameter mode="OUT" name="isoutdb" type="boolean"/>
            <parameter mode="OUT" name="path" type="text"/>
            <parameter mode="OUT" name="outdbbandnum" type="integer"/>
            <parameter mode="OUT" name="filesize" type="bigint"/>
            <parameter mode="OUT" name="filetimestamp" type="bigint"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_bandmetadata(rast raster, band integer[], OUT bandnum integer, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text, OUT outdbbandnum integer, OUT filesize bigint, OUT filetimestamp bigint)" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, band - Returns basic meta data for a specific raster band. band num 1 is assumed if none-specified.]]></comment>
         <definition language="c"><![CDATA[RASTER_bandmetadata]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer[]"/>
            <parameter mode="OUT" name="bandnum" type="integer"/>
            <parameter mode="OUT" name="pixeltype" type="text"/>
            <parameter mode="OUT" name="nodatavalue" type="double precision"/>
            <parameter mode="OUT" name="isoutdb" type="boolean"/>
            <parameter mode="OUT" name="path" type="text"/>
            <parameter mode="OUT" name="outdbbandnum" type="integer"/>
            <parameter mode="OUT" name="filesize" type="bigint"/>
            <parameter mode="OUT" name="filetimestamp" type="bigint"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_bandnodatavalue(rast raster, band integer DEFAULT 1)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, bandnum=1 - Returns the value in a given band that represents no data. If no band num 1 is assumed.]]></comment>
         <definition language="c"><![CDATA[RASTER_getBandNoDataValue]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_bandpath(rast raster, band integer DEFAULT 1)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, bandnum=1 - Returns system file path to a band stored in file system. If no bandnum specified, 1 is assumed.]]></comment>
         <definition language="c"><![CDATA[RASTER_getBandPath]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_bandpixeltype(rast raster, band integer DEFAULT 1)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, bandnum=1 - Returns the type of pixel for given band. If no bandnum specified, 1 is assumed.]]></comment>
         <definition language="c"><![CDATA[RASTER_getBandPixelTypeName]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_bdmpolyfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT, srid - Construct a MultiPolygon given an arbitrary collection of closed linestrings as a MultiLineString text representation Well-Known text representation.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline public.geometry;
	geom public.geometry;
BEGIN
	mline := public.ST_MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;

	geom := public.ST_Multi(public.ST_BuildArea(mline));

	RETURN geom;
END;]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_bdpolyfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT, srid - Construct a Polygon given an arbitrary collection of closed linestrings as a MultiLineString Well-Known text representation.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline public.geometry;
	geom public.geometry;
BEGIN
	mline := public.ST_MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;

	geom := public.ST_BuildArea(mline);

	IF public.GeometryType(geom) != 'POLYGON'
	THEN
		RAISE EXCEPTION 'Input returns more then a single polygon, try using BdMPolyFromText instead';
	END IF;

	RETURN geom;
END;]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_boundary(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Returns the closure of the combinatorial boundary of this Geometry.]]></comment>
         <definition language="c"><![CDATA[boundary]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_boundingdiagonal(geom geometry, fits boolean DEFAULT false)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, fits=false - Returns the diagonal of the supplied geometrys bounding box.]]></comment>
         <definition language="c"><![CDATA[ST_BoundingDiagonal]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="fits" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_box2dfromgeohash(text, integer DEFAULT NULL::integer)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geohash, precision=full_precision_of_geohash - Return a BOX2D from a GeoHash string.]]></comment>
         <definition language="c"><![CDATA[box2d_from_geohash]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_buffer(geography, double precision)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, radius_of_buffer_in_meters - (T)Returns a geometry covering all points within a given distancefrom the input geometry.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.geography(public.ST_Transform(public.ST_Buffer(public.ST_Transform(public.geometry($1), public._ST_BestSRID($1)), $2), 4326))]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_buffer(geography, double precision, integer)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, radius_of_buffer, num_seg_quarter_circle - (T)Returns a geometry covering all points within a given distancefrom the input geometry.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.geography(public.ST_Transform(public.ST_Buffer(public.ST_Transform(public.geometry($1), public._ST_BestSRID($1)), $2, $3), 4326))]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_buffer(geography, double precision, text)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, radius_of_buffer, buffer_style_parameters - (T)Returns a geometry covering all points within a given distancefrom the input geometry.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.geography(public.ST_Transform(public.ST_Buffer(public.ST_Transform(public.geometry($1), public._ST_BestSRID($1)), $2, $3), 4326))]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_buffer(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, radius_of_buffer - (T)Returns a geometry covering all points within a given distancefrom the input geometry.]]></comment>
         <definition language="c"><![CDATA[buffer]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_buffer(geometry, double precision, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, radius_of_buffer, num_seg_quarter_circle - (T)Returns a geometry covering all points within a given distancefrom the input geometry.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_Buffer($1, $2,
		CAST('quad_segs='||CAST($3 AS text) as cstring))]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_buffer(geometry, double precision, text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, radius_of_buffer, buffer_style_parameters - (T)Returns a geometry covering all points within a given distancefrom the input geometry.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_Buffer($1, $2,
		CAST( regexp_replace($3, '^[0123456789]+$',
			'quad_segs='||$3) AS cstring)
		)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_buffer(text, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Buffer($1::public.geometry, $2);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_buffer(text, double precision, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Buffer($1::public.geometry, $2, $3);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_buffer(text, double precision, text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Buffer($1::public.geometry, $2, $3);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_buildarea(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: A - Creates an areal geometry formed by the constituent linework of given geometry]]></comment>
         <definition language="c"><![CDATA[ST_BuildArea]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_centroid(geography, use_spheroid boolean DEFAULT true)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, use_spheroid=true - Returns the geometric center of a geometry.]]></comment>
         <definition language="c"><![CDATA[geography_centroid]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" name="use_spheroid" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_centroid(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Returns the geometric center of a geometry.]]></comment>
         <definition language="c"><![CDATA[centroid]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_centroid(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Centroid($1::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_chaikinsmoothing(geometry, integer DEFAULT 1, boolean DEFAULT false)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, nIterations = 1, preserveEndPoints = false - Returns a "smoothed" version of the given geometry using the Chaikin algorithm]]></comment>
         <definition language="c"><![CDATA[LWGEOM_ChaikinSmoothing]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_cleangeometry(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_CleanGeometry]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clip(rast raster, geom geometry, crop boolean)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Clip($1, NULL, $2, null::double precision[], $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="crop" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clip(rast raster, geom geometry, nodataval double precision, crop boolean DEFAULT true)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Clip($1, NULL, $2, ARRAY[$3]::double precision[], $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
            <parameter mode="IN" name="crop" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clip(rast raster, geom geometry, nodataval double precision[] DEFAULT NULL::double precision[], crop boolean DEFAULT true)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Clip($1, NULL, $2, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="nodataval" type="double precision[]"/>
            <parameter mode="IN" name="crop" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clip(rast raster, nband integer, geom geometry, crop boolean)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Clip($1, ARRAY[$2]::integer[], $3, null::double precision[], $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="crop" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clip(rast raster, nband integer, geom geometry, nodataval double precision, crop boolean DEFAULT true)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Clip($1, ARRAY[$2]::integer[], $3, ARRAY[$4]::double precision[], $5)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
            <parameter mode="IN" name="crop" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[] DEFAULT NULL::double precision[], crop boolean DEFAULT true)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[BEGIN
		-- short-cut if geometry's extent fully contains raster's extent
		IF (nodataval IS NULL OR array_length(nodataval, 1) < 1) AND public.ST_Contains(geom, public.ST_Envelope(rast)) THEN
			RETURN rast;
		END IF;

		RETURN public._ST_Clip($1, $2, $3, $4, $5);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer[]"/>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="nodataval" type="double precision[]"/>
            <parameter mode="IN" name="crop" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clipbybox2d(geom geometry, box box2d)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, box - Returns the portion of a geometry falling within a rectangle.]]></comment>
         <definition language="c"><![CDATA[ST_ClipByBox2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="box" type="box2d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_closestpoint(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - Returns the 2-dimensional point on g1 that is closest to g2. This is the first point of the shortest line.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_closestpoint]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_closestpointofapproach(geometry, geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: track1, track2 - Returns the measure at which points interpolated along two lines are closest.]]></comment>
         <definition language="c"><![CDATA[ST_ClosestPointOfApproach]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clusterdbscan(geometry, eps double precision, minpoints integer)" returnType="integer" securityType="INVOKER" type="WINDOW">
         <comment><![CDATA[args: geom, eps, minpoints - Windowing function that returns integer id for the cluster each input geometry is in based on 2D implementation of Density-based spatial clustering of applications with noise (DBSCAN) algorithm.]]></comment>
         <definition language="c"><![CDATA[ST_ClusterDBSCAN]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" name="eps" type="double precision"/>
            <parameter mode="IN" name="minpoints" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clusterintersecting(geometry)" returnType="geometry[]" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: g - Aggregate. Returns an array with the connected components of a set of geometries]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clusterintersecting(geometry[])" returnType="geometry[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[clusterintersecting_garray]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_clusterkmeans(geom geometry, k integer)" returnType="integer" securityType="INVOKER" type="WINDOW">
         <comment><![CDATA[args: geom, number_of_clusters - Windowing function that returns integer id for the cluster each input geometry is in.]]></comment>
         <definition language="c"><![CDATA[ST_ClusterKMeans]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="k" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clusterwithin(geometry, double precision)" returnType="geometry[]" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: g, distance - Aggregate. Returns an array of GeometryCollections, where each GeometryCollection represents a set of geometries separated by no more than the specified distance.]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_clusterwithin(geometry[], double precision)" returnType="geometry[]" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[cluster_within_distance_garray]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry[]"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_collect(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - Return a specified ST_Geometry value from a collection of other geometries.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_collect]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_collect(geometry)" returnType="geometry" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: g1field - Return a specified ST_Geometry value from a collection of other geometries.]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_collect(geometry[])" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1_array - Return a specified ST_Geometry value from a collection of other geometries.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_collect_garray]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_collectionextract(geometry, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: collection, type - Given a (multi)geometry, return a (multi)geometry consisting only of elements of the specified type.]]></comment>
         <definition language="c"><![CDATA[ST_CollectionExtract]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_collectionhomogenize(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: collection - Given a geometry collection, return the "simplest" representation of the contents.]]></comment>
         <definition language="c"><![CDATA[ST_CollectionHomogenize]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_colormap(rast raster, colormap text, method text DEFAULT 'INTERPOLATE'::text)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_ColorMap($1, 1, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="colormap" type="text"/>
            <parameter mode="IN" name="method" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_colormap(rast raster, nband integer DEFAULT 1, colormap text DEFAULT 'grayscale'::text, method text DEFAULT 'INTERPOLATE'::text)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		_ismap boolean;
		_colormap text;
		_element text[];
	BEGIN
		_ismap := TRUE;

		-- clean colormap to see what it is
		_colormap := split_part(colormap, E'\n', 1);
		_colormap := regexp_replace(_colormap, E':+', ' ', 'g');
		_colormap := regexp_replace(_colormap, E',+', ' ', 'g');
		_colormap := regexp_replace(_colormap, E'\\t+', ' ', 'g');
		_colormap := regexp_replace(_colormap, E' +', ' ', 'g');
		_element := regexp_split_to_array(_colormap, ' ');

		-- treat as colormap
		IF (array_length(_element, 1) > 1) THEN
			_colormap := colormap;
		-- treat as keyword
		ELSE
			method := 'INTERPOLATE';
			CASE lower(trim(both from _colormap))
				WHEN 'grayscale', 'greyscale' THEN
					_colormap := '
100%   0
  0% 254
  nv 255
					';
				WHEN 'pseudocolor' THEN
					_colormap := '
100% 255   0   0 255
 50%   0 255   0 255
  0%   0   0 255 255
  nv   0   0   0   0
					';
				WHEN 'fire' THEN
					_colormap := '
  100% 243 255 221 255
93.75% 242 255 178 255
 87.5% 255 255 135 255
81.25% 255 228  96 255
   75% 255 187  53 255
68.75% 255 131   7 255
 62.5% 255  84   0 255
56.25% 255  42   0 255
   50% 255   0   0 255
43.75% 255  42   0 255
 37.5% 224  74   0 255
31.25% 183  91   0 255
   25% 140  93   0 255
18.75%  99  82   0 255
 12.5%  58  58   1 255
 6.25%  12  15   0 255
    0%   0   0   0 255
    nv   0   0   0   0
					';
				WHEN 'bluered' THEN
					_colormap := '
100.00% 165   0  33 255
 94.12% 216  21  47 255
 88.24% 247  39  53 255
 82.35% 255  61  61 255
 76.47% 255 120  86 255
 70.59% 255 172 117 255
 64.71% 255 214 153 255
 58.82% 255 241 188 255
 52.94% 255 255 234 255
 47.06% 234 255 255 255
 41.18% 188 249 255 255
 35.29% 153 234 255 255
 29.41% 117 211 255 255
 23.53%  86 176 255 255
 17.65%  61 135 255 255
 11.76%  40  87 255 255
  5.88%  24  28 247 255
  0.00%  36   0 216 255
     nv   0   0   0   0
					';
				ELSE
					RAISE EXCEPTION 'Unknown colormap keyword: %', colormap;
			END CASE;
		END IF;

		RETURN public._ST_colormap($1, $2, _colormap, $4);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="colormap" type="text"/>
            <parameter mode="IN" name="method" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_combine_bbox(box2d, geometry)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_Combine_BBox', 'ST_CombineBbox', '2.2.0');
    SELECT public.ST_CombineBbox($1,$2);]]></definition>
         <parameters>
            <parameter mode="IN" type="box2d"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_combine_bbox(box3d, geometry)" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_Combine_BBox', 'ST_CombineBbox', '2.2.0');
    SELECT public.ST_CombineBbox($1,$2);]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_combinebbox(box2d, geometry)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX2D_combine]]></definition>
         <parameters>
            <parameter mode="IN" type="box2d"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_combinebbox(box3d, box3d)" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_combine_BOX3D]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_combinebbox(box3d, geometry)" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[BOX3D_combine]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_concavehull(param_geom geometry, param_pctconvex double precision, param_allow_holes boolean DEFAULT false)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, target_percent, allow_holes=false - The concave hull of a geometry represents a possibly concave geometry that encloses all geometries within the set. You can think of it as shrink wrapping.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		var_convhull public.geometry := public.ST_ForceSFS(public.ST_ConvexHull(param_geom));
		var_param_geom public.geometry := public.ST_ForceSFS(param_geom);
		var_initarea float := public.ST_Area(var_convhull);
		var_newarea float := var_initarea;
		var_div integer := 6; 
		var_tempgeom public.geometry;
		var_tempgeom2 public.geometry;
		var_cent public.geometry;
		var_geoms public.geometry[4]; 
		var_enline public.geometry;
		var_resultgeom public.geometry;
		var_atempgeoms public.geometry[];
		var_buf float := 1; 
	BEGIN
		-- We start with convex hull as our base
		var_resultgeom := var_convhull;

		IF param_pctconvex = 1 THEN
			-- this is the same as asking for the convex hull
			return var_resultgeom;
		ELSIF public.ST_GeometryType(var_param_geom) = 'ST_Polygon' THEN -- it is as concave as it is going to get
			IF param_allow_holes THEN -- leave the holes
				RETURN var_param_geom;
			ELSE -- remove the holes
				var_resultgeom := public.ST_MakePolygon(public.ST_ExteriorRing(var_param_geom));
				RETURN var_resultgeom;
			END IF;
		END IF;
		IF public.ST_Dimension(var_resultgeom) > 1 AND param_pctconvex BETWEEN 0 and 0.99 THEN
		-- get linestring that forms envelope of geometry
			var_enline := public.ST_Boundary(public.ST_Envelope(var_param_geom));
			var_buf := public.ST_Length(var_enline)/1000.0;
			IF public.ST_GeometryType(var_param_geom) = 'ST_MultiPoint' AND public.ST_NumGeometries(var_param_geom) BETWEEN 4 and 200 THEN
			-- we make polygons out of points since they are easier to cave in.
			-- Note we limit to between 4 and 200 points because this process is slow and gets quadratically slow
				var_buf := sqrt(public.ST_Area(var_convhull)*0.8/(public.ST_NumGeometries(var_param_geom)*public.ST_NumGeometries(var_param_geom)));
				var_atempgeoms := ARRAY(SELECT geom FROM public.ST_DumpPoints(var_param_geom));
				-- 5 and 10 and just fudge factors
				var_tempgeom := public.ST_Union(ARRAY(SELECT geom
						FROM (
						-- fuse near neighbors together
						SELECT DISTINCT ON (i) i,  public.ST_Distance(var_atempgeoms[i],var_atempgeoms[j]), public.ST_Buffer(public.ST_MakeLine(var_atempgeoms[i], var_atempgeoms[j]) , var_buf*5, 'quad_segs=3') As geom
								FROM generate_series(1,array_upper(var_atempgeoms, 1)) As i
									INNER JOIN generate_series(1,array_upper(var_atempgeoms, 1)) As j
										ON (
								 NOT public.ST_Intersects(var_atempgeoms[i],var_atempgeoms[j])
									AND public.ST_DWithin(var_atempgeoms[i],var_atempgeoms[j], var_buf*10)
									)
								UNION ALL
						-- catch the ones with no near neighbors
								SELECT i, 0, public.ST_Buffer(var_atempgeoms[i] , var_buf*10, 'quad_segs=3') As geom
								FROM generate_series(1,array_upper(var_atempgeoms, 1)) As i
									LEFT JOIN generate_series(ceiling(array_upper(var_atempgeoms,1)/2)::integer,array_upper(var_atempgeoms, 1)) As j
										ON (
								 NOT public.ST_Intersects(var_atempgeoms[i],var_atempgeoms[j])
									AND public.ST_DWithin(var_atempgeoms[i],var_atempgeoms[j], var_buf*10)
									)
									WHERE j IS NULL
								ORDER BY 1, 2
							) As foo	) );
				IF public.ST_IsValid(var_tempgeom) AND public.ST_GeometryType(var_tempgeom) = 'ST_Polygon' THEN
					var_tempgeom := public.ST_ForceSFS(public.ST_Intersection(var_tempgeom, var_convhull));
					IF param_allow_holes THEN
						var_param_geom := var_tempgeom;
					ELSIF public.ST_GeometryType(var_tempgeom) = 'ST_Polygon' THEN
						var_param_geom := public.ST_ForceSFS(public.ST_MakePolygon(public.ST_ExteriorRing(var_tempgeom)));
					ELSE
						var_param_geom := public.ST_ForceSFS(public.ST_ConvexHull(var_param_geom));
					END IF;
					-- make sure result covers original (#3638)
					var_param_geom := public.ST_Union(param_geom, var_param_geom);
					return var_param_geom;
				ELSIF public.ST_IsValid(var_tempgeom) THEN
					var_param_geom := public.ST_ForceSFS(public.ST_Intersection(var_tempgeom, var_convhull));
				END IF;
			END IF;

			IF public.ST_GeometryType(var_param_geom) = 'ST_Polygon' THEN
				IF NOT param_allow_holes THEN
					var_param_geom := public.ST_ForceSFS(public.ST_MakePolygon(public.ST_ExteriorRing(var_param_geom)));
				END IF;
				-- make sure result covers original (#3638)
				--var_param_geom := public.ST_Union(param_geom, var_param_geom);
				return var_param_geom;
			END IF;
            var_cent := public.ST_Centroid(var_param_geom);
            IF (public.ST_XMax(var_enline) - public.ST_XMin(var_enline) ) > var_buf AND (public.ST_YMax(var_enline) - public.ST_YMin(var_enline) ) > var_buf THEN
                    IF public.ST_Dwithin(public.ST_Centroid(var_convhull) , public.ST_Centroid(public.ST_Envelope(var_param_geom)), var_buf/2) THEN
                -- If the geometric dimension is > 1 and the object is symettric (cutting at centroid will not work -- offset a bit)
                        var_cent := public.ST_Translate(var_cent, (public.ST_XMax(var_enline) - public.ST_XMin(var_enline))/1000,  (public.ST_YMAX(var_enline) - public.ST_YMin(var_enline))/1000);
                    ELSE
                        -- uses closest point on geometry to centroid. I can't explain why we are doing this
                        var_cent := public.ST_ClosestPoint(var_param_geom,var_cent);
                    END IF;
                    IF public.ST_DWithin(var_cent, var_enline,var_buf) THEN
                        var_cent := public.ST_centroid(public.ST_Envelope(var_param_geom));
                    END IF;
                    -- break envelope into 4 triangles about the centroid of the geometry and returned the clipped geometry in each quadrant
                    FOR i in 1 .. 4 LOOP
                       var_geoms[i] := public.ST_MakePolygon(public.ST_MakeLine(ARRAY[public.ST_PointN(var_enline,i), public.ST_PointN(var_enline,i+1), var_cent, public.ST_PointN(var_enline,i)]));
                       var_geoms[i] := public.ST_ForceSFS(public.ST_Intersection(var_param_geom, public.ST_Buffer(var_geoms[i],var_buf)));
                       IF public.ST_IsValid(var_geoms[i]) THEN

                       ELSE
                            var_geoms[i] := public.ST_BuildArea(public.ST_MakeLine(ARRAY[public.ST_PointN(var_enline,i), public.ST_PointN(var_enline,i+1), var_cent, public.ST_PointN(var_enline,i)]));
                       END IF;
                    END LOOP;
                    var_tempgeom := public.ST_Union(ARRAY[public.ST_ConvexHull(var_geoms[1]), public.ST_ConvexHull(var_geoms[2]) , public.ST_ConvexHull(var_geoms[3]), public.ST_ConvexHull(var_geoms[4])]);
                    --RAISE NOTICE 'Curr vex % ', public.ST_AsText(var_tempgeom);
                    IF public.ST_Area(var_tempgeom) <= var_newarea AND public.ST_IsValid(var_tempgeom)  THEN --AND public.ST_GeometryType(var_tempgeom) ILIKE '%Polygon'

                        var_tempgeom := public.ST_Buffer(public.ST_ConcaveHull(var_geoms[1],least(param_pctconvex + param_pctconvex/var_div),true),var_buf, 'quad_segs=2');
                        FOR i IN 1 .. 4 LOOP
                            var_geoms[i] := public.ST_Buffer(public.ST_ConcaveHull(var_geoms[i],least(param_pctconvex + param_pctconvex/var_div),true), var_buf, 'quad_segs=2');
                            IF public.ST_IsValid(var_geoms[i]) Then
                                var_tempgeom := public.ST_Union(var_tempgeom, var_geoms[i]);
                            ELSE
                                RAISE NOTICE 'Not valid % %', i, public.ST_AsText(var_tempgeom);
                                var_tempgeom := public.ST_Union(var_tempgeom, public.ST_ConvexHull(var_geoms[i]));
                            END IF;
                        END LOOP;

                        --RAISE NOTICE 'Curr concave % ', public.ST_AsText(var_tempgeom);
                        IF public.ST_IsValid(var_tempgeom) THEN
                            var_resultgeom := var_tempgeom;
                        END IF;
                        var_newarea := public.ST_Area(var_resultgeom);
                    ELSIF public.ST_IsValid(var_tempgeom) THEN
                        var_resultgeom := var_tempgeom;
                    END IF;

                    IF public.ST_NumGeometries(var_resultgeom) > 1  THEN
                        var_tempgeom := public._ST_ConcaveHull(var_resultgeom);
                        IF public.ST_IsValid(var_tempgeom) AND public.ST_GeometryType(var_tempgeom) ILIKE 'ST_Polygon' THEN
                            var_resultgeom := var_tempgeom;
                        ELSE
                            var_resultgeom := public.ST_Buffer(var_tempgeom,var_buf, 'quad_segs=2');
                        END IF;
                    END IF;
                    IF param_allow_holes = false THEN
                    -- only keep exterior ring since we do not want holes
                        var_resultgeom := public.ST_MakePolygon(public.ST_ExteriorRing(var_resultgeom));
                    END IF;
                ELSE
                    var_resultgeom := public.ST_Buffer(var_resultgeom,var_buf);
                END IF;
                var_resultgeom := public.ST_ForceSFS(public.ST_Intersection(var_resultgeom, public.ST_ConvexHull(var_param_geom)));
            ELSE
                -- dimensions are too small to cut
                var_resultgeom := public._ST_ConcaveHull(var_param_geom);
            END IF;

            RETURN var_resultgeom;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="param_geom" type="geometry"/>
            <parameter mode="IN" name="param_pctconvex" type="double precision"/>
            <parameter mode="IN" name="param_allow_holes" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_contains(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, geomB - Returns true if and only if no points of B lie in the exterior of A, and at least one point of the interior of B lies in the interior of A.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.~) $2 AND public._ST_Contains($1,$2)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if no points of raster rastB lie in the exterior of raster rastA and at least one point of the interior of rastB lies in the interior of rastA.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_contains(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._st_contains($1, $2, $3, $4) END]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="nband1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nband2" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_contains(rast1 raster, rast2 raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, rastB - Return true if no points of raster rastB lie in the exterior of raster rastA and at least one point of the interior of rastB lies in the interior of rastA.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.st_contains($1, NULL::integer, $2, NULL::integer)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="rast2" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_containsproperly(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, geomB - Returns true if B intersects the interior of A but not the boundary (or exterior). A does not contain properly itself, but does contain itself.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.~) $2 AND public._ST_ContainsProperly($1,$2)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if rastB intersects the interior of rastA but not the boundary or exterior of rastA.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_containsproperly(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._st_containsproperly($1, $2, $3, $4) END]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="nband1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nband2" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_containsproperly(rast1 raster, rast2 raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, rastB - Return true if rastB intersects the interior of rastA but not the boundary or exterior of rastA.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.st_containsproperly($1, NULL::integer, $2, NULL::integer)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="rast2" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_convexhull(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - The convex hull of a geometry represents the minimum convex geometry that encloses all geometries within the set.]]></comment>
         <definition language="c"><![CDATA[convexhull]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_convexhull(raster)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_convex_hull]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_coorddim(geometry geometry)" returnType="smallint" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Return the coordinate dimension of the ST_Geometry value.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_ndims]]></definition>
         <parameters>
            <parameter mode="IN" name="geometry" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_count(rast raster, exclude_nodata_value boolean)" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, exclude_nodata_value - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_count($1, 1, $2, 1)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_count(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true)" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband=1, exclude_nodata_value=true - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_count($1, $2, $3, 1)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_count(rastertable text, rastercolumn text, exclude_nodata_value boolean)" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastertable, rastercolumn, exclude_nodata_value - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_count($1, $2, 1, $3, 1)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_count(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true)" returnType="bigint" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_count($1, $2, $3, $4, 1)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_countagg(raster, boolean)" returnType="bigint" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: rast, exclude_nodata_value - Aggregate. Returns the number of pixels in a given band of a set of rasters. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the NODATA value.]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_countagg(raster, integer, boolean)" returnType="bigint" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: rast, nband, exclude_nodata_value - Aggregate. Returns the number of pixels in a given band of a set of rasters. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the NODATA value.]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_countagg(raster, integer, boolean, double precision)" returnType="bigint" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: rast, nband, exclude_nodata_value, sample_percent - Aggregate. Returns the number of pixels in a given band of a set of rasters. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the NODATA value.]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_coveredby(geography, geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geogA, geogB - Returns 1 (TRUE) if no point in Geometry/Geography A is outside Geometry/Geography B]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) $2 AND public._ST_Covers($2, $1)]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_coveredby(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, geomB - Returns 1 (TRUE) if no point in Geometry/Geography A is outside Geometry/Geography B]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.@) $2 AND public._ST_CoveredBy($1,$2)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if no points of raster rastA lie outside raster rastB.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_coveredby(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._st_coveredby($1, $2, $3, $4) END]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="nband1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nband2" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_coveredby(rast1 raster, rast2 raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, rastB - Return true if no points of raster rastA lie outside raster rastB.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.st_coveredby($1, NULL::integer, $2, NULL::integer)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="rast2" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_coveredby(text, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_CoveredBy($1::public.geometry, $2::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_covers(geography, geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geogpolyA, geogpointB - Returns 1 (TRUE) if no point in Geometry B is outside Geometry A]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) $2 AND public._ST_Covers($1, $2)]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_covers(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, geomB - Returns 1 (TRUE) if no point in Geometry B is outside Geometry A]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.~) $2 AND public._ST_Covers($1,$2)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if no points of raster rastB lie outside raster rastA.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_covers(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._st_covers($1, $2, $3, $4) END]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="nband1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nband2" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_covers(rast1 raster, rast2 raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, rastB - Return true if no points of raster rastB lie outside raster rastA.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.st_covers($1, NULL::integer, $2, NULL::integer)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="rast2" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_covers(text, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Covers($1::public.geometry, $2::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_cpawithin(geometry, geometry, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: track1, track2, maxdist - Returns true if the trajectories closest points of approachare within the specified distance.]]></comment>
         <definition language="c"><![CDATA[ST_CPAWithin]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_createoverview(tab regclass, col name, factor integer, algo text DEFAULT 'NearestNeighbour'::text)" returnType="regclass" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: tab, col, factor, algo='NearestNeighbor' - Create an reduced resolution version of a given raster coverage.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
  sinfo RECORD; -- source info
  sql TEXT;
  ttab TEXT;
BEGIN

  -- 0. Check arguments, we need to ensure:
  --    a. Source table has a raster column with given name
  --    b. Source table has a fixed scale (or "factor" would have no meaning)
  --    c. Source table has a known extent ? (we could actually compute it)
  --    d. Source table has a fixed tile size (or "factor" would have no meaning?)
  -- # all of the above can be checked with a query to raster_columns
  sql := 'SELECT r.r_table_schema sch, r.r_table_name tab, '
      || 'r.scale_x sfx, r.scale_y sfy, r.blocksize_x tw, '
      || 'r.blocksize_y th, r.extent ext, r.srid FROM public.raster_columns r, '
      || 'pg_class c, pg_namespace n WHERE r.r_table_schema = n.nspname '
      || 'AND r.r_table_name = c.relname AND r_raster_column = $2 AND '
      || ' c.relnamespace = n.oid AND c.oid = $1'
  ;
  EXECUTE sql INTO sinfo USING tab, col;
  IF sinfo IS NULL THEN
      RAISE EXCEPTION '%.% raster column does not exist', tab::text, col;
  END IF;
  IF sinfo.sfx IS NULL or sinfo.sfy IS NULL THEN
    RAISE EXCEPTION 'cannot create overview without scale constraint, try select AddRasterConstraints(''%'', ''%'');', tab::text, col;
  END IF;
  IF sinfo.tw IS NULL or sinfo.tw IS NULL THEN
    RAISE EXCEPTION 'cannot create overview without tilesize constraint, try select AddRasterConstraints(''%'', ''%'');', tab::text, col;
  END IF;
  IF sinfo.ext IS NULL THEN
    RAISE EXCEPTION 'cannot create overview without extent constraint, try select AddRasterConstraints(''%'', ''%'');', tab::text, col;
  END IF;

  -- TODO: lookup in raster_overviews to see if there's any
  --       lower-resolution table to start from

  ttab := 'o_' || factor || '_' || sinfo.tab;
  sql := 'CREATE TABLE ' || quote_ident(sinfo.sch)
      || '.' || quote_ident(ttab)
      || ' AS SELECT public.ST_Retile($1, $2, $3, $4, $5, $6, $7) '
      || quote_ident(col);
  EXECUTE sql USING tab, col, sinfo.ext,
                    sinfo.sfx * factor, sinfo.sfy * factor,
                    sinfo.tw, sinfo.th, algo;

  -- TODO: optimize this using knowledge we have about
  --       the characteristics of the target column ?
  PERFORM public.AddRasterConstraints(sinfo.sch, ttab, col);

  PERFORM  public.AddOverviewConstraints(sinfo.sch, ttab, col,
                                 sinfo.sch, sinfo.tab, col, factor);

    -- return the schema as well as the table
  RETURN sinfo.sch||'.'||ttab;
END;]]></definition>
         <parameters>
            <parameter mode="IN" name="tab" type="regclass"/>
            <parameter mode="IN" name="col" type="name"/>
            <parameter mode="IN" name="factor" type="integer"/>
            <parameter mode="IN" name="algo" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_crosses(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - Returns TRUE if the supplied geometries have some, but not all, interior points in common.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) $2 AND public._ST_Crosses($1,$2)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_curvetoline(geom geometry, tol double precision DEFAULT 32, toltype integer DEFAULT 0, flags integer DEFAULT 0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: curveGeom, tolerance, tolerance_type, flags - Converts a CIRCULARSTRING/CURVEPOLYGON/MULTISURFACE to a LINESTRING/POLYGON/MULTIPOLYGON]]></comment>
         <definition language="c"><![CDATA[ST_CurveToLine]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="tol" type="double precision"/>
            <parameter mode="IN" name="toltype" type="integer"/>
            <parameter mode="IN" name="flags" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_delaunaytriangles(g1 geometry, tolerance double precision DEFAULT 0.0, flags integer DEFAULT 0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, tolerance, flags - Return a Delaunay triangulation around the given input points.]]></comment>
         <definition language="c"><![CDATA[ST_DelaunayTriangles]]></definition>
         <parameters>
            <parameter mode="IN" name="g1" type="geometry"/>
            <parameter mode="IN" name="tolerance" type="double precision"/>
            <parameter mode="IN" name="flags" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dfullywithin(geom1 geometry, geom2 geometry, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2, distance - Returns true if all of the geometries are within the specified distance of one another]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) public.ST_Expand($2,$3) AND $2 OPERATOR(public.&&) public.ST_Expand($1,$3) AND public._ST_DFullyWithin(public.ST_ConvexHull($1), public.ST_ConvexHull($2), $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, nbandA, rastB, nbandB, distance_of_srid - Return true if rasters rastA and rastB are fully within the specified distance of each other.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1::public.geometry OPERATOR(public.&&) public.ST_Expand(public.ST_ConvexHull($3), $5) AND $3::public.geometry OPERATOR(public.&&) public.ST_Expand(public.ST_ConvexHull($1), $5) AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._ST_DFullyWithin(public.ST_ConvexHull($1), public.ST_Convexhull($3), $5) ELSE public._ST_DFullyWithin($1, $2, $3, $4, $5) END]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="nband1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nband2" type="integer"/>
            <parameter mode="IN" name="distance" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dfullywithin(rast1 raster, rast2 raster, distance double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, rastB, distance_of_srid - Return true if rasters rastA and rastB are fully within the specified distance of each other.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_DFullyWithin($1, NULL::integer, $2, NULL::integer, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="distance" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_difference(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, geomB - Returns a geometry that represents that part of geometry A that does not intersect with geometry B.]]></comment>
         <definition language="c"><![CDATA[difference]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dimension(geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g - The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_dimension]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_disjoint(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: A, B - Returns TRUE if the Geometries do not "spatially intersect" - if they do not share any space together.]]></comment>
         <definition language="c"><![CDATA[disjoint]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_disjoint(rast1 raster, nband1 integer, rast2 raster, nband2 integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if raster rastA does not spatially intersect rastB.]]></comment>
         <definition language="sql"><![CDATA[SELECT CASE WHEN $2 IS NULL OR $4 IS NULL THEN public.ST_Disjoint(public.ST_ConvexHull($1), public.ST_ConvexHull($3)) ELSE NOT public._ST_intersects($1, $2, $3, $4) END]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="nband1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nband2" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_disjoint(rast1 raster, rast2 raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, rastB - Return true if raster rastA does not spatially intersect rastB.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_Disjoint($1, NULL::integer, $2, NULL::integer)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="rast2" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distance(geography, geography)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: gg1, gg2 - For geometry type returns the 2D Cartesian distance between two geometries in projected units (based on spatial reference system). For geography type defaults to return minimum geodesic distance between two geographies in meters.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_Distance($1, $2, 0.0, true)]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distance(geography, geography, boolean)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: gg1, gg2, use_spheroid - For geometry type returns the 2D Cartesian distance between two geometries in projected units (based on spatial reference system). For geography type defaults to return minimum geodesic distance between two geographies in meters.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_Distance($1, $2, 0.0, $3)]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distance(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - For geometry type returns the 2D Cartesian distance between two geometries in projected units (based on spatial reference system). For geography type defaults to return minimum geodesic distance between two geographies in meters.]]></comment>
         <definition language="c"><![CDATA[distance]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distance(text, text)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Distance($1::public.geometry, $2::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distance_sphere(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_Distance_Sphere', 'ST_DistanceSphere', '2.2.0');
    SELECT public.ST_DistanceSphere($1,$2);]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distance_spheroid(geom1 geometry, geom2 geometry, spheroid)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_Distance_Spheroid', 'ST_DistanceSpheroid', '2.2.0');
    SELECT public.ST_DistanceSpheroid($1,$2,$3);]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="spheroid"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distancecpa(geometry, geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: track1, track2 - Returns the distance between closest points of approach in two trajectories.]]></comment>
         <definition language="c"><![CDATA[ST_DistanceCPA]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distancesphere(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomlonlatA, geomlonlatB - Returns minimum distance in meters between two lon/lat geometries. Uses a spherical earth and radius derived from the spheroid defined by the SRID. Faster than ST_DistanceSpheroid , but less accurate. PostGIS versions prior to 1.5 only implemented for points.]]></comment>
         <definition language="sql"><![CDATA[select public.ST_distance( public.geography($1), public.geography($2),false)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distancespheroid(geom1 geometry, geom2 geometry, spheroid)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomlonlatA, geomlonlatB, measurement_spheroid - Returns the minimum distance between two lon/lat geometries given a particular spheroid. PostGIS versions prior to 1.5 only support points.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_distance_ellipsoid]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="spheroid"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distinct4ma(matrix double precision[], nodatamode text, VARIADIC args text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT COUNT(DISTINCT unnest)::float FROM unnest($1)]]></definition>
         <parameters>
            <parameter mode="IN" name="matrix" type="double precision[]"/>
            <parameter mode="IN" name="nodatamode" type="text"/>
            <parameter mode="VARIADIC" name="args" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_distinct4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT COUNT(DISTINCT unnest)::double precision FROM unnest($1)]]></definition>
         <parameters>
            <parameter mode="IN" name="value" type="double precision[]"/>
            <parameter mode="IN" name="pos" type="integer[]"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dump(geometry)" returnType="SETOF geometry_dump" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Returns a set of geometry_dump (geom,path) rows, that make up a geometry g1.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_dump]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dumpaspolygons(rast raster, band integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true)" returnType="SETOF geomval" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_dumpAsPolygons]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dumppoints(geometry)" returnType="SETOF geometry_dump" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Returns a set of geometry_dump (geom,path) rows of all points that make up a geometry.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_dumppoints]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dumprings(geometry)" returnType="SETOF geometry_dump" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_polygon - Returns a set of geometry_dump rows, representing the exterior and interior rings of a polygon.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_dump_rings]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dumpvalues(rast raster, nband integer, exclude_nodata_value boolean DEFAULT true)" returnType="double precision[]" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, exclude_nodata_value=true - Get the values of the specified band as a 2-dimension array.]]></comment>
         <definition language="sql"><![CDATA[SELECT valarray FROM public.ST_dumpvalues($1, ARRAY[$2]::integer[], $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dumpvalues(rast raster, nband integer[] DEFAULT NULL::integer[], exclude_nodata_value boolean DEFAULT true, OUT nband integer, OUT valarray double precision[])" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband=NULL, exclude_nodata_value=true - Get the values of the specified band as a 2-dimension array.]]></comment>
         <definition language="c"><![CDATA[RASTER_dumpValues]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer[]"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="OUT" name="nband" type="integer"/>
            <parameter mode="OUT" name="valarray" type="double precision[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dwithin(geography, geography, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: gg1, gg2, distance_meters - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and for geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) public._ST_Expand($2,$3) AND $2 OPERATOR(public.&&) public._ST_Expand($1,$3) AND public._ST_DWithin($1, $2, $3, true)]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dwithin(geography, geography, double precision, boolean)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: gg1, gg2, distance_meters, use_spheroid - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and for geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) public._ST_Expand($2,$3) AND $2 OPERATOR(public.&&) public._ST_Expand($1,$3) AND public._ST_DWithin($1, $2, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dwithin(geom1 geometry, geom2 geometry, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2, distance_of_srid - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and for geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) public.ST_Expand($2,$3) AND $2 OPERATOR(public.&&) public.ST_Expand($1,$3) AND public._ST_DWithin($1, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, nbandA, rastB, nbandB, distance_of_srid - Return true if rasters rastA and rastB are within the specified distance of each other.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1::public.geometry OPERATOR(public.&&) public.ST_Expand(public.ST_ConvexHull($3), $5) AND $3::public.geometry OPERATOR(public.&&) public.ST_Expand(public.ST_ConvexHull($1), $5) AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._ST_dwithin(public.st_convexhull($1), public.st_convexhull($3), $5) ELSE public._ST_dwithin($1, $2, $3, $4, $5) END]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="nband1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nband2" type="integer"/>
            <parameter mode="IN" name="distance" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dwithin(rast1 raster, rast2 raster, distance double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, rastB, distance_of_srid - Return true if rasters rastA and rastB are within the specified distance of each other.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.st_dwithin($1, NULL::integer, $2, NULL::integer, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="distance" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_dwithin(text, text, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_DWithin($1::public.geometry, $2::public.geometry, $3);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_endpoint(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g - Returns the last point of a LINESTRING or CIRCULARLINESTRING geometry as a POINT.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_endpoint_linestring]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_envelope(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Returns a geometry representing the double precision (float8) bounding box of the supplied geometry.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_envelope]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_envelope(raster)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_envelope]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_equals(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: A, B - Returns true if the given geometries represent the same geometry. Directionality is ignored.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.~=) $2 AND public._ST_Equals($1,$2)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_estimated_extent(text, text)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_Estimated_Extent', 'ST_EstimatedExtent', '2.1.0');
    -- We use security invoker instead of security definer
    -- to prevent malicious injection of a same named different function
    -- that would be run under elevated permissions
    SELECT public.ST_EstimatedExtent($1, $2);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_estimated_extent(text, text, text)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_Estimated_Extent', 'ST_EstimatedExtent', '2.1.0');
    -- We use security invoker instead of security definer
    -- to prevent malicious injection of a different same named function
    SELECT public.ST_EstimatedExtent($1, $2, $3);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_estimatedextent(text, text)" returnType="box2d" securityType="DEFINER" type="FUNCTION">
         <comment><![CDATA[args: table_name, geocolumn_name - Return the estimated extent of the given spatial table. The estimated is taken from the geometry columns statistics. The current schema will be used if not specified.]]></comment>
         <definition language="c"><![CDATA[gserialized_estimated_extent]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_estimatedextent(text, text, text)" returnType="box2d" securityType="DEFINER" type="FUNCTION">
         <comment><![CDATA[args: schema_name, table_name, geocolumn_name - Return the estimated extent of the given spatial table. The estimated is taken from the geometry columns statistics. The current schema will be used if not specified.]]></comment>
         <definition language="c"><![CDATA[gserialized_estimated_extent]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_estimatedextent(text, text, text, boolean)" returnType="box2d" securityType="DEFINER" type="FUNCTION">
         <comment><![CDATA[args: schema_name, table_name, geocolumn_name, parent_ony - Return the estimated extent of the given spatial table. The estimated is taken from the geometry columns statistics. The current schema will be used if not specified.]]></comment>
         <definition language="c"><![CDATA[gserialized_estimated_extent]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_expand(box box2d, dx double precision, dy double precision)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: box, dx, dy - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision]]></comment>
         <definition language="c"><![CDATA[BOX2D_expand]]></definition>
         <parameters>
            <parameter mode="IN" name="box" type="box2d"/>
            <parameter mode="IN" name="dx" type="double precision"/>
            <parameter mode="IN" name="dy" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_expand(box box3d, dx double precision, dy double precision, dz double precision DEFAULT 0)" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: box, dx, dy, dz=0 - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision]]></comment>
         <definition language="c"><![CDATA[BOX3D_expand]]></definition>
         <parameters>
            <parameter mode="IN" name="box" type="box3d"/>
            <parameter mode="IN" name="dx" type="double precision"/>
            <parameter mode="IN" name="dy" type="double precision"/>
            <parameter mode="IN" name="dz" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_expand(box2d, double precision)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: box, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision]]></comment>
         <definition language="c"><![CDATA[BOX2D_expand]]></definition>
         <parameters>
            <parameter mode="IN" type="box2d"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_expand(box3d, double precision)" returnType="box3d" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: box, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision]]></comment>
         <definition language="c"><![CDATA[BOX3D_expand]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_expand(geom geometry, dx double precision, dy double precision, dz double precision DEFAULT 0, dm double precision DEFAULT 0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, dx, dy, dz=0, dm=0 - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision]]></comment>
         <definition language="c"><![CDATA[LWGEOM_expand]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="dx" type="double precision"/>
            <parameter mode="IN" name="dy" type="double precision"/>
            <parameter mode="IN" name="dz" type="double precision"/>
            <parameter mode="IN" name="dm" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_expand(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision]]></comment>
         <definition language="c"><![CDATA[LWGEOM_expand]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_extent(geometry)" returnType="box2d" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: geomfield - an aggregate function that returns the bounding box that bounds rows of geometries.]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_exteriorring(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_polygon - Returns a line string representing the exterior ring of the POLYGON geometry. Return NULL if the geometry is not a polygon. Will not work with MULTIPOLYGON]]></comment>
         <definition language="c"><![CDATA[LWGEOM_exteriorring_polygon]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_filterbym(geometry, double precision, double precision DEFAULT NULL::double precision, boolean DEFAULT false)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, min, max = null, returnM = false - Filters vertex points based on their m-value]]></comment>
         <definition language="c"><![CDATA[LWGEOM_FilterByM]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_find_extent(text, text)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_Find_Extent', 'ST_FindExtent', '2.2.0');
    SELECT public.ST_FindExtent($1,$2);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_find_extent(text, text, text)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_Find_Extent', 'ST_FindExtent', '2.2.0');
    SELECT public.ST_FindExtent($1,$2,$3);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_findextent(text, text)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	tablename alias for $1;
	columnname alias for $2;
	myrec RECORD;

BEGIN
	FOR myrec IN EXECUTE 'SELECT public.ST_Extent("' || columnname || '") As extent FROM "' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_findextent(text, text, text)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	schemaname alias for $1;
	tablename alias for $2;
	columnname alias for $3;
	myrec RECORD;
BEGIN
	FOR myrec IN EXECUTE 'SELECT public.ST_Extent("' || columnname || '") As extent FROM "' || schemaname || '"."' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_flipcoordinates(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Returns a version of the given geometry with X and Y axis flipped. Useful for people who have built latitude/longitude features and need to fix them.]]></comment>
         <definition language="c"><![CDATA[ST_FlipCoordinates]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force2d(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Force the geometries into a "2-dimensional mode".]]></comment>
         <definition language="c"><![CDATA[LWGEOM_force_2d]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force3d(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Force the geometries into XYZ mode. This is an alias for ST_Force3DZ.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_force_3dz]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force3dm(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Force the geometries into XYM mode.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_force_3dm]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force3dz(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Force the geometries into XYZ mode.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_force_3dz]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force4d(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Force the geometries into XYZM mode.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_force_4d]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force_2d(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_Force_2d', 'ST_Force2D', '2.1.0');
    SELECT public.ST_Force2D($1);]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force_3d(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_Force_3d', 'ST_Force3D', '2.1.0');
    SELECT public.ST_Force3D($1);]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force_3dm(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_Force_3dm', 'ST_Force3DM', '2.1.0');
    SELECT public.ST_Force3DM($1);]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force_3dz(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_Force_3dz', 'ST_Force3DZ', '2.1.0');
    SELECT public.ST_Force3DZ($1);]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force_4d(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_Force_4d', 'ST_Force4D', '2.1.0');
    SELECT public.ST_Force4D($1);]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_force_collection(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_Force_Collection', 'ST_ForceCollection', '2.1.0');
    SELECT public.ST_ForceCollection($1);]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_forcecollection(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Convert the geometry into a GEOMETRYCOLLECTION.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_force_collection]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_forcecurve(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g - Upcast a geometry into its curved type, if applicable.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_force_curve]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_forcepolygonccw(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Orients all exterior rings counter-clockwise and all interior rings clockwise.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_Reverse(public.ST_ForcePolygonCW($1))]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_forcepolygoncw(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Orients all exterior rings clockwise and all interior rings counter-clockwise.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_force_clockwise_poly]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_forcerhr(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g - Force the orientation of the vertices in a polygon to follow the Right-Hand-Rule.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_force_clockwise_poly]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_forcesfs(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Force the geometries to use SFS 1.1 geometry types only.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_force_sfs]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_forcesfs(geometry, version text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, version - Force the geometries to use SFS 1.1 geometry types only.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_force_sfs]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" name="version" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_frechetdistance(geom1 geometry, geom2 geometry, double precision DEFAULT '-1'::integer)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2, densifyFrac = -1 - Returns the Fréchet distance between two geometries. This is a measure of similarity between curves that takes into account the location and ordering of the points along the curves. Units are in the units of the spatial reference system of the geometries.]]></comment>
         <definition language="c"><![CDATA[ST_FrechetDistance]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_fromgdalraster(gdaldata bytea, srid integer DEFAULT NULL::integer)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: gdaldata, srid=NULL - Returns a raster from a supported GDAL raster file.]]></comment>
         <definition language="c"><![CDATA[RASTER_fromGDALRaster]]></definition>
         <parameters>
            <parameter mode="IN" name="gdaldata" type="bytea"/>
            <parameter mode="IN" name="srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_gdaldrivers(OUT idx integer, OUT short_name text, OUT long_name text, OUT can_read boolean, OUT can_write boolean, OUT create_options text)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: OUT idx, OUT short_name, OUT long_name, OUT can_read, OUT can_write, OUT create_options - Returns a list of raster formats supported by PostGIS through GDAL. Only those formats with can_write=True can be used by ST_AsGDALRaster]]></comment>
         <definition language="c"><![CDATA[RASTER_getGDALDrivers]]></definition>
         <parameters>
            <parameter mode="OUT" name="idx" type="integer"/>
            <parameter mode="OUT" name="short_name" type="text"/>
            <parameter mode="OUT" name="long_name" type="text"/>
            <parameter mode="OUT" name="can_read" type="boolean"/>
            <parameter mode="OUT" name="can_write" type="boolean"/>
            <parameter mode="OUT" name="create_options" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_generatepoints(area geometry, npoints numeric)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g, npoints - Converts a polygon or multi-polygon into a multi-point composed of randomly location points within the original areas.]]></comment>
         <definition language="c"><![CDATA[ST_GeneratePoints]]></definition>
         <parameters>
            <parameter mode="IN" name="area" type="geometry"/>
            <parameter mode="IN" name="npoints" type="numeric"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geogfromtext(text)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: EWKT - Return a specified geography value from Well-Known Text representation or extended (WKT).]]></comment>
         <definition language="c"><![CDATA[geography_from_text]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geogfromwkb(bytea)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: wkb - Creates a geography instance from a Well-Known Binary geometry representation (WKB) or extended Well Known Binary (EWKB).]]></comment>
         <definition language="c"><![CDATA[geography_from_binary]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geographyfromtext(text)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: EWKT - Return a specified geography value from Well-Known Text representation or extended (WKT).]]></comment>
         <definition language="c"><![CDATA[geography_from_text]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geohash(geog geography, maxchars integer DEFAULT 0)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[ST_GeoHash]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="maxchars" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geohash(geom geometry, maxchars integer DEFAULT 0)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, maxchars=full_precision_of_point - Return a GeoHash representation of the geometry.]]></comment>
         <definition language="c"><![CDATA[ST_GeoHash]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="maxchars" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomcollfromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT - Makes a collection Geometry from collection WKT with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
         <definition language="sql"><![CDATA[SELECT CASE
	WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'GEOMETRYCOLLECTION'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomcollfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT, srid - Makes a collection Geometry from collection WKT with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
         <definition language="sql"><![CDATA[SELECT CASE
	WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN public.ST_GeomFromText($1,$2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomcollfromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE
	WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'GEOMETRYCOLLECTION'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomcollfromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE
	WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geometricmedian(g geometry, tolerance double precision DEFAULT NULL::double precision, max_iter integer DEFAULT 10000, fail_if_not_converged boolean DEFAULT false)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: 
					g
				, 
					tolerance
				, 
					max_iter
				, 
					fail_if_not_converged
				 - Returns the geometric median of a MultiPoint.]]></comment>
         <definition language="c"><![CDATA[ST_GeometricMedian]]></definition>
         <parameters>
            <parameter mode="IN" name="g" type="geometry"/>
            <parameter mode="IN" name="tolerance" type="double precision"/>
            <parameter mode="IN" name="max_iter" type="integer"/>
            <parameter mode="IN" name="fail_if_not_converged" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geometryfromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText]]></comment>
         <definition language="c"><![CDATA[LWGEOM_from_text]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geometryfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT, srid - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText]]></comment>
         <definition language="c"><![CDATA[LWGEOM_from_text]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geometryn(geometry, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, n - Return the 1-based Nth geometry if the geometry is a GEOMETRYCOLLECTION, (MULTI)POINT, (MULTI)LINESTRING, MULTICURVE or (MULTI)POLYGON, POLYHEDRALSURFACE Otherwise, return NULL.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_geometryn_collection]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geometrytype(geometry)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Return the geometry type of the ST_Geometry value.]]></comment>
         <definition language="c"><![CDATA[geometry_geometrytype]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromewkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: EWKB - Return a specified ST_Geometry value from Extended Well-Known Binary representation (EWKB).]]></comment>
         <definition language="c"><![CDATA[LWGEOMFromEWKB]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromewkt(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: EWKT - Return a specified ST_Geometry value from Extended Well-Known Text representation (EWKT).]]></comment>
         <definition language="c"><![CDATA[parse_WKT_lwgeom]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromgeohash(text, integer DEFAULT NULL::integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geohash, precision=full_precision_of_geohash - Return a geometry from a GeoHash string.]]></comment>
         <definition language="sql"><![CDATA[SELECT CAST(public.ST_Box2dFromGeoHash($1, $2) AS geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromgeojson(json)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomjson - Takes as input a geojson representation of a geometry and outputs a PostGIS geometry object]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_GeomFromGeoJson($1::text)]]></definition>
         <parameters>
            <parameter mode="IN" type="json"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromgeojson(jsonb)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomjson - Takes as input a geojson representation of a geometry and outputs a PostGIS geometry object]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_GeomFromGeoJson($1::text)]]></definition>
         <parameters>
            <parameter mode="IN" type="jsonb"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromgeojson(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomjson - Takes as input a geojson representation of a geometry and outputs a PostGIS geometry object]]></comment>
         <definition language="c"><![CDATA[geom_from_geojson]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromgml(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomgml - Takes as input GML representation of geometry and outputs a PostGIS geometry object]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_GeomFromGML($1, 0)]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromgml(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomgml, srid - Takes as input GML representation of geometry and outputs a PostGIS geometry object]]></comment>
         <definition language="c"><![CDATA[geom_from_gml]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromkml(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomkml - Takes as input KML representation of geometry and outputs a PostGIS geometry object]]></comment>
         <definition language="c"><![CDATA[geom_from_kml]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT).]]></comment>
         <definition language="c"><![CDATA[LWGEOM_from_text]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT, srid - Return a specified ST_Geometry value from Well-Known Text representation (WKT).]]></comment>
         <definition language="c"><![CDATA[LWGEOM_from_text]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromtwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: twkb - Creates a geometry instance from a TWKB ("Tiny Well-Known Binary") geometry representation.]]></comment>
         <definition language="c"><![CDATA[LWGEOMFromTWKB]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Makes a geometry from WKB with the given SRID]]></comment>
         <definition language="c"><![CDATA[LWGEOM_from_WKB]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geomfromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, srid - Makes a geometry from WKB with the given SRID]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_SetSRID(public.ST_GeomFromWKB($1), $2)]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_georeference(rast raster, format text DEFAULT 'GDAL'::text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, format=GDAL - Returns the georeference meta data in GDAL or ESRI format as commonly seen in a world file. Default is GDAL.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
				scale_x numeric;
				scale_y numeric;
				skew_x numeric;
				skew_y numeric;
				ul_x numeric;
				ul_y numeric;

        result text;
    BEGIN
			SELECT scalex::numeric, scaley::numeric, skewx::numeric, skewy::numeric, upperleftx::numeric, upperlefty::numeric
				INTO scale_x, scale_y, skew_x, skew_y, ul_x, ul_y FROM public.ST_Metadata(rast);

						-- scale x
            result := trunc(scale_x, 10) || E'\n';

						-- skew y
            result := result || trunc(skew_y, 10) || E'\n';

						-- skew x
            result := result || trunc(skew_x, 10) || E'\n';

						-- scale y
            result := result || trunc(scale_y, 10) || E'\n';

        IF format = 'ESRI' THEN
						-- upper left x
            result := result || trunc((ul_x + scale_x * 0.5), 10) || E'\n';

						-- upper left y
            result = result || trunc((ul_y + scale_y * 0.5), 10) || E'\n';
        ELSE -- IF format = 'GDAL' THEN
						-- upper left x
            result := result || trunc(ul_x, 10) || E'\n';

						-- upper left y
            result := result || trunc(ul_y, 10) || E'\n';
        END IF;

        RETURN result;
    END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="format" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_geotransform(raster, OUT imag double precision, OUT jmag double precision, OUT theta_i double precision, OUT theta_ij double precision, OUT xoffset double precision, OUT yoffset double precision)" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_getGeotransform]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="OUT" name="imag" type="double precision"/>
            <parameter mode="OUT" name="jmag" type="double precision"/>
            <parameter mode="OUT" name="theta_i" type="double precision"/>
            <parameter mode="OUT" name="theta_ij" type="double precision"/>
            <parameter mode="OUT" name="xoffset" type="double precision"/>
            <parameter mode="OUT" name="yoffset" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_gmltosql(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomgml - Return a specified ST_Geometry value from GML representation. This is an alias name for ST_GeomFromGML]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_GeomFromGML($1, 0)]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_gmltosql(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomgml, srid - Return a specified ST_Geometry value from GML representation. This is an alias name for ST_GeomFromGML]]></comment>
         <definition language="c"><![CDATA[geom_from_gml]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_grayscale(rast raster, redband integer DEFAULT 1, greenband integer DEFAULT 2, blueband integer DEFAULT 3, extenttype text DEFAULT 'INTERSECTION'::text)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
	BEGIN

		RETURN public.ST_Grayscale(
			ARRAY[
				ROW(rast, redband)::rastbandarg,
				ROW(rast, greenband)::rastbandarg,
				ROW(rast, blueband)::rastbandarg
			]::rastbandarg[],
			extenttype
		);

	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="redband" type="integer"/>
            <parameter mode="IN" name="greenband" type="integer"/>
            <parameter mode="IN" name="blueband" type="integer"/>
            <parameter mode="IN" name="extenttype" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_grayscale(rastbandargset rastbandarg[], extenttype text DEFAULT 'INTERSECTION'::text)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE

		_NBANDS integer DEFAULT 3;
		_NODATA integer DEFAULT 255;
		_PIXTYPE text DEFAULT '8BUI';

		_set rastbandarg[];

		nrast integer;
		idx integer;
		rast public.raster;
		nband integer;

		stats summarystats;
		nodata double precision;
		nodataval integer;
		reclassexpr text;

	BEGIN

		-- check for three rastbandarg
		nrast := array_length(rastbandargset, 1);
		IF nrast < _NBANDS THEN
			RAISE EXCEPTION '''rastbandargset'' must have three bands for red, green and blue';
		ELSIF nrast > _NBANDS THEN
			RAISE WARNING 'Only the first three elements of ''rastbandargset'' will be used';
			_set := rastbandargset[1:3];
		ELSE
			_set := rastbandargset;
		END IF;

		FOR idx IN 1.._NBANDS LOOP

			rast := _set[idx].rast;
			nband := _set[idx].nband;

			-- check that each raster has the specified band
			IF public.ST_HasNoBand(rast, nband) THEN

				RAISE EXCEPTION 'Band at index ''%'' not found for raster ''%''', nband, idx;

			-- check that each band is 8BUI. if not, reclassify to 8BUI
			ELSIF public.ST_BandPixelType(rast, nband) != _PIXTYPE THEN

				stats := public.ST_SummaryStats(rast, nband);
				nodata := public.ST_BandNoDataValue(rast, nband);

				IF nodata IS NOT NULL THEN
					nodataval := _NODATA;
					reclassexpr := concat(
						concat('[', nodata , '-', nodata, ']:', _NODATA, '-', _NODATA, ','),
						concat('[', stats.min , '-', stats.max , ']:0-', _NODATA - 1)
					);
				ELSE
					nodataval := NULL;
					reclassexpr := concat('[', stats.min , '-', stats.max , ']:0-', _NODATA);
				END IF;

				_set[idx] := ROW(
					public.ST_Reclass(
						rast,
						ROW(nband, reclassexpr, _PIXTYPE, nodataval)::reclassarg
					),
					nband
				)::rastbandarg;

			END IF;

		END LOOP;

		-- call map algebra with _st_grayscale4ma
		RETURN public.ST_MapAlgebra(
			_set,
			'public._ST_Grayscale4MA(double precision[][][], integer[][], text[])'::regprocedure,
			'8BUI',
			extenttype
		);

	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rastbandargset" type="rastbandarg[]"/>
            <parameter mode="IN" name="extenttype" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_hasarc(geometry geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Returns true if a geometry or geometry collection contains a circular string]]></comment>
         <definition language="c"><![CDATA[LWGEOM_has_arc]]></definition>
         <parameters>
            <parameter mode="IN" name="geometry" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_hasnoband(rast raster, nband integer DEFAULT 1)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, bandnum=1 - Returns true if there is no band with given band number. If no band number is specified, then band number 1 is assumed.]]></comment>
         <definition language="c"><![CDATA[RASTER_hasNoBand]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_hausdorffdistance(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - Returns the Hausdorff distance between two geometries. Basically a measure of how similar or dissimilar 2 geometries are. Units are in the units of the spatial reference system of the geometries.]]></comment>
         <definition language="c"><![CDATA[hausdorffdistance]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_hausdorffdistance(geom1 geometry, geom2 geometry, double precision)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2, densifyFrac - Returns the Hausdorff distance between two geometries. Basically a measure of how similar or dissimilar 2 geometries are. Units are in the units of the spatial reference system of the geometries.]]></comment>
         <definition language="c"><![CDATA[hausdorffdistancedensify]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_height(raster)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the height of the raster in pixels.]]></comment>
         <definition language="c"><![CDATA[RASTER_getHeight]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_hillshade(rast raster, nband integer DEFAULT 1, pixeltype text DEFAULT '32BF'::text, azimuth double precision DEFAULT 315.0, altitude double precision DEFAULT 45.0, max_bright double precision DEFAULT 255.0, scale double precision DEFAULT 1.0, interpolate_nodata boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_hillshade($1, $2, NULL::public.raster, $3, $4, $5, $6, $7, $8)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="azimuth" type="double precision"/>
            <parameter mode="IN" name="altitude" type="double precision"/>
            <parameter mode="IN" name="max_bright" type="double precision"/>
            <parameter mode="IN" name="scale" type="double precision"/>
            <parameter mode="IN" name="interpolate_nodata" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_hillshade(rast raster, nband integer, customextent raster, pixeltype text DEFAULT '32BF'::text, azimuth double precision DEFAULT 315.0, altitude double precision DEFAULT 45.0, max_bright double precision DEFAULT 255.0, scale double precision DEFAULT 1.0, interpolate_nodata boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		_rast public.raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent public.raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;

		IF interpolate_nodata IS TRUE THEN
			_rast := public.ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'public.st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;

		-- get properties
		_pixwidth := public.ST_PixelWidth(_rast);
		_pixheight := public.ST_PixelHeight(_rast);
		SELECT width, height, scalex INTO _width, _height FROM public.ST_Metadata(_rast);

		RETURN public.ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			' public._ST_hillshade4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1,
			_pixwidth::text, _pixheight::text,
			_width::text, _height::text,
			$5::text, $6::text,
			$7::text, $8::text
		);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="customextent" type="raster"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="azimuth" type="double precision"/>
            <parameter mode="IN" name="altitude" type="double precision"/>
            <parameter mode="IN" name="max_bright" type="double precision"/>
            <parameter mode="IN" name="scale" type="double precision"/>
            <parameter mode="IN" name="interpolate_nodata" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_histogram(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, bins integer DEFAULT 0, width double precision[] DEFAULT NULL::double precision[], &quot;right&quot; boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband=1, exclude_nodata_value=true, bins=autocomputed, width=NULL, right=false - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
         <definition language="sql"><![CDATA[SELECT min, max, count, percent FROM public._ST_histogram($1, $2, $3, 1, $4, $5, $6)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="bins" type="integer"/>
            <parameter mode="IN" name="width" type="double precision[]"/>
            <parameter mode="IN" name="right" type="boolean"/>
            <parameter mode="OUT" name="min" type="double precision"/>
            <parameter mode="OUT" name="max" type="double precision"/>
            <parameter mode="OUT" name="count" type="bigint"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_histogram(rast raster, nband integer, bins integer, &quot;right&quot; boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, bins, right - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
         <definition language="sql"><![CDATA[SELECT min, max, count, percent FROM public._ST_histogram($1, $2, TRUE, 1, $3, NULL, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="bins" type="integer"/>
            <parameter mode="IN" name="right" type="boolean"/>
            <parameter mode="OUT" name="min" type="double precision"/>
            <parameter mode="OUT" name="max" type="double precision"/>
            <parameter mode="OUT" name="count" type="bigint"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_histogram(rast raster, nband integer, bins integer, width double precision[] DEFAULT NULL::double precision[], &quot;right&quot; boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, bins, width=NULL, right=false - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
         <definition language="sql"><![CDATA[SELECT min, max, count, percent FROM public._ST_histogram($1, $2, TRUE, 1, $3, $4, $5)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="bins" type="integer"/>
            <parameter mode="IN" name="width" type="double precision[]"/>
            <parameter mode="IN" name="right" type="boolean"/>
            <parameter mode="OUT" name="min" type="double precision"/>
            <parameter mode="OUT" name="max" type="double precision"/>
            <parameter mode="OUT" name="count" type="bigint"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_histogram(rast raster, nband integer, exclude_nodata_value boolean, bins integer, &quot;right&quot; boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, exclude_nodata_value, bins, right - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
         <definition language="sql"><![CDATA[SELECT min, max, count, percent FROM public._ST_histogram($1, $2, $3, 1, $4, NULL, $5)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="bins" type="integer"/>
            <parameter mode="IN" name="right" type="boolean"/>
            <parameter mode="OUT" name="min" type="double precision"/>
            <parameter mode="OUT" name="max" type="double precision"/>
            <parameter mode="OUT" name="count" type="bigint"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_histogram(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, bins integer DEFAULT 0, width double precision[] DEFAULT NULL::double precision[], &quot;right&quot; boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true, bins=autocomputed, width=NULL, right=false - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_histogram($1, $2, $3, $4, 1, $5, $6, $7)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="bins" type="integer"/>
            <parameter mode="IN" name="width" type="double precision[]"/>
            <parameter mode="IN" name="right" type="boolean"/>
            <parameter mode="OUT" name="min" type="double precision"/>
            <parameter mode="OUT" name="max" type="double precision"/>
            <parameter mode="OUT" name="count" type="bigint"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, &quot;right&quot; boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastertable, rastercolumn, nband, bins, right - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_histogram($1, $2, $3, TRUE, 1, $4, NULL, $5)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="bins" type="integer"/>
            <parameter mode="IN" name="right" type="boolean"/>
            <parameter mode="OUT" name="min" type="double precision"/>
            <parameter mode="OUT" name="max" type="double precision"/>
            <parameter mode="OUT" name="count" type="bigint"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, width double precision[] DEFAULT NULL::double precision[], &quot;right&quot; boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastertable, rastercolumn, nband=1, bins, width=NULL, right=false - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_histogram($1, $2, $3, TRUE, 1, $4, $5, $6)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="bins" type="integer"/>
            <parameter mode="IN" name="width" type="double precision[]"/>
            <parameter mode="IN" name="right" type="boolean"/>
            <parameter mode="OUT" name="min" type="double precision"/>
            <parameter mode="OUT" name="max" type="double precision"/>
            <parameter mode="OUT" name="count" type="bigint"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, bins integer, &quot;right&quot; boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastertable, rastercolumn, nband, exclude_nodata_value, bins, right - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_histogram($1, $2, $3, $4, 1, $5, NULL, $6)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="bins" type="integer"/>
            <parameter mode="IN" name="right" type="boolean"/>
            <parameter mode="OUT" name="min" type="double precision"/>
            <parameter mode="OUT" name="max" type="double precision"/>
            <parameter mode="OUT" name="count" type="bigint"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_interiorringn(geometry, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_polygon, n - Return the Nth interior linestring ring of the polygon geometry. Return NULL if the geometry is not a polygon or the given N is out of range.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_interiorringn_polygon]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_interpolatepoint(line geometry, point geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: line, point - Return the value of the measure dimension of a geometry at the point closed to the provided point.]]></comment>
         <definition language="c"><![CDATA[ST_InterpolatePoint]]></definition>
         <parameters>
            <parameter mode="IN" name="line" type="geometry"/>
            <parameter mode="IN" name="point" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersection(geography, geography)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geogA, geogB - (T)Returns a geometry that represents the shared portion of geomA and geomB.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.geography(public.ST_Transform(public.ST_Intersection(public.ST_Transform(public.geometry($1), public._ST_BestSRID($1, $2)), public.ST_Transform(public.geometry($2), public._ST_BestSRID($1, $2))), 4326))]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersection(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, geomB - (T)Returns a geometry that represents the shared portion of geomA and geomB.]]></comment>
         <definition language="c"><![CDATA[intersection]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersection(geomin geometry, rast raster, band integer DEFAULT 1)" returnType="SETOF geomval" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		intersects boolean := FALSE;
	BEGIN
		intersects := public.ST_Intersects(geomin, rast, band);
		IF intersects THEN
			-- Return the intersections of the geometry with the vectorized parts of
			-- the raster and the values associated with those parts, if really their
			-- intersection is not empty.
			RETURN QUERY
				SELECT
					intgeom,
					val
				FROM (
					SELECT
						public.ST_Intersection((gv).geom, geomin) AS intgeom,
						(gv).val
					FROM public.ST_DumpAsPolygons(rast, band) gv
					WHERE public.ST_Intersects((gv).geom, geomin)
				) foo
				WHERE NOT public.ST_IsEmpty(intgeom);
		ELSE
			-- If the geometry does not intersect with the raster, return an empty
			-- geometry and a null value
			RETURN QUERY
				SELECT
					emptygeom,
					NULL::float8
				FROM public.ST_GeomCollFromText('GEOMETRYCOLLECTION EMPTY', ST_SRID($1)) emptygeom;
		END IF;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="geomin" type="geometry"/>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersection(rast raster, band integer, geomin geometry)" returnType="SETOF geomval" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Intersection($3, $1, $2)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="geomin" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersection(rast raster, geomin geometry)" returnType="SETOF geomval" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Intersection($2, $1, 1)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="geomin" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.st_intersection($1, $2, $3, $4, 'BOTH', ARRAY[$5, $5])]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="band1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="band2" type="integer"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision[])" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.st_intersection($1, $2, $3, $4, 'BOTH', $5)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="band1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="band2" type="integer"/>
            <parameter mode="IN" name="nodataval" type="double precision[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text DEFAULT 'BOTH'::text, nodataval double precision[] DEFAULT NULL::double precision[])" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		rtn public.raster;
		_returnband text;
		newnodata1 float8;
		newnodata2 float8;
	BEGIN
		IF ST_SRID(rast1) != ST_SRID(rast2) THEN
			RAISE EXCEPTION 'The two rasters do not have the same SRID';
		END IF;

		newnodata1 := coalesce(nodataval[1], ST_BandNodataValue(rast1, band1), ST_MinPossibleValue(public.ST_BandPixelType(rast1, band1)));
		newnodata2 := coalesce(nodataval[2], ST_BandNodataValue(rast2, band2), ST_MinPossibleValue(public.ST_BandPixelType(rast2, band2)));

		_returnband := upper(returnband);

		rtn := NULL;
		CASE
			WHEN _returnband = 'BAND1' THEN
				rtn := public.ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast1.val]', public.ST_BandPixelType(rast1, band1), 'INTERSECTION', newnodata1::text, newnodata1::text, newnodata1);
				rtn := public.ST_SetBandNodataValue(rtn, 1, newnodata1);
			WHEN _returnband = 'BAND2' THEN
				rtn := public.ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast2.val]', public.ST_BandPixelType(rast2, band2), 'INTERSECTION', newnodata2::text, newnodata2::text, newnodata2);
				rtn := public.ST_SetBandNodataValue(rtn, 1, newnodata2);
			WHEN _returnband = 'BOTH' THEN
				rtn := public.ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast1.val]', public.ST_BandPixelType(rast1, band1), 'INTERSECTION', newnodata1::text, newnodata1::text, newnodata1);
				rtn := ST_SetBandNodataValue(rtn, 1, newnodata1);
				rtn := ST_AddBand(rtn, ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast2.val]', public.ST_BandPixelType(rast2, band2), 'INTERSECTION', newnodata2::text, newnodata2::text, newnodata2));
				rtn := ST_SetBandNodataValue(rtn, 2, newnodata2);
			ELSE
				RAISE EXCEPTION 'Unknown value provided for returnband: %', returnband;
				RETURN NULL;
		END CASE;

		RETURN rtn;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="band1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="band2" type="integer"/>
            <parameter mode="IN" name="returnband" type="text"/>
            <parameter mode="IN" name="nodataval" type="double precision[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text, nodataval double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.st_intersection($1, $2, $3, $4, $5, ARRAY[$6, $6])]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="band1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="band2" type="integer"/>
            <parameter mode="IN" name="returnband" type="text"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersection(rast1 raster, rast2 raster, nodataval double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.st_intersection($1, 1, $2, 1, 'BOTH', ARRAY[$3, $3])]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersection(rast1 raster, rast2 raster, nodataval double precision[])" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.st_intersection($1, 1, $2, 1, 'BOTH', $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nodataval" type="double precision[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersection(rast1 raster, rast2 raster, returnband text DEFAULT 'BOTH'::text, nodataval double precision[] DEFAULT NULL::double precision[])" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.st_intersection($1, 1, $2, 1, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="returnband" type="text"/>
            <parameter mode="IN" name="nodataval" type="double precision[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersection(rast1 raster, rast2 raster, returnband text, nodataval double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.st_intersection($1, 1, $2, 1, $3, ARRAY[$4, $4])]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="returnband" type="text"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersection(text, text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Intersection($1::public.geometry, $2::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersects(geography, geography)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geogA, geogB - Returns TRUE if the Geometries/Geography "spatially intersect in 2D" - (share any portion of space) and FALSE if they dont (they are Disjoint). For geography -- tolerance is 0.00001 meters (so any points that close are considered to intersect)]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) $2 AND public._ST_Distance($1, $2, 0.0, false) < 0.00001]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersects(geom geometry, rast raster, nband integer DEFAULT NULL::integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geommin, rast, nband=NULL - Return true if raster rastA spatially intersects raster rastB.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) $2::public.geometry AND public._st_intersects($1, $2, $3);]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersects(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, geomB - Returns TRUE if the Geometries/Geography "spatially intersect in 2D" - (share any portion of space) and FALSE if they dont (they are Disjoint). For geography -- tolerance is 0.00001 meters (so any points that close are considered to intersect)]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) $2 AND public._ST_Intersects($1,$2)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersects(rast raster, geom geometry, nband integer DEFAULT NULL::integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, geommin, nband=NULL - Return true if raster rastA spatially intersects raster rastB.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1::public.geometry OPERATOR(public.&&) $2 AND public._st_intersects($2, $1, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="nband" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersects(rast raster, nband integer, geom geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, geommin - Return true if raster rastA spatially intersects raster rastB.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1::public.geometry OPERATOR(public.&&) $3 AND public._st_intersects($3, $1, $2)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="geom" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if raster rastA spatially intersects raster rastB.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_intersects(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._st_intersects($1, $2, $3, $4) END]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="nband1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nband2" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersects(rast1 raster, rast2 raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, rastB - Return true if raster rastA spatially intersects raster rastB.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.st_intersects($1, NULL::integer, $2, NULL::integer)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="rast2" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_intersects(text, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Intersects($1::public.geometry, $2::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_invdistweight4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		_value double precision[][][];
		ndims int;

		k double precision DEFAULT 1.;
		_k double precision DEFAULT 1.;
		z double precision[];
		d double precision[];
		_d double precision;
		z0 double precision;

		_z integer;
		x integer;
		y integer;

		cx integer;
		cy integer;
		cv double precision;
		cw double precision DEFAULT NULL;

		w integer;
		h integer;
		max_dx double precision;
		max_dy double precision;
	BEGIN
--		RAISE NOTICE 'value = %', value;
--		RAISE NOTICE 'userargs = %', userargs;

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		_z := array_lower(_value, 1);

		-- width and height (0-based)
		h := array_upper(_value, 2) - array_lower(_value, 2);
		w := array_upper(_value, 3) - array_lower(_value, 3);

		-- max distance from center pixel
		max_dx := w / 2;
		max_dy := h / 2;
--		RAISE NOTICE 'max_dx, max_dy = %, %', max_dx, max_dy;

		-- correct width and height (1-based)
		w := w + 1;
		h := h + 1;
--		RAISE NOTICE 'w, h = %, %', w, h;

		-- width and height should be odd numbers
		IF w % 2. != 1 THEN
			RAISE EXCEPTION 'Width of neighborhood array does not permit for a center pixel';
		END IF;
		IF h % 2. != 1 THEN
			RAISE EXCEPTION 'Height of neighborhood array does not permit for a center pixel';
		END IF;

		-- center pixel's coordinates
		cy := max_dy + array_lower(_value, 2);
		cx := max_dx + array_lower(_value, 3);
--		RAISE NOTICE 'cx, cy = %, %', cx, cy;

		-- if userargs provided, only use the first two args
		IF userargs IS NOT NULL AND array_ndims(userargs) = 1 THEN
			-- first arg is power factor
			k := userargs[array_lower(userargs, 1)]::double precision;
			IF k IS NULL THEN
				k := _k;
			ELSEIF k < 0. THEN
				RAISE NOTICE 'Power factor (< 0) must be between 0 and 1.  Defaulting to 0';
				k := 0.;
			ELSEIF k > 1. THEN
				RAISE NOTICE 'Power factor (> 1) must be between 0 and 1.  Defaulting to 1';
				k := 1.;
			END IF;

			-- second arg is what to do if center pixel has a value
			-- this will be a weight to apply for the center pixel
			IF array_length(userargs, 1) > 1 THEN
				cw := abs(userargs[array_lower(userargs, 1) + 1]::double precision);
				IF cw IS NOT NULL THEN
					IF cw < 0. THEN
						RAISE NOTICE 'Weight (< 0) of center pixel value must be between 0 and 1.  Defaulting to 0';
						cw := 0.;
					ELSEIF cw > 1 THEN
						RAISE NOTICE 'Weight (> 1) of center pixel value must be between 0 and 1.  Defaulting to 1';
						cw := 1.;
					END IF;
				END IF;
			END IF;
		END IF;
--		RAISE NOTICE 'k = %', k;
		k = abs(k) * -1;

		-- center pixel value
		cv := _value[_z][cy][cx];

		-- check to see if center pixel has value
--		RAISE NOTICE 'cw = %', cw;
		IF cw IS NULL AND cv IS NOT NULL THEN
			RETURN cv;
		END IF;

		FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
			FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
--				RAISE NOTICE 'value[%][%][%] = %', _z, y, x, _value[_z][y][x];

				-- skip NODATA values and center pixel
				IF _value[_z][y][x] IS NULL OR (x = cx AND y = cy) THEN
					CONTINUE;
				END IF;

				z := z || _value[_z][y][x];

				-- use pythagorean theorem
				_d := sqrt(power(cx - x, 2) + power(cy - y, 2));
--				RAISE NOTICE 'distance = %', _d;

				d := d || _d;
			END LOOP;
		END LOOP;
--		RAISE NOTICE 'z = %', z;
--		RAISE NOTICE 'd = %', d;

		-- neighborhood is NODATA
		IF z IS NULL OR array_length(z, 1) < 1 THEN
			-- center pixel has value
			IF cv IS NOT NULL THEN
				RETURN cv;
			ELSE
				RETURN NULL;
			END IF;
		END IF;

		z0 := 0;
		_d := 0;
		FOR x IN array_lower(z, 1)..array_upper(z, 1) LOOP
			d[x] := power(d[x], k);
			z[x] := z[x] * d[x];
			_d := _d + d[x];
			z0 := z0 + z[x];
		END LOOP;
		z0 := z0 / _d;
--		RAISE NOTICE 'z0 = %', z0;

		-- apply weight for center pixel if center pixel has value
		IF cv IS NOT NULL THEN
			z0 := (cw * cv) + ((1 - cw) * z0);
--			RAISE NOTICE '*z0 = %', z0;
		END IF;

		RETURN z0;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="value" type="double precision[]"/>
            <parameter mode="IN" name="pos" type="integer[]"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isclosed(geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g - Returns TRUE if the LINESTRINGs start and end points are coincident. For Polyhedral surface is closed (volumetric).]]></comment>
         <definition language="c"><![CDATA[LWGEOM_isclosed]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_iscollection(geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g - Returns TRUE if the argument is a collection (MULTI*, GEOMETRYCOLLECTION, ...)]]></comment>
         <definition language="c"><![CDATA[ST_IsCollection]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_iscoveragetile(rast raster, coverage raster, tilewidth integer, tileheight integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		_rastmeta record;
		_covmeta record;
		cr record;
		max integer[];
		tile integer[];
		edge integer[];
	BEGIN
		IF NOT public.ST_SameAlignment(rast, coverage) THEN
			RAISE NOTICE 'Raster and coverage are not aligned';
			RETURN FALSE;
		END IF;

		_rastmeta := public.ST_Metadata(rast);
		_covmeta := public.ST_Metadata(coverage);

		-- get coverage grid coordinates of upper-left of rast
		cr := public.ST_WorldToRasterCoord(coverage, _rastmeta.upperleftx, _rastmeta.upperlefty);

		-- rast is not part of coverage
		IF
			(cr.columnx < 1 OR cr.columnx > _covmeta.width) OR
			(cr.rowy < 1 OR cr.rowy > _covmeta.height)
		THEN
			RAISE NOTICE 'Raster is not in the coverage';
			RETURN FALSE;
		END IF;

		-- rast isn't on the coverage's grid
		IF
			((cr.columnx - 1) % tilewidth != 0) OR
			((cr.rowy - 1) % tileheight != 0)
		THEN
			RAISE NOTICE 'Raster is not aligned to tile grid of coverage';
			RETURN FALSE;
		END IF;

		-- max # of tiles on X and Y for coverage
		max[0] := ceil(_covmeta.width::double precision / tilewidth::double precision)::integer;
		max[1] := ceil(_covmeta.height::double precision / tileheight::double precision)::integer;

		-- tile # of rast in coverge
		tile[0] := (cr.columnx / tilewidth) + 1;
		tile[1] := (cr.rowy / tileheight) + 1;

		-- inner tile
		IF tile[0] < max[0] AND tile[1] < max[1] THEN
			IF
				(_rastmeta.width != tilewidth) OR
				(_rastmeta.height != tileheight)
			THEN
				RAISE NOTICE 'Raster width/height is invalid for interior tile of coverage';
				RETURN FALSE;
			ELSE
				RETURN TRUE;
			END IF;
		END IF;

		-- edge tile

		-- edge tile may have same size as inner tile
		IF
			(_rastmeta.width = tilewidth) AND
			(_rastmeta.height = tileheight)
		THEN
			RETURN TRUE;
		END IF;

		-- get edge tile width and height
		edge[0] := _covmeta.width - ((max[0] - 1) * tilewidth);
		edge[1] := _covmeta.height - ((max[1] - 1) * tileheight);

		-- edge tile not of expected tile size
		-- right and bottom
		IF tile[0] = max[0] AND tile[1] = max[1] THEN
			IF
				_rastmeta.width != edge[0] OR
				_rastmeta.height != edge[1]
			THEN
				RAISE NOTICE 'Raster width/height is invalid for right-most AND bottom-most tile of coverage';
				RETURN FALSE;
			END IF;
		ELSEIF tile[0] = max[0] THEN
			IF
				_rastmeta.width != edge[0] OR
				_rastmeta.height != tileheight
			THEN
				RAISE NOTICE 'Raster width/height is invalid for right-most tile of coverage';
				RETURN FALSE;
			END IF;
		ELSE
			IF
				_rastmeta.width != tilewidth OR
				_rastmeta.height != edge[1]
			THEN
				RAISE NOTICE 'Raster width/height is invalid for bottom-most tile of coverage';
				RETURN FALSE;
			END IF;
		END IF;

		RETURN TRUE;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="coverage" type="raster"/>
            <parameter mode="IN" name="tilewidth" type="integer"/>
            <parameter mode="IN" name="tileheight" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isempty(geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Returns true if this Geometry is an empty geometrycollection, polygon, point etc.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_isempty]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isempty(rast raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns true if the raster is empty (width = 0 and height = 0). Otherwise, returns false.]]></comment>
         <definition language="c"><![CDATA[RASTER_isEmpty]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_ispolygonccw(geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Returns true if all exterior rings are oriented counter-clockwise and all interior rings are oriented clockwise.]]></comment>
         <definition language="c"><![CDATA[ST_IsPolygonCCW]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_ispolygoncw(geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Returns true if all exterior rings are oriented clockwise and all interior rings are oriented counter-clockwise.]]></comment>
         <definition language="c"><![CDATA[ST_IsPolygonCW]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isring(geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g - Returns TRUE if this LINESTRING is both closed and simple.]]></comment>
         <definition language="c"><![CDATA[isring]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_issimple(geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Returns (TRUE) if this Geometry has no anomalous geometric points, such as self intersection or self tangency.]]></comment>
         <definition language="c"><![CDATA[issimple]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isvalid(geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g - Returns true if the ST_Geometry is well formed.]]></comment>
         <definition language="c"><![CDATA[isvalid]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isvalid(geometry, integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g, flags - Returns true if the ST_Geometry is well formed.]]></comment>
         <definition language="sql"><![CDATA[SELECT (public.ST_isValidDetail($1, $2)).valid]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isvaliddetail(geometry)" returnType="valid_detail" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Returns a valid_detail (valid,reason,location) row stating if a geometry is valid or not and if not valid, a reason why and a location where.]]></comment>
         <definition language="c"><![CDATA[isvaliddetail]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isvaliddetail(geometry, integer)" returnType="valid_detail" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, flags - Returns a valid_detail (valid,reason,location) row stating if a geometry is valid or not and if not valid, a reason why and a location where.]]></comment>
         <definition language="c"><![CDATA[isvaliddetail]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isvalidreason(geometry)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Returns text stating if a geometry is valid or not and if not valid, a reason why.]]></comment>
         <definition language="c"><![CDATA[isvalidreason]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isvalidreason(geometry, integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, flags - Returns text stating if a geometry is valid or not and if not valid, a reason why.]]></comment>
         <definition language="sql"><![CDATA[SELECT CASE WHEN valid THEN 'Valid Geometry' ELSE reason END FROM (
	SELECT (public.ST_isValidDetail($1, $2)).*
) foo]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_isvalidtrajectory(geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: line - Returns true if the geometry is a valid trajectory.]]></comment>
         <definition language="c"><![CDATA[ST_IsValidTrajectory]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_length(geog geography, use_spheroid boolean DEFAULT true)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geog, use_spheroid=true - Returns the 2D length of the geometry if it is a LineString or MultiLineString. geometry are in units of spatial reference and geography are in meters (default spheroid)]]></comment>
         <definition language="c"><![CDATA[geography_length]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="use_spheroid" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_length(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_2dlinestring - Returns the 2D length of the geometry if it is a LineString or MultiLineString. geometry are in units of spatial reference and geography are in meters (default spheroid)]]></comment>
         <definition language="c"><![CDATA[LWGEOM_length2d_linestring]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_length(text)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_Length($1::public.geometry);]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_length2d(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_2dlinestring - Returns the 2-dimensional length of the geometry if it is a linestring or multi-linestring. This is an alias for ST_Length]]></comment>
         <definition language="c"><![CDATA[LWGEOM_length2d_linestring]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_length2d_spheroid(geometry, spheroid)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_geometry, a_spheroid - Calculates the 2D length/perimeter of a geometry on an ellipsoid. This is useful if the coordinates of the geometry are in longitude/latitude and a length is desired without reprojection.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_Length2D_Spheroid', 'ST_Length2DSpheroid', '2.2.0');
    SELECT public.ST_Length2DSpheroid($1,$2);]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="spheroid"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_length2dspheroid(geometry, spheroid)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_length2d_ellipsoid]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="spheroid"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_length_spheroid(geometry, spheroid)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_Length_Spheroid', 'ST_LengthSpheroid', '2.2.0');
    SELECT public.ST_LengthSpheroid($1,$2);]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="spheroid"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_lengthspheroid(geometry, spheroid)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_geometry, a_spheroid - Calculates the 2D or 3D length/perimeter of a geometry on an ellipsoid. This is useful if the coordinates of the geometry are in longitude/latitude and a length is desired without reprojection.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_length_ellipsoid_linestring]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="spheroid"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_line_interpolate_point(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_Line_Interpolate_Point', 'ST_LineInterpolatePoint', '2.1.0');
    SELECT public.ST_LineInterpolatePoint($1, $2);]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_line_locate_point(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_Line_Locate_Point', 'ST_LineLocatePoint', '2.1.0');
     SELECT public.ST_LineLocatePoint($1, $2);]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_line_substring(geometry, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_Line_Substring', 'ST_LineSubstring', '2.1.0');
     SELECT public.ST_LineSubstring($1, $2, $3);]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linecrossingdirection(geom1 geometry, geom2 geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: linestringA, linestringB - Given 2 linestrings, returns a number between -3 and 3 denoting what kind of crossing behavior. 0 is no crossing.]]></comment>
         <definition language="sql"><![CDATA[SELECT CASE WHEN NOT $1 OPERATOR(public.&&) $2 THEN 0 ELSE public._ST_LineCrossingDirection($1,$2) END]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linefromencodedpolyline(text, integer DEFAULT 5)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: polyline, precision=5 - Creates a LineString from an Encoded Polyline.]]></comment>
         <definition language="c"><![CDATA[line_from_encoded_polyline]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linefrommultipoint(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: aMultiPoint - Creates a LineString from a MultiPoint geometry.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_line_from_mpoint]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linefromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT - Makes a Geometry from WKT representation with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'LINESTRING'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linefromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT, srid - Makes a Geometry from WKT representation with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'LINESTRING'
	THEN public.ST_GeomFromText($1,$2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linefromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKB - Makes a LINESTRING from WKB with the given SRID]]></comment>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'LINESTRING'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linefromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKB, srid - Makes a LINESTRING from WKB with the given SRID]]></comment>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_lineinterpolatepoint(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_linestring, a_fraction - Returns a point interpolated along a line. Second argument is a float8 between 0 and 1 representing fraction of total length of linestring the point has to be located.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_line_interpolate_point]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_lineinterpolatepoints(geometry, double precision, repeat boolean DEFAULT true)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_linestring, a_fraction, repeat - Returns one or more points interpolated along a line.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_line_interpolate_point]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" name="repeat" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linelocatepoint(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_linestring, a_point - Returns a float between 0 and 1 representing the location of the closest point on LineString to the given Point, as a fraction of total 2d line length.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_line_locate_point]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linemerge(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: amultilinestring - Return a (set of) LineString(s) formed by sewing together a MULTILINESTRING.]]></comment>
         <definition language="c"><![CDATA[linemerge]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linestringfromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKB - Makes a geometry from WKB with the given SRID.]]></comment>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'LINESTRING'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linestringfromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKB, srid - Makes a geometry from WKB with the given SRID.]]></comment>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linesubstring(geometry, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_linestring, startfraction, endfraction - Return a linestring being a substring of the input one starting and ending at the given fractions of total 2d length. Second and third arguments are float8 values between 0 and 1.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_line_substring]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_linetocurve(geometry geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomANoncircular - Converts a LINESTRING/POLYGON to a CIRCULARSTRING, CURVEPOLYGON]]></comment>
         <definition language="c"><![CDATA[LWGEOM_line_desegmentize]]></definition>
         <parameters>
            <parameter mode="IN" name="geometry" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_locate_along_measure(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_locate_between_measures($1, $2, $2)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_locate_between_measures(geometry, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_locate_between_m]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_locatealong(geometry geometry, measure double precision, leftrightoffset double precision DEFAULT 0.0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: ageom_with_measure, a_measure, offset - Return a derived geometry collection value with elements that match the specified measure. Polygonal elements are not supported.]]></comment>
         <definition language="c"><![CDATA[ST_LocateAlong]]></definition>
         <parameters>
            <parameter mode="IN" name="geometry" type="geometry"/>
            <parameter mode="IN" name="measure" type="double precision"/>
            <parameter mode="IN" name="leftrightoffset" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_locatebetween(geometry geometry, frommeasure double precision, tomeasure double precision, leftrightoffset double precision DEFAULT 0.0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, measure_start, measure_end, offset - Return a derived geometry collection value with elements that match the specified range of measures inclusively. Polygonal elements are not supported.]]></comment>
         <definition language="c"><![CDATA[ST_LocateBetween]]></definition>
         <parameters>
            <parameter mode="IN" name="geometry" type="geometry"/>
            <parameter mode="IN" name="frommeasure" type="double precision"/>
            <parameter mode="IN" name="tomeasure" type="double precision"/>
            <parameter mode="IN" name="leftrightoffset" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_locatebetweenelevations(geometry geometry, fromelevation double precision, toelevation double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom_mline, elevation_start, elevation_end - Return a derived geometry (collection) value with elements that intersect the specified range of elevations inclusively. Only 3D, 4D LINESTRINGS and MULTILINESTRINGS are supported.]]></comment>
         <definition language="c"><![CDATA[ST_LocateBetweenElevations]]></definition>
         <parameters>
            <parameter mode="IN" name="geometry" type="geometry"/>
            <parameter mode="IN" name="fromelevation" type="double precision"/>
            <parameter mode="IN" name="toelevation" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_longestline(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - Returns the 2-dimensional longest line points of two geometries. The function will only return the first longest line if more than one, that the function finds. The line returned will always start in g1 and end in g2. The length of the line this function returns will always be the same as st_maxdistance returns for g1 and g2.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_LongestLine(public.ST_ConvexHull($1), public.ST_ConvexHull($2))]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_m(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_point - Return the M coordinate of the point, or NULL if not available. Input must be a point.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_m_point]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makebox2d(geom1 geometry, geom2 geometry)" returnType="box2d" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: pointLowLeft, pointUpRight - Creates a BOX2D defined by the given point geometries.]]></comment>
         <definition language="c"><![CDATA[BOX2D_construct]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makeemptycoverage(tilewidth integer, tileheight integer, width integer, height integer, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision, srid integer DEFAULT 0)" returnType="SETOF raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: tilewidth, tileheight, width, height, upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid=unknown - Cover georeferenced area with a grid of empty raster tiles.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
        ulx double precision;  -- upper left x of raster
        uly double precision;  -- upper left y of raster
        rw int;                -- raster width (may change at edges)
        rh int;                -- raster height (may change at edges)
        x int;                 -- x index of coverage
        y int;                 -- y index of coverage
        template public.raster;       -- an empty template raster, where each cell
                               -- represents a tile in the coverage
        minY double precision;
        maxX double precision;
    BEGIN
        template := public.ST_MakeEmptyRaster(
            ceil(width::float8/tilewidth)::int,
            ceil(height::float8/tileheight)::int,
            upperleftx,
            upperlefty,
            tilewidth * scalex,
            tileheight * scaley,
            tileheight * skewx,
            tilewidth * skewy,
            srid
        );

        FOR y IN 1..st_height(template) LOOP
            maxX := public.ST_RasterToWorldCoordX(template, 1, y) + width * scalex;
            FOR x IN 1..st_width(template) LOOP
                minY := public.ST_RasterToWorldCoordY(template, x, 1) + height * scaley;
                uly := public.ST_RasterToWorldCoordY(template, x, y);
                IF uly + (tileheight * scaley) < minY THEN
                    --raise notice 'uly, minY: %, %', uly, minY;
                    rh := ceil((minY - uly)/scaleY)::int;
                ELSE
                    rh := tileheight;
                END IF;

                ulx := public.ST_RasterToWorldCoordX(template, x, y);
                IF ulx + (tilewidth * scalex) > maxX THEN
                    --raise notice 'ulx, maxX: %, %', ulx, maxX;
                    rw := ceil((maxX - ulx)/scaleX)::int;
                ELSE
                    rw := tilewidth;
                END IF;

                RETURN NEXT public.ST_MakeEmptyRaster(rw, rh, ulx, uly, scalex, scaley, skewx, skewy, srid);
            END LOOP;
        END LOOP;
    END;]]></definition>
         <parameters>
            <parameter mode="IN" name="tilewidth" type="integer"/>
            <parameter mode="IN" name="tileheight" type="integer"/>
            <parameter mode="IN" name="width" type="integer"/>
            <parameter mode="IN" name="height" type="integer"/>
            <parameter mode="IN" name="upperleftx" type="double precision"/>
            <parameter mode="IN" name="upperlefty" type="double precision"/>
            <parameter mode="IN" name="scalex" type="double precision"/>
            <parameter mode="IN" name="scaley" type="double precision"/>
            <parameter mode="IN" name="skewx" type="double precision"/>
            <parameter mode="IN" name="skewy" type="double precision"/>
            <parameter mode="IN" name="srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makeemptyraster(rast raster)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns an empty raster (having no bands) of given dimensions (width & height), upperleft X and Y, pixel size and rotation (scalex, scaley, skewx & skewy) and reference system (srid). If a raster is passed in, returns a new raster with the same size, alignment and SRID. If srid is left out, the spatial ref is set to unknown (0).]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
			w int;
			h int;
			ul_x double precision;
			ul_y double precision;
			scale_x double precision;
			scale_y double precision;
			skew_x double precision;
			skew_y double precision;
			sr_id int;
		BEGIN
			SELECT width, height, upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid INTO w, h, ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id FROM public.ST_Metadata(rast);
			RETURN  public.ST_makeemptyraster(w, h, ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id);
		END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, pixelsize double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: width, height, upperleftx, upperlefty, pixelsize - Returns an empty raster (having no bands) of given dimensions (width & height), upperleft X and Y, pixel size and rotation (scalex, scaley, skewx & skewy) and reference system (srid). If a raster is passed in, returns a new raster with the same size, alignment and SRID. If srid is left out, the spatial ref is set to unknown (0).]]></comment>
         <definition language="sql"><![CDATA[SELECT  public.ST_makeemptyraster($1, $2, $3, $4, $5, -($5), 0, 0, public.ST_SRID('POINT(0 0)'::public.geometry))]]></definition>
         <parameters>
            <parameter mode="IN" name="width" type="integer"/>
            <parameter mode="IN" name="height" type="integer"/>
            <parameter mode="IN" name="upperleftx" type="double precision"/>
            <parameter mode="IN" name="upperlefty" type="double precision"/>
            <parameter mode="IN" name="pixelsize" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision, srid integer DEFAULT 0)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: width, height, upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid=unknown - Returns an empty raster (having no bands) of given dimensions (width & height), upperleft X and Y, pixel size and rotation (scalex, scaley, skewx & skewy) and reference system (srid). If a raster is passed in, returns a new raster with the same size, alignment and SRID. If srid is left out, the spatial ref is set to unknown (0).]]></comment>
         <definition language="c"><![CDATA[RASTER_makeEmpty]]></definition>
         <parameters>
            <parameter mode="IN" name="width" type="integer"/>
            <parameter mode="IN" name="height" type="integer"/>
            <parameter mode="IN" name="upperleftx" type="double precision"/>
            <parameter mode="IN" name="upperlefty" type="double precision"/>
            <parameter mode="IN" name="scalex" type="double precision"/>
            <parameter mode="IN" name="scaley" type="double precision"/>
            <parameter mode="IN" name="skewx" type="double precision"/>
            <parameter mode="IN" name="skewy" type="double precision"/>
            <parameter mode="IN" name="srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makeenvelope(double precision, double precision, double precision, double precision, integer DEFAULT 0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: xmin, ymin, xmax, ymax, srid=unknown - Creates a rectangular Polygon formed from the given minimums and maximums. Input values must be in SRS specified by the SRID.]]></comment>
         <definition language="c"><![CDATA[ST_MakeEnvelope]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makeline(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom1, geom2 - Creates a Linestring from point, multipoint, or line geometries.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_makeline]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makeline(geometry)" returnType="geometry" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: geoms - Creates a Linestring from point, multipoint, or line geometries.]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makeline(geometry[])" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geoms_array - Creates a Linestring from point, multipoint, or line geometries.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_makeline_garray]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makepoint(double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: x, y - Creates a 2D, 3DZ or 4D point geometry.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_makepoint]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makepoint(double precision, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: x, y, z - Creates a 2D, 3DZ or 4D point geometry.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_makepoint]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makepoint(double precision, double precision, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: x, y, z, m - Creates a 2D, 3DZ or 4D point geometry.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_makepoint]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makepointm(double precision, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: x, y, m - Creates a point geometry with an x y and m coordinate.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_makepoint3dm]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makepolygon(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: linestring - Creates a Polygon formed by the given shell. Input geometries must be closed LINESTRINGS.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_makepoly]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makepolygon(geometry, geometry[])" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: outerlinestring, interiorlinestrings - Creates a Polygon formed by the given shell. Input geometries must be closed LINESTRINGS.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_makepoly]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_makevalid(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: input - Attempts to make an invalid geometry valid without losing vertices.]]></comment>
         <definition language="c"><![CDATA[ST_MakeValid]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, mask double precision[], weighted boolean, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, customextent raster DEFAULT NULL::raster, VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[select public._ST_mapalgebra(ARRAY[ROW($1,$2)]::rastbandarg[],$3,$6,NULL::integer,NULL::integer,$7,$8,$4,$5,VARIADIC $9)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="callbackfunc" type="regprocedure"/>
            <parameter mode="IN" name="mask" type="double precision[]"/>
            <parameter mode="IN" name="weighted" type="boolean"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="extenttype" type="text"/>
            <parameter mode="IN" name="customextent" type="raster"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'FIRST'::text, customextent raster DEFAULT NULL::raster, distancex integer DEFAULT 0, distancey integer DEFAULT 0, VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_MapAlgebra(ARRAY[ROW($1, $2)]::rastbandarg[], $3, $4, $7, $8, $5, $6,NULL::double precision [],NULL::boolean, VARIADIC $9)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="callbackfunc" type="regprocedure"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="extenttype" type="text"/>
            <parameter mode="IN" name="customextent" type="raster"/>
            <parameter mode="IN" name="distancex" type="integer"/>
            <parameter mode="IN" name="distancey" type="integer"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebra(rast raster, nband integer, pixeltype text, expression text, nodataval double precision DEFAULT NULL::double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_mapalgebra(ARRAY[ROW($1, $2)]::rastbandarg[], $4, $3, 'FIRST', $5::text)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="expression" type="text"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebra(rast raster, nband integer[], callbackfunc regprocedure, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'FIRST'::text, customextent raster DEFAULT NULL::raster, distancex integer DEFAULT 0, distancey integer DEFAULT 0, VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		x int;
		argset rastbandarg[];
	BEGIN
		IF $2 IS NULL OR array_ndims($2) < 1 OR array_length($2, 1) < 1 THEN
			RAISE EXCEPTION 'Populated 1D array must be provided for nband';
			RETURN NULL;
		END IF;

		FOR x IN array_lower($2, 1)..array_upper($2, 1) LOOP
			IF $2[x] IS NULL THEN
				CONTINUE;
			END IF;

			argset := argset || ROW($1, $2[x])::rastbandarg;
		END LOOP;

		IF array_length(argset, 1) < 1 THEN
			RAISE EXCEPTION 'Populated 1D array must be provided for nband';
			RETURN NULL;
		END IF;

		RETURN public._ST_MapAlgebra(argset, $3, $4, $7, $8, $5, $6,NULL::double precision [],NULL::boolean, VARIADIC $9);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer[]"/>
            <parameter mode="IN" name="callbackfunc" type="regprocedure"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="extenttype" type="text"/>
            <parameter mode="IN" name="customextent" type="raster"/>
            <parameter mode="IN" name="distancex" type="integer"/>
            <parameter mode="IN" name="distancey" type="integer"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebra(rast raster, pixeltype text, expression text, nodataval double precision DEFAULT NULL::double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_mapalgebra($1, 1, $2, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="expression" type="text"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebra(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, nodata1expr text DEFAULT NULL::text, nodata2expr text DEFAULT NULL::text, nodatanodataval double precision DEFAULT NULL::double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_mapalgebra(ARRAY[ROW($1, $2), ROW($3, $4)]::rastbandarg[], $5, $6, $7, $8, $9, $10)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="band1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="band2" type="integer"/>
            <parameter mode="IN" name="expression" type="text"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="extenttype" type="text"/>
            <parameter mode="IN" name="nodata1expr" type="text"/>
            <parameter mode="IN" name="nodata2expr" type="text"/>
            <parameter mode="IN" name="nodatanodataval" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebra(rast1 raster, nband1 integer, rast2 raster, nband2 integer, callbackfunc regprocedure, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, customextent raster DEFAULT NULL::raster, distancex integer DEFAULT 0, distancey integer DEFAULT 0, VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_MapAlgebra(ARRAY[ROW($1, $2), ROW($3, $4)]::rastbandarg[], $5, $6, $9, $10, $7, $8,NULL::double precision [],NULL::boolean, VARIADIC $11)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="nband1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nband2" type="integer"/>
            <parameter mode="IN" name="callbackfunc" type="regprocedure"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="extenttype" type="text"/>
            <parameter mode="IN" name="customextent" type="raster"/>
            <parameter mode="IN" name="distancex" type="integer"/>
            <parameter mode="IN" name="distancey" type="integer"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebra(rast1 raster, rast2 raster, expression text, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, nodata1expr text DEFAULT NULL::text, nodata2expr text DEFAULT NULL::text, nodatanodataval double precision DEFAULT NULL::double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_mapalgebra($1, 1, $2, 1, $3, $4, $5, $6, $7, $8)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="expression" type="text"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="extenttype" type="text"/>
            <parameter mode="IN" name="nodata1expr" type="text"/>
            <parameter mode="IN" name="nodata2expr" type="text"/>
            <parameter mode="IN" name="nodatanodataval" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, customextent raster DEFAULT NULL::raster, distancex integer DEFAULT 0, distancey integer DEFAULT 0, VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_MapAlgebra($1, $2, $3, $6, $7, $4, $5,NULL::double precision [],NULL::boolean, VARIADIC $8)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastbandargset" type="rastbandarg[]"/>
            <parameter mode="IN" name="callbackfunc" type="regprocedure"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="extenttype" type="text"/>
            <parameter mode="IN" name="customextent" type="raster"/>
            <parameter mode="IN" name="distancex" type="integer"/>
            <parameter mode="IN" name="distancey" type="integer"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebraexpr(rast raster, band integer, pixeltype text, expression text, nodataval double precision DEFAULT NULL::double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_mapAlgebraExpr]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="expression" type="text"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebraexpr(rast raster, pixeltype text, expression text, nodataval double precision DEFAULT NULL::double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_mapalgebraexpr($1, 1, $2, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="expression" type="text"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebraexpr(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, nodata1expr text DEFAULT NULL::text, nodata2expr text DEFAULT NULL::text, nodatanodataval double precision DEFAULT NULL::double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_mapAlgebra2]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="band1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="band2" type="integer"/>
            <parameter mode="IN" name="expression" type="text"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="extenttype" type="text"/>
            <parameter mode="IN" name="nodata1expr" type="text"/>
            <parameter mode="IN" name="nodata2expr" type="text"/>
            <parameter mode="IN" name="nodatanodataval" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebraexpr(rast1 raster, rast2 raster, expression text, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, nodata1expr text DEFAULT NULL::text, nodata2expr text DEFAULT NULL::text, nodatanodataval double precision DEFAULT NULL::double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_mapalgebraexpr($1, 1, $2, 1, $3, $4, $5, $6, $7, $8)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="expression" type="text"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="extenttype" type="text"/>
            <parameter mode="IN" name="nodata1expr" type="text"/>
            <parameter mode="IN" name="nodata2expr" type="text"/>
            <parameter mode="IN" name="nodatanodataval" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_mapalgebrafct($1, $2, NULL, $3, NULL)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="onerastuserfunc" type="regprocedure"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure, VARIADIC args text[])" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_mapalgebrafct($1, $2, NULL, $3, VARIADIC $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="onerastuserfunc" type="regprocedure"/>
            <parameter mode="VARIADIC" name="args" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_mapalgebrafct($1, $2, $3, $4, NULL)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="onerastuserfunc" type="regprocedure"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[])" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_mapAlgebraFct]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="onerastuserfunc" type="regprocedure"/>
            <parameter mode="VARIADIC" name="args" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebrafct(rast raster, onerastuserfunc regprocedure)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_mapalgebrafct($1, 1, NULL, $2, NULL)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="onerastuserfunc" type="regprocedure"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebrafct(rast raster, onerastuserfunc regprocedure, VARIADIC args text[])" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_mapalgebrafct($1, 1, NULL, $2, VARIADIC $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="onerastuserfunc" type="regprocedure"/>
            <parameter mode="VARIADIC" name="args" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_mapalgebrafct($1, 1, $2, $3, NULL)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="onerastuserfunc" type="regprocedure"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[])" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_mapalgebrafct($1, 1, $2, $3, VARIADIC $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="onerastuserfunc" type="regprocedure"/>
            <parameter mode="VARIADIC" name="args" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebrafct(rast1 raster, band1 integer, rast2 raster, band2 integer, tworastuserfunc regprocedure, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_mapAlgebra2]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="band1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="band2" type="integer"/>
            <parameter mode="IN" name="tworastuserfunc" type="regprocedure"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="extenttype" type="text"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebrafct(rast1 raster, rast2 raster, tworastuserfunc regprocedure, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_mapalgebrafct($1, 1, $2, 1, $3, $4, $5, VARIADIC $6)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="tworastuserfunc" type="regprocedure"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="extenttype" type="text"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mapalgebrafctngb(rast raster, band integer, pixeltype text, ngbwidth integer, ngbheight integer, onerastngbuserfunc regprocedure, nodatamode text, VARIADIC args text[])" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_mapAlgebraFctNgb]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="ngbwidth" type="integer"/>
            <parameter mode="IN" name="ngbheight" type="integer"/>
            <parameter mode="IN" name="onerastngbuserfunc" type="regprocedure"/>
            <parameter mode="IN" name="nodatamode" type="text"/>
            <parameter mode="VARIADIC" name="args" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_max4ma(matrix double precision[], nodatamode text, VARIADIC args text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
        _matrix float[][];
        max float;
    BEGIN
        _matrix := matrix;
        max := '-Infinity'::float;
        FOR x in array_lower(_matrix, 1)..array_upper(_matrix, 1) LOOP
            FOR y in array_lower(_matrix, 2)..array_upper(_matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF NOT nodatamode = 'ignore' THEN
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                IF max < _matrix[x][y] THEN
                    max := _matrix[x][y];
                END IF;
            END LOOP;
        END LOOP;
        RETURN max;
    END;]]></definition>
         <parameters>
            <parameter mode="IN" name="matrix" type="double precision[]"/>
            <parameter mode="IN" name="nodatamode" type="text"/>
            <parameter mode="VARIADIC" name="args" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_max4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		_value double precision[][][];
		max double precision;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		max := '-Infinity'::double precision;

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;

					IF _value[z][y][x] > max THEN
						max := _value[z][y][x];
					END IF;
				END LOOP;
			END LOOP;
		END LOOP;

		IF max = '-Infinity'::double precision THEN
			RETURN NULL;
		END IF;

		RETURN max;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="value" type="double precision[]"/>
            <parameter mode="IN" name="pos" type="integer[]"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_maxdistance(geom1 geometry, geom2 geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - Returns the 2-dimensional largest distance between two geometries in projected units.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_MaxDistance(public.ST_ConvexHull($1), public.ST_ConvexHull($2))]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mean4ma(matrix double precision[], nodatamode text, VARIADIC args text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
        _matrix float[][];
        sum float;
        count float;
    BEGIN
        _matrix := matrix;
        sum := 0;
        count := 0;
        FOR x in array_lower(matrix, 1)..array_upper(matrix, 1) LOOP
            FOR y in array_lower(matrix, 2)..array_upper(matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF nodatamode = 'ignore' THEN
                        _matrix[x][y] := 0;
                    ELSE
                        _matrix[x][y] := nodatamode::float;
                        count := count + 1;
                    END IF;
                ELSE
                    count := count + 1;
                END IF;
                sum := sum + _matrix[x][y];
            END LOOP;
        END LOOP;
        IF count = 0 THEN
            RETURN NULL;
        END IF;
        RETURN sum / count;
    END;]]></definition>
         <parameters>
            <parameter mode="IN" name="matrix" type="double precision[]"/>
            <parameter mode="IN" name="nodatamode" type="text"/>
            <parameter mode="VARIADIC" name="args" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mean4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		_value double precision[][][];
		sum double precision;
		count int;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		sum := 0;
		count := 0;

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;

					sum := sum + _value[z][y][x];
					count := count + 1;
				END LOOP;
			END LOOP;
		END LOOP;

		IF count < 1 THEN
			RETURN NULL;
		END IF;

		RETURN sum / count::double precision;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="value" type="double precision[]"/>
            <parameter mode="IN" name="pos" type="integer[]"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mem_size(geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_Mem_Size', 'ST_MemSize', '2.2.0');
    SELECT public.ST_MemSize($1);]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_memcollect(geometry)" returnType="geometry" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_memsize(geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Returns the amount of space (in bytes) the geometry takes.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_mem_size]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_memsize(raster)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the amount of space (in bytes) the raster takes.]]></comment>
         <definition language="c"><![CDATA[RASTER_memsize]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_memunion(geometry)" returnType="geometry" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: geomfield - Same as ST_Union, only memory-friendly (uses less memory and more processor time).]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_metadata(rast raster, OUT upperleftx double precision, OUT upperlefty double precision, OUT width integer, OUT height integer, OUT scalex double precision, OUT scaley double precision, OUT skewx double precision, OUT skewy double precision, OUT srid integer, OUT numbands integer)" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns basic meta data about a raster object such as pixel size, rotation (skew), upper, lower left, etc.]]></comment>
         <definition language="c"><![CDATA[RASTER_metadata]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="OUT" name="upperleftx" type="double precision"/>
            <parameter mode="OUT" name="upperlefty" type="double precision"/>
            <parameter mode="OUT" name="width" type="integer"/>
            <parameter mode="OUT" name="height" type="integer"/>
            <parameter mode="OUT" name="scalex" type="double precision"/>
            <parameter mode="OUT" name="scaley" type="double precision"/>
            <parameter mode="OUT" name="skewx" type="double precision"/>
            <parameter mode="OUT" name="skewy" type="double precision"/>
            <parameter mode="OUT" name="srid" type="integer"/>
            <parameter mode="OUT" name="numbands" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_min4ma(matrix double precision[], nodatamode text, VARIADIC args text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
        _matrix float[][];
        min float;
    BEGIN
        _matrix := matrix;
        min := 'Infinity'::float;
        FOR x in array_lower(_matrix, 1)..array_upper(_matrix, 1) LOOP
            FOR y in array_lower(_matrix, 2)..array_upper(_matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF NOT nodatamode = 'ignore' THEN
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                IF min > _matrix[x][y] THEN
                    min := _matrix[x][y];
                END IF;
            END LOOP;
        END LOOP;
        RETURN min;
    END;]]></definition>
         <parameters>
            <parameter mode="IN" name="matrix" type="double precision[]"/>
            <parameter mode="IN" name="nodatamode" type="text"/>
            <parameter mode="VARIADIC" name="args" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_min4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		_value double precision[][][];
		min double precision;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		min := 'Infinity'::double precision;

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;

					IF _value[z][y][x] < min THEN
						min := _value[z][y][x];
					END IF;
				END LOOP;
			END LOOP;
		END LOOP;

		IF min = 'Infinity'::double precision THEN
			RETURN NULL;
		END IF;

		RETURN min;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="value" type="double precision[]"/>
            <parameter mode="IN" name="pos" type="integer[]"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_minconvexhull(rast raster, nband integer DEFAULT NULL::integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_convex_hull]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mindist4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		_value double precision[][][];
		ndims int;

		d double precision DEFAULT NULL;
		_d double precision;

		z integer;
		x integer;
		y integer;

		cx integer;
		cy integer;
		cv double precision;

		w integer;
		h integer;
		max_dx double precision;
		max_dy double precision;
	BEGIN

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);

		-- width and height (0-based)
		h := array_upper(_value, 2) - array_lower(_value, 2);
		w := array_upper(_value, 3) - array_lower(_value, 3);

		-- max distance from center pixel
		max_dx := w / 2;
		max_dy := h / 2;

		-- correct width and height (1-based)
		w := w + 1;
		h := h + 1;

		-- width and height should be odd numbers
		IF w % 2. != 1 THEN
			RAISE EXCEPTION 'Width of neighborhood array does not permit for a center pixel';
		END IF;
		IF h % 2. != 1 THEN
			RAISE EXCEPTION 'Height of neighborhood array does not permit for a center pixel';
		END IF;

		-- center pixel's coordinates
		cy := max_dy + array_lower(_value, 2);
		cx := max_dx + array_lower(_value, 3);

		-- center pixel value
		cv := _value[z][cy][cx];

		-- check to see if center pixel has value
		IF cv IS NOT NULL THEN
			RETURN 0.;
		END IF;

		FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
			FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP

				-- skip NODATA values and center pixel
				IF _value[z][y][x] IS NULL OR (x = cx AND y = cy) THEN
					CONTINUE;
				END IF;

				-- use pythagorean theorem
				_d := sqrt(power(cx - x, 2) + power(cy - y, 2));
--				RAISE NOTICE 'distance = %', _d;

				IF d IS NULL OR _d < d THEN
					d := _d;
				END IF;
			END LOOP;
		END LOOP;
--		RAISE NOTICE 'd = %', d;

		RETURN d;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="value" type="double precision[]"/>
            <parameter mode="IN" name="pos" type="integer[]"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_minimumboundingcircle(inputgeom geometry, segs_per_quarter integer DEFAULT 48)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, num_segs_per_qt_circ=48 - Returns the smallest circle polygon that can fully contain a geometry. Default uses 48 segments per quarter circle.]]></comment>
         <definition language="c"><![CDATA[ST_MinimumBoundingCircle]]></definition>
         <parameters>
            <parameter mode="IN" name="inputgeom" type="geometry"/>
            <parameter mode="IN" name="segs_per_quarter" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_minimumboundingradius(geometry, OUT center geometry, OUT radius double precision)" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Returns the center point and radius of the smallest circle that can fully contain a geometry.]]></comment>
         <definition language="c"><![CDATA[ST_MinimumBoundingRadius]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="OUT" name="center" type="geometry"/>
            <parameter mode="OUT" name="radius" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_minimumclearance(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g - Returns the minimum clearance of a geometry, a measure of a geometrys robustness.]]></comment>
         <definition language="c"><![CDATA[ST_MinimumClearance]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_minimumclearanceline(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g - Returns the two-point LineString spanning a geometrys minimum clearance.]]></comment>
         <definition language="c"><![CDATA[ST_MinimumClearanceLine]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_minpossiblevalue(pixeltype text)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: pixeltype - Returns the minimum value this pixeltype can store.]]></comment>
         <definition language="c"><![CDATA[RASTER_minPossibleValue]]></definition>
         <parameters>
            <parameter mode="IN" name="pixeltype" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mlinefromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT - Return a specified ST_MultiLineString value from WKT representation.]]></comment>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'MULTILINESTRING'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mlinefromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT, srid - Return a specified ST_MultiLineString value from WKT representation.]]></comment>
         <definition language="sql"><![CDATA[SELECT CASE
	WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'MULTILINESTRING'
	THEN public.ST_GeomFromText($1,$2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mlinefromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mlinefromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'MULTILINESTRING'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mpointfromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT - Makes a Geometry from WKT with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'MULTIPOINT'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mpointfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT, srid - Makes a Geometry from WKT with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'MULTIPOINT'
	THEN ST_GeomFromText($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mpointfromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'MULTIPOINT'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mpointfromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'MULTIPOINT'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mpolyfromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT - Makes a MultiPolygon Geometry from WKT with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'MULTIPOLYGON'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mpolyfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT, srid - Makes a MultiPolygon Geometry from WKT with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'MULTIPOLYGON'
	THEN public.ST_GeomFromText($1,$2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mpolyfromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_mpolyfromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multi(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Return the geometry as a MULTI* geometry.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_force_multi]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multilinefromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multilinestringfromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_MLineFromText($1)]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multilinestringfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_MLineFromText($1, $2)]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multipointfromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_MPointFromText($1)]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multipointfromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'MULTIPOINT'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multipointfromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1,$2)) = 'MULTIPOINT'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multipolyfromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multipolyfromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multipolygonfromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_MPolyFromText($1)]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_multipolygonfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_MPolyFromText($1, $2)]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_ndims(geometry)" returnType="smallint" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Returns coordinate dimension of the geometry as a small int. Values are: 2,3 or 4.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_ndims]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_nearestvalue(rast raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean DEFAULT true)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, bandnum, columnx, rowy, exclude_nodata_value=true - Returns the nearest non-NODATA value of a given bands pixel specified by a columnx and rowy or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.st_nearestvalue($1, $2, public.st_setsrid(public.st_makepoint(public.st_rastertoworldcoordx($1, $3, $4), public.st_rastertoworldcoordy($1, $3, $4)), public.st_srid($1)), $5)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="columnx" type="integer"/>
            <parameter mode="IN" name="rowy" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_nearestvalue(rast raster, band integer, pt geometry, exclude_nodata_value boolean DEFAULT true)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, bandnum, pt, exclude_nodata_value=true - Returns the nearest non-NODATA value of a given bands pixel specified by a columnx and rowy or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
         <definition language="c"><![CDATA[RASTER_nearestValue]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="pt" type="geometry"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_nearestvalue(rast raster, columnx integer, rowy integer, exclude_nodata_value boolean DEFAULT true)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, columnx, rowy, exclude_nodata_value=true - Returns the nearest non-NODATA value of a given bands pixel specified by a columnx and rowy or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.st_nearestvalue($1, 1, public.st_setsrid(public.st_makepoint(public.st_rastertoworldcoordx($1, $2, $3), public.st_rastertoworldcoordy($1, $2, $3)), public.st_srid($1)), $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="columnx" type="integer"/>
            <parameter mode="IN" name="rowy" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_nearestvalue(rast raster, pt geometry, exclude_nodata_value boolean DEFAULT true)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, pt, exclude_nodata_value=true - Returns the nearest non-NODATA value of a given bands pixel specified by a columnx and rowy or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT st_nearestvalue($1, 1, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="pt" type="geometry"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean DEFAULT true)" returnType="double precision[]" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, bandnum, columnX, rowY, distanceX, distanceY, exclude_nodata_value=true - Returns a 2-D double precision array of the non-NODATA values around a given bands pixel specified by either a columnX and rowY or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_neighborhood($1, $2, $3, $4, $5, $6, $7)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="columnx" type="integer"/>
            <parameter mode="IN" name="rowy" type="integer"/>
            <parameter mode="IN" name="distancex" type="integer"/>
            <parameter mode="IN" name="distancey" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_neighborhood(rast raster, band integer, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean DEFAULT true)" returnType="double precision[]" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, bandnum, pt, distanceX, distanceY, exclude_nodata_value=true - Returns a 2-D double precision array of the non-NODATA values around a given bands pixel specified by either a columnX and rowY or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		wx double precision;
		wy double precision;
		rtn double precision[][];
	BEGIN
		IF (public.st_geometrytype($3) != 'ST_Point') THEN
			RAISE EXCEPTION 'Attempting to get the neighbor of a pixel with a non-point geometry';
		END IF;

		IF public.ST_SRID(rast) != public.ST_SRID(pt) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;

		wx := st_x($3);
		wy := st_y($3);

		SELECT public._ST_neighborhood(
			$1, $2,
			public.st_worldtorastercoordx(rast, wx, wy),
			public.st_worldtorastercoordy(rast, wx, wy),
			$4, $5,
			$6
		) INTO rtn;
		RETURN rtn;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="pt" type="geometry"/>
            <parameter mode="IN" name="distancex" type="integer"/>
            <parameter mode="IN" name="distancey" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_neighborhood(rast raster, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean DEFAULT true)" returnType="double precision[]" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, columnX, rowY, distanceX, distanceY, exclude_nodata_value=true - Returns a 2-D double precision array of the non-NODATA values around a given bands pixel specified by either a columnX and rowY or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_neighborhood($1, 1, $2, $3, $4, $5, $6)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="columnx" type="integer"/>
            <parameter mode="IN" name="rowy" type="integer"/>
            <parameter mode="IN" name="distancex" type="integer"/>
            <parameter mode="IN" name="distancey" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_neighborhood(rast raster, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean DEFAULT true)" returnType="double precision[]" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, pt, distanceX, distanceY, exclude_nodata_value=true - Returns a 2-D double precision array of the non-NODATA values around a given bands pixel specified by either a columnX and rowY or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.st_neighborhood($1, 1, $2, $3, $4, $5)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="pt" type="geometry"/>
            <parameter mode="IN" name="distancex" type="integer"/>
            <parameter mode="IN" name="distancey" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_node(g geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Node a set of linestrings.]]></comment>
         <definition language="c"><![CDATA[ST_Node]]></definition>
         <parameters>
            <parameter mode="IN" name="g" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_normalize(geom geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Return the geometry in its canonical form.]]></comment>
         <definition language="c"><![CDATA[ST_Normalize]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_notsamealignmentreason(rast1 raster, rast2 raster)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, rastB - Returns text stating if rasters are aligned and if not aligned, a reason why.]]></comment>
         <definition language="c"><![CDATA[RASTER_notSameAlignmentReason]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="rast2" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_npoints(geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Return the number of points (vertexes) in a geometry.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_npoints]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_nrings(geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - If the geometry is a polygon or multi-polygon returns the number of rings.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_nrings]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_numbands(raster)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the number of bands in the raster object.]]></comment>
         <definition language="c"><![CDATA[RASTER_getNumBands]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_numgeometries(geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - If geometry is a GEOMETRYCOLLECTION (or MULTI*) return the number of geometries, for single geometries will return 1, otherwise return NULL.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_numgeometries_collection]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_numinteriorring(geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_polygon - Return the number of interior rings of a polygon in the geometry. Synonym for ST_NumInteriorRings.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_numinteriorrings_polygon]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_numinteriorrings(geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_polygon - Return the number of interior rings of a polygon geometry.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_numinteriorrings_polygon]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_numpatches(geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Return the number of faces on a Polyhedral Surface. Will return null for non-polyhedral geometries.]]></comment>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.ST_GeometryType($1) = 'ST_PolyhedralSurface'
	THEN public.ST_NumGeometries($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_numpoints(geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Return the number of points in an ST_LineString or ST_CircularString value.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_numpoints_linestring]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_offsetcurve(line geometry, distance double precision, params text DEFAULT ''::text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: line, signed_distance, style_parameters=' - Return an offset line at a given distance and side from an input line. Useful for computing parallel lines about a center line]]></comment>
         <definition language="c"><![CDATA[ST_OffsetCurve]]></definition>
         <parameters>
            <parameter mode="IN" name="line" type="geometry"/>
            <parameter mode="IN" name="distance" type="double precision"/>
            <parameter mode="IN" name="params" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_orderingequals(geometrya geometry, geometryb geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: A, B - Returns true if the given geometries represent the same geometry and points are in the same directional order.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.~=) $2 AND public._ST_OrderingEquals($1, $2)]]></definition>
         <parameters>
            <parameter mode="IN" name="geometrya" type="geometry"/>
            <parameter mode="IN" name="geometryb" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_orientedenvelope(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Returns a minimum rotated rectangle enclosing a geometry.]]></comment>
         <definition language="c"><![CDATA[ST_OrientedEnvelope]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_overlaps(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: A, B - Returns TRUE if the Geometries share space, are of the same dimension, but are not completely contained by each other.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) $2 AND public._ST_Overlaps($1,$2)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if raster rastA and rastB intersect but one does not completely contain the other.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_overlaps(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._ST_overlaps($1, $2, $3, $4) END]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="nband1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nband2" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_overlaps(rast1 raster, rast2 raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, rastB - Return true if raster rastA and rastB intersect but one does not completely contain the other.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.st_overlaps($1, NULL::integer, $2, NULL::integer)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="rast2" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_patchn(geometry, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, n - Return the 1-based Nth geometry (face) if the geometry is a POLYHEDRALSURFACE, POLYHEDRALSURFACEM. Otherwise, return NULL.]]></comment>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.ST_GeometryType($1) = 'ST_PolyhedralSurface'
	THEN public.ST_GeometryN($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_perimeter(geog geography, use_spheroid boolean DEFAULT true)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geog, use_spheroid=true - Return the length measurement of the boundary of an ST_Surface or ST_MultiSurface geometry or geography. (Polygon, MultiPolygon). geometry measurement is in units of spatial reference and geography is in meters.]]></comment>
         <definition language="c"><![CDATA[geography_perimeter]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="use_spheroid" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_perimeter(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Return the length measurement of the boundary of an ST_Surface or ST_MultiSurface geometry or geography. (Polygon, MultiPolygon). geometry measurement is in units of spatial reference and geography is in meters.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_perimeter2d_poly]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_perimeter2d(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Returns the 2-dimensional perimeter of the geometry, if it is a polygon or multi-polygon. This is currently an alias for ST_Perimeter.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_perimeter2d_poly]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pixelascentroid(rast raster, x integer, y integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, x, y - Returns the centroid (point geometry) of the area represented by a pixel.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_Centroid(geom) FROM public._ST_pixelaspolygons($1, NULL, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="x" type="integer"/>
            <parameter mode="IN" name="y" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pixelascentroids(rast raster, band integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, band=1, exclude_nodata_value=TRUE - Returns the centroid (point geometry) for each pixel of a raster band along with the value, the X and the Y raster coordinates of each pixel. The point geometry is the centroid of the area represented by a pixel.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_Centroid(geom), val, x, y FROM public._ST_pixelaspolygons($1, $2, NULL, NULL, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="OUT" name="geom" type="geometry"/>
            <parameter mode="OUT" name="val" type="double precision"/>
            <parameter mode="OUT" name="x" type="integer"/>
            <parameter mode="OUT" name="y" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pixelaspoint(rast raster, x integer, y integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, columnx, rowy - Returns a point geometry of the pixels upper-left corner.]]></comment>
         <definition language="sql"><![CDATA[SELECT ST_PointN(ST_ExteriorRing(geom), 1) FROM public._ST_pixelaspolygons($1, NULL, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="x" type="integer"/>
            <parameter mode="IN" name="y" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pixelaspoints(rast raster, band integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, band=1, exclude_nodata_value=TRUE - Returns a point geometry for each pixel of a raster band along with the value, the X and the Y raster coordinates of each pixel. The coordinates of the point geometry are of the pixels upper-left corner.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_PointN(  public.ST_ExteriorRing(geom), 1), val, x, y FROM public._ST_pixelaspolygons($1, $2, NULL, NULL, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="OUT" name="geom" type="geometry"/>
            <parameter mode="OUT" name="val" type="double precision"/>
            <parameter mode="OUT" name="x" type="integer"/>
            <parameter mode="OUT" name="y" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pixelaspolygon(rast raster, x integer, y integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, columnx, rowy - Returns the polygon geometry that bounds the pixel for a particular row and column.]]></comment>
         <definition language="sql"><![CDATA[SELECT geom FROM public._ST_pixelaspolygons($1, NULL, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="x" type="integer"/>
            <parameter mode="IN" name="y" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pixelaspolygons(rast raster, band integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, band=1, exclude_nodata_value=TRUE - Returns the polygon geometry that bounds every pixel of a raster band along with the value, the X and the Y raster coordinates of each pixel.]]></comment>
         <definition language="sql"><![CDATA[SELECT geom, val, x, y FROM public._ST_pixelaspolygons($1, $2, NULL, NULL, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="OUT" name="geom" type="geometry"/>
            <parameter mode="OUT" name="val" type="double precision"/>
            <parameter mode="OUT" name="x" type="integer"/>
            <parameter mode="OUT" name="y" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pixelheight(raster)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the pixel height in geometric units of the spatial reference system.]]></comment>
         <definition language="c"><![CDATA[RASTER_getPixelHeight]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pixelofvalue(rast raster, nband integer, search double precision, exclude_nodata_value boolean DEFAULT true, OUT x integer, OUT y integer)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, search, exclude_nodata_value=true - Get the columnx, rowy coordinates of the pixel whose value equals the search value.]]></comment>
         <definition language="sql"><![CDATA[SELECT x, y FROM public.ST_PixelofValue($1, $2, ARRAY[$3], $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="search" type="double precision"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="OUT" name="x" type="integer"/>
            <parameter mode="OUT" name="y" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pixelofvalue(rast raster, nband integer, search double precision[], exclude_nodata_value boolean DEFAULT true, OUT val double precision, OUT x integer, OUT y integer)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, search, exclude_nodata_value=true - Get the columnx, rowy coordinates of the pixel whose value equals the search value.]]></comment>
         <definition language="c"><![CDATA[RASTER_pixelOfValue]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="search" type="double precision[]"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="OUT" name="val" type="double precision"/>
            <parameter mode="OUT" name="x" type="integer"/>
            <parameter mode="OUT" name="y" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pixelofvalue(rast raster, search double precision, exclude_nodata_value boolean DEFAULT true, OUT x integer, OUT y integer)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, search, exclude_nodata_value=true - Get the columnx, rowy coordinates of the pixel whose value equals the search value.]]></comment>
         <definition language="sql"><![CDATA[SELECT x, y FROM public.ST_PixelOfValue($1, 1, ARRAY[$2], $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="search" type="double precision"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="OUT" name="x" type="integer"/>
            <parameter mode="OUT" name="y" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pixelofvalue(rast raster, search double precision[], exclude_nodata_value boolean DEFAULT true, OUT val double precision, OUT x integer, OUT y integer)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, search, exclude_nodata_value=true - Get the columnx, rowy coordinates of the pixel whose value equals the search value.]]></comment>
         <definition language="sql"><![CDATA[SELECT val, x, y FROM public.ST_PixelOfValue($1, 1, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="search" type="double precision[]"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="OUT" name="val" type="double precision"/>
            <parameter mode="OUT" name="x" type="integer"/>
            <parameter mode="OUT" name="y" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pixelwidth(raster)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the pixel width in geometric units of the spatial reference system.]]></comment>
         <definition language="c"><![CDATA[RASTER_getPixelWidth]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_point(double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: x_lon, y_lat - Returns an ST_Point with the given coordinate values. OGC alias for ST_MakePoint.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_makepoint]]></definition>
         <parameters>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_point_inside_circle(geometry, double precision, double precision, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_Point_Inside_Circle', 'ST_PointInsideCircle', '2.2.0');
    SELECT public.ST_PointInsideCircle($1,$2,$3,$4);]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointfromgeohash(text, integer DEFAULT NULL::integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geohash, precision=full_precision_of_geohash - Return a point from a GeoHash string.]]></comment>
         <definition language="c"><![CDATA[point_from_geohash]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointfromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT - Makes a point Geometry from WKT with the given SRID. If SRID is not given, it defaults to unknown.]]></comment>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'POINT'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT, srid - Makes a point Geometry from WKT with the given SRID. If SRID is not given, it defaults to unknown.]]></comment>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'POINT'
	THEN public.ST_GeomFromText($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointfromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'POINT'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointfromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'POINT'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointinsidecircle(geometry, double precision, double precision, double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_point, center_x, center_y, radius - Is the point geometry inside the circle defined by center_x, center_y, radius]]></comment>
         <definition language="c"><![CDATA[LWGEOM_inside_circle_point]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointn(geometry, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_linestring, n - Return the Nth point in the first LineString or circular LineString in the geometry. Negative values are counted backwards from the end of the LineString. Returns NULL if there is no linestring in the geometry.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_pointn_linestring]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_pointonsurface(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Returns a POINT guaranteed to lie on the surface.]]></comment>
         <definition language="c"><![CDATA[pointonsurface]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_points(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Returns a MultiPoint containing all of the coordinates of a geometry.]]></comment>
         <definition language="c"><![CDATA[ST_Points]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polyfromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'POLYGON'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polyfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'POLYGON'
	THEN public.ST_GeomFromText($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polyfromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'POLYGON'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polyfromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'POLYGON'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polygon(geometry, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: aLineString, srid - Returns a polygon built from the specified linestring and SRID.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_SetSRID(public.ST_MakePolygon($1), $2)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polygon(rast raster, band integer DEFAULT 1)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_getPolygon]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polygonfromtext(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT - Makes a Geometry from WKT with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_PolyFromText($1)]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polygonfromtext(text, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT, srid - Makes a Geometry from WKT with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_PolyFromText($1, $2)]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polygonfromwkb(bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'POLYGON'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polygonfromwkb(bytea, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1,$2)) = 'POLYGON'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polygonize(geometry)" returnType="geometry" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: geomfield - Aggregate. Creates a GeometryCollection containing possible polygons formed from the constituent linework of a set of geometries.]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_polygonize(geometry[])" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom_array - Aggregate. Creates a GeometryCollection containing possible polygons formed from the constituent linework of a set of geometries.]]></comment>
         <definition language="c"><![CDATA[polygonize_garray]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_project(geog geography, distance double precision, azimuth double precision)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, distance, azimuth - Returns a POINT projected from a start point using a distance in meters and bearing (azimuth) in radians.]]></comment>
         <definition language="c"><![CDATA[geography_project]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="distance" type="double precision"/>
            <parameter mode="IN" name="azimuth" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_quantile(rast raster, exclude_nodata_value boolean, quantile double precision DEFAULT NULL::double precision)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, exclude_nodata_value, quantile=NULL - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
         <definition language="sql"><![CDATA[SELECT ( public._ST_quantile($1, 1, $2, 1, ARRAY[$3]::double precision[])).value]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="quantile" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_quantile(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband=1, exclude_nodata_value=true, quantiles=NULL - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_quantile($1, $2, $3, 1, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="quantiles" type="double precision[]"/>
            <parameter mode="OUT" name="quantile" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_quantile(rast raster, nband integer, exclude_nodata_value boolean, quantile double precision)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, exclude_nodata_value, quantile - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
         <definition language="sql"><![CDATA[SELECT ( public._ST_quantile($1, $2, $3, 1, ARRAY[$4]::double precision[])).value]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="quantile" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_quantile(rast raster, nband integer, quantile double precision)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, quantile - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
         <definition language="sql"><![CDATA[SELECT ( public._ST_quantile($1, $2, TRUE, 1, ARRAY[$3]::double precision[])).value]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="quantile" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_quantile(rast raster, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, quantiles - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_quantile($1, $2, TRUE, 1, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="quantiles" type="double precision[]"/>
            <parameter mode="OUT" name="quantile" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_quantile(rast raster, quantile double precision)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, quantile - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
         <definition language="sql"><![CDATA[SELECT ( public._ST_quantile($1, 1, TRUE, 1, ARRAY[$2]::double precision[])).value]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="quantile" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_quantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, quantiles - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_quantile($1, 1, TRUE, 1, $2)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="quantiles" type="double precision[]"/>
            <parameter mode="OUT" name="quantile" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_quantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision DEFAULT NULL::double precision)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT ( public._ST_quantile($1, $2, 1, $3, 1, ARRAY[$4]::double precision[])).value]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="quantile" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_quantile(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true, quantiles=NULL - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_quantile($1, $2, $3, $4, 1, $5)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="quantiles" type="double precision[]"/>
            <parameter mode="OUT" name="quantile" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, quantile double precision)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT ( public._ST_quantile($1, $2, $3, $4, 1, ARRAY[$5]::double precision[])).value]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="quantile" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_quantile(rastertable text, rastercolumn text, nband integer, quantile double precision)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT ( public._ST_quantile($1, $2, $3, TRUE, 1, ARRAY[$4]::double precision[])).value]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="quantile" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_quantile(rastertable text, rastercolumn text, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastertable, rastercolumn, nband, quantiles - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_quantile($1, $2, $3, TRUE, 1, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="quantiles" type="double precision[]"/>
            <parameter mode="OUT" name="quantile" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_quantile(rastertable text, rastercolumn text, quantile double precision)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT ( public._ST_quantile($1, $2, 1, TRUE, 1, ARRAY[$3]::double precision[])).value]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="quantile" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_quantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_quantile($1, $2, 1, TRUE, 1, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="quantiles" type="double precision[]"/>
            <parameter mode="OUT" name="quantile" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_quantizecoordinates(g geometry, prec_x integer, prec_y integer DEFAULT NULL::integer, prec_z integer DEFAULT NULL::integer, prec_m integer DEFAULT NULL::integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g, prec_x, prec_y, prec_z, prec_m - Sets least significant bits of coordinates to zero]]></comment>
         <definition language="c"><![CDATA[ST_QuantizeCoordinates]]></definition>
         <parameters>
            <parameter mode="IN" name="g" type="geometry"/>
            <parameter mode="IN" name="prec_x" type="integer"/>
            <parameter mode="IN" name="prec_y" type="integer"/>
            <parameter mode="IN" name="prec_z" type="integer"/>
            <parameter mode="IN" name="prec_m" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_range4ma(matrix double precision[], nodatamode text, VARIADIC args text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
        _matrix float[][];
        min float;
        max float;
    BEGIN
        _matrix := matrix;
        min := 'Infinity'::float;
        max := '-Infinity'::float;
        FOR x in array_lower(matrix, 1)..array_upper(matrix, 1) LOOP
            FOR y in array_lower(matrix, 2)..array_upper(matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF NOT nodatamode = 'ignore' THEN
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                IF min > _matrix[x][y] THEN
                    min = _matrix[x][y];
                END IF;
                IF max < _matrix[x][y] THEN
                    max = _matrix[x][y];
                END IF;
            END LOOP;
        END LOOP;
        IF max = '-Infinity'::float OR min = 'Infinity'::float THEN
            RETURN NULL;
        END IF;
        RETURN max - min;
    END;]]></definition>
         <parameters>
            <parameter mode="IN" name="matrix" type="double precision[]"/>
            <parameter mode="IN" name="nodatamode" type="text"/>
            <parameter mode="VARIADIC" name="args" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_range4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		_value double precision[][][];
		min double precision;
		max double precision;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		min := 'Infinity'::double precision;
		max := '-Infinity'::double precision;

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;

					IF _value[z][y][x] < min THEN
						min := _value[z][y][x];
					END IF;
					IF _value[z][y][x] > max THEN
						max := _value[z][y][x];
					END IF;
				END LOOP;
			END LOOP;
		END LOOP;

		IF max = '-Infinity'::double precision OR min = 'Infinity'::double precision THEN
			RETURN NULL;
		END IF;

		RETURN max - min;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="value" type="double precision[]"/>
            <parameter mode="IN" name="pos" type="integer[]"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rastertoworldcoord(rast raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision)" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, xcolumn, yrow - Returns the rasters upper left corner as geometric X and Y (longitude and latitude) given a column and row. Column and row starts at 1.]]></comment>
         <definition language="sql"><![CDATA[SELECT longitude, latitude FROM public._ST_rastertoworldcoord($1, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="columnx" type="integer"/>
            <parameter mode="IN" name="rowy" type="integer"/>
            <parameter mode="OUT" name="longitude" type="double precision"/>
            <parameter mode="OUT" name="latitude" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rastertoworldcoordx(rast raster, xr integer)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, xcolumn - Returns the geometric X coordinate upper left of a raster, column and row. Numbering of columns and rows starts at 1.]]></comment>
         <definition language="sql"><![CDATA[SELECT longitude FROM public._ST_rastertoworldcoord($1, $2, NULL)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="xr" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rastertoworldcoordx(rast raster, xr integer, yr integer)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, xcolumn, yrow - Returns the geometric X coordinate upper left of a raster, column and row. Numbering of columns and rows starts at 1.]]></comment>
         <definition language="sql"><![CDATA[SELECT longitude FROM public._ST_rastertoworldcoord($1, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="xr" type="integer"/>
            <parameter mode="IN" name="yr" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rastertoworldcoordy(rast raster, xr integer, yr integer)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, xcolumn, yrow - Returns the geometric Y coordinate upper left corner of a raster, column and row. Numbering of columns and rows starts at 1.]]></comment>
         <definition language="sql"><![CDATA[SELECT latitude FROM public._ST_rastertoworldcoord($1, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="xr" type="integer"/>
            <parameter mode="IN" name="yr" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rastertoworldcoordy(rast raster, yr integer)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, yrow - Returns the geometric Y coordinate upper left corner of a raster, column and row. Numbering of columns and rows starts at 1.]]></comment>
         <definition language="sql"><![CDATA[SELECT latitude FROM public._ST_rastertoworldcoord($1, NULL, $2)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="yr" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rastfromhexwkb(text)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: wkb - Return a raster value from a Hex representation of Well-Known Binary (WKB) raster.]]></comment>
         <definition language="c"><![CDATA[RASTER_fromHexWKB]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rastfromwkb(bytea)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: wkb - Return a raster value from a Well-Known Binary (WKB) raster.]]></comment>
         <definition language="c"><![CDATA[RASTER_fromWKB]]></definition>
         <parameters>
            <parameter mode="IN" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_reclass(rast raster, VARIADIC reclassargset reclassarg[])" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		i int;
		expr text;
	BEGIN
		-- for each reclassarg, validate elements as all except nodataval cannot be NULL
		FOR i IN SELECT * FROM generate_subscripts($2, 1) LOOP
			IF $2[i].nband IS NULL OR $2[i].reclassexpr IS NULL OR $2[i].pixeltype IS NULL THEN
				RAISE WARNING 'Values are required for the nband, reclassexpr and pixeltype attributes.';
				RETURN rast;
			END IF;
		END LOOP;

		RETURN public._ST_reclass($1, VARIADIC $2);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="VARIADIC" name="reclassargset" type="reclassarg[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_reclass(rast raster, nband integer, reclassexpr text, pixeltype text, nodataval double precision DEFAULT NULL::double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT st_reclass($1, ROW($2, $3, $4, $5))]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="reclassexpr" type="text"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_reclass(rast raster, reclassexpr text, pixeltype text)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT st_reclass($1, ROW(1, $2, $3, NULL))]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="reclassexpr" type="text"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_relate(geom1 geometry, geom2 geometry)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, geomB - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.]]></comment>
         <definition language="c"><![CDATA[relate_full]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_relate(geom1 geometry, geom2 geometry, integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, geomB, BoundaryNodeRule - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.]]></comment>
         <definition language="c"><![CDATA[relate_full]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_relate(geom1 geometry, geom2 geometry, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, geomB, intersectionMatrixPattern - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.]]></comment>
         <definition language="c"><![CDATA[relate_pattern]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_relatematch(text, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: intersectionMatrix, intersectionMatrixPattern - Returns true if intersectionMattrixPattern1 implies intersectionMatrixPattern2]]></comment>
         <definition language="c"><![CDATA[ST_RelateMatch]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_removepoint(geometry, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: linestring, offset - Remove point from a linestring.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_removepoint]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_removerepeatedpoints(geom geometry, tolerance double precision DEFAULT 0.0)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, tolerance - Returns a version of the given geometry with duplicated points removed.]]></comment>
         <definition language="c"><![CDATA[ST_RemoveRepeatedPoints]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="tolerance" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_resample(rast raster, ref raster, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125, usescale boolean DEFAULT true)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, ref, algorithm=NearestNeighbour, maxerr=0.125, usescale=true - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		rastsrid int;

		_srid int;
		_dimx int;
		_dimy int;
		_scalex double precision;
		_scaley double precision;
		_gridx double precision;
		_gridy double precision;
		_skewx double precision;
		_skewy double precision;
	BEGIN
		SELECT srid, width, height, scalex, scaley, upperleftx, upperlefty, skewx, skewy INTO _srid, _dimx, _dimy, _scalex, _scaley, _gridx, _gridy, _skewx, _skewy FROM st_metadata($2);

		rastsrid := public.ST_SRID($1);

		-- both rasters must have the same SRID
		IF (rastsrid != _srid) THEN
			RAISE EXCEPTION 'The raster to be resampled has a different SRID from the reference raster';
			RETURN NULL;
		END IF;

		IF usescale IS TRUE THEN
			_dimx := NULL;
			_dimy := NULL;
		ELSE
			_scalex := NULL;
			_scaley := NULL;
		END IF;

		RETURN public._ST_gdalwarp($1, $3, $4, NULL, _scalex, _scaley, _gridx, _gridy, _skewx, _skewy, _dimx, _dimy);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="ref" type="raster"/>
            <parameter mode="IN" name="algorithm" type="text"/>
            <parameter mode="IN" name="maxerr" type="double precision"/>
            <parameter mode="IN" name="usescale" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_resample(rast raster, ref raster, usescale boolean, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, ref, usescale, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.st_resample($1, $2, $4, $5, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="ref" type="raster"/>
            <parameter mode="IN" name="usescale" type="boolean"/>
            <parameter mode="IN" name="algorithm" type="text"/>
            <parameter mode="IN" name="maxerr" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_resample(rast raster, scalex double precision DEFAULT 0, scaley double precision DEFAULT 0, gridx double precision DEFAULT NULL::double precision, gridy double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, scalex=0, scaley=0, gridx=NULL, gridy=NULL, skewx=0, skewy=0, algorithm=NearestNeighbor, maxerr=0.125 - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_gdalwarp($1, $8,	$9, NULL, $2, $3, $4, $5, $6, $7)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="scalex" type="double precision"/>
            <parameter mode="IN" name="scaley" type="double precision"/>
            <parameter mode="IN" name="gridx" type="double precision"/>
            <parameter mode="IN" name="gridy" type="double precision"/>
            <parameter mode="IN" name="skewx" type="double precision"/>
            <parameter mode="IN" name="skewy" type="double precision"/>
            <parameter mode="IN" name="algorithm" type="text"/>
            <parameter mode="IN" name="maxerr" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_resample(rast raster, width integer, height integer, gridx double precision DEFAULT NULL::double precision, gridy double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, width, height, gridx=NULL, gridy=NULL, skewx=0, skewy=0, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_gdalwarp($1, $8,	$9, NULL, NULL, NULL, $4, $5, $6, $7, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="width" type="integer"/>
            <parameter mode="IN" name="height" type="integer"/>
            <parameter mode="IN" name="gridx" type="double precision"/>
            <parameter mode="IN" name="gridy" type="double precision"/>
            <parameter mode="IN" name="skewx" type="double precision"/>
            <parameter mode="IN" name="skewy" type="double precision"/>
            <parameter mode="IN" name="algorithm" type="text"/>
            <parameter mode="IN" name="maxerr" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rescale(rast raster, scalex double precision, scaley double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, scalex, scaley, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its scale (or pixel size). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
         <definition language="sql"><![CDATA[SELECT  public._ST_GdalWarp($1, $4, $5, NULL, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="scalex" type="double precision"/>
            <parameter mode="IN" name="scaley" type="double precision"/>
            <parameter mode="IN" name="algorithm" type="text"/>
            <parameter mode="IN" name="maxerr" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rescale(rast raster, scalexy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, scalexy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its scale (or pixel size). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
         <definition language="sql"><![CDATA[SELECT  public._ST_GdalWarp($1, $3, $4, NULL, $2, $2)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="scalexy" type="double precision"/>
            <parameter mode="IN" name="algorithm" type="text"/>
            <parameter mode="IN" name="maxerr" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_resize(rast raster, percentwidth double precision, percentheight double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, percentwidth, percentheight, algorithm=NearestNeighbor, maxerr=0.125 - Resize a raster to a new width/height]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		_width integer;
		_height integer;
	BEGIN
		-- range check
		IF $2 <= 0. OR $2 > 1. OR $3 <= 0. OR $3 > 1. THEN
			RAISE EXCEPTION 'Percentages must be a value greater than zero and less than or equal to one, e.g. 0.5 for 50%%';
		END IF;

		SELECT width, height INTO _width, _height FROM public.ST_Metadata($1);

		_width := round(_width::double precision * $2)::integer;
		_height:= round(_height::double precision * $3)::integer;

		IF _width < 1 THEN
			_width := 1;
		END IF;
		IF _height < 1 THEN
			_height := 1;
		END IF;

		RETURN public._ST_gdalwarp(
			$1,
			$4, $5,
			NULL,
			NULL, NULL,
			NULL, NULL,
			NULL, NULL,
			_width, _height
		);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="percentwidth" type="double precision"/>
            <parameter mode="IN" name="percentheight" type="double precision"/>
            <parameter mode="IN" name="algorithm" type="text"/>
            <parameter mode="IN" name="maxerr" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_resize(rast raster, width integer, height integer, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, width, height, algorithm=NearestNeighbor, maxerr=0.125 - Resize a raster to a new width/height]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_gdalwarp($1, $4, $5, NULL, NULL, NULL, NULL, NULL, NULL, NULL, abs($2), abs($3))]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="width" type="integer"/>
            <parameter mode="IN" name="height" type="integer"/>
            <parameter mode="IN" name="algorithm" type="text"/>
            <parameter mode="IN" name="maxerr" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_resize(rast raster, width text, height text, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, width, height, algorithm=NearestNeighbor, maxerr=0.125 - Resize a raster to a new width/height]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		i integer;

		wh text[2];

		whi integer[2];
		whd double precision[2];

		_width integer;
		_height integer;
	BEGIN
		wh[1] := trim(both from $2);
		wh[2] := trim(both from $3);

		-- see if width and height are percentages
		FOR i IN 1..2 LOOP
			IF position('%' in wh[i]) > 0 THEN
				BEGIN
					wh[i] := (regexp_matches(wh[i], E'^(\\d*.?\\d*)%{1}$'))[1];
					IF length(wh[i]) < 1 THEN
						RAISE invalid_parameter_value;
					END IF;

					whd[i] := wh[i]::double precision * 0.01;
				EXCEPTION WHEN OTHERS THEN -- TODO: WHEN invalid_parameter_value !
					RAISE EXCEPTION 'Invalid percentage value provided for width/height';
					RETURN NULL;
				END;
			ELSE
				BEGIN
					whi[i] := abs(wh[i]::integer);
				EXCEPTION WHEN OTHERS THEN -- TODO: only handle appropriate SQLSTATE
					RAISE EXCEPTION 'Non-integer value provided for width/height';
					RETURN NULL;
				END;
			END IF;
		END LOOP;

		IF whd[1] IS NOT NULL OR whd[2] IS NOT NULL THEN
			SELECT foo.width, foo.height INTO _width, _height FROM public.ST_Metadata($1) AS foo;

			IF whd[1] IS NOT NULL THEN
				whi[1] := round(_width::double precision * whd[1])::integer;
			END IF;

			IF whd[2] IS NOT NULL THEN
				whi[2] := round(_height::double precision * whd[2])::integer;
			END IF;

		END IF;

		-- should NEVER be here
		IF whi[1] IS NULL OR whi[2] IS NULL THEN
			RAISE EXCEPTION 'Unable to determine appropriate width or height';
			RETURN NULL;
		END IF;

		FOR i IN 1..2 LOOP
			IF whi[i] < 1 THEN
				whi[i] = 1;
			END IF;
		END LOOP;

		RETURN public._ST_gdalwarp(
			$1,
			$4, $5,
			NULL,
			NULL, NULL,
			NULL, NULL,
			NULL, NULL,
			whi[1], whi[2]
		);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="width" type="text"/>
            <parameter mode="IN" name="height" type="text"/>
            <parameter mode="IN" name="algorithm" type="text"/>
            <parameter mode="IN" name="maxerr" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_reskew(rast raster, skewx double precision, skewy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, skewx, skewy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its skew (or rotation parameters). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_GdalWarp($1, $4, $5, NULL, 0, 0, NULL, NULL, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="skewx" type="double precision"/>
            <parameter mode="IN" name="skewy" type="double precision"/>
            <parameter mode="IN" name="algorithm" type="text"/>
            <parameter mode="IN" name="maxerr" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_reskew(rast raster, skewxy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, skewxy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its skew (or rotation parameters). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_GdalWarp($1, $3, $4, NULL, 0, 0, NULL, NULL, $2, $2)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="skewxy" type="double precision"/>
            <parameter mode="IN" name="algorithm" type="text"/>
            <parameter mode="IN" name="maxerr" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_retile(tab regclass, col name, ext geometry, sfx double precision, sfy double precision, tw integer, th integer, algo text DEFAULT 'NearestNeighbour'::text)" returnType="SETOF raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: tab, col, ext, sfx, sfy, tw, th, algo='NearestNeighbor' - Return a set of configured tiles from an arbitrarily tiled raster coverage.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
  rec RECORD;
  ipx FLOAT8;
  ipy FLOAT8;
  tx int;
  ty int;
  te public.GEOMETRY; -- tile extent
  ncols int;
  nlins int;
  srid int;
  sql TEXT;
BEGIN

  RAISE DEBUG 'Target coverage will have sfx=%, sfy=%', sfx, sfy;

  -- 2. Loop over each target tile and build it from source tiles
  ipx := public.st_xmin(ext);
  ncols := ceil((st_xmax(ext)-ipx)/sfx/tw);
  IF sfy < 0 THEN
    ipy := public.st_ymax(ext);
    nlins := ceil((public.st_ymin(ext)-ipy)/sfy/th);
  ELSE
    ipy := public.st_ymin(ext);
    nlins := ceil((public.st_ymax(ext)-ipy)/sfy/th);
  END IF;

  srid := public.ST_Srid(ext);

  RAISE DEBUG 'Target coverage will have % x % tiles, each of approx size % x %', ncols, nlins, tw, th;
  RAISE DEBUG 'Target coverage will cover extent %', ext::box2d;

  FOR tx IN 0..ncols-1 LOOP
    FOR ty IN 0..nlins-1 LOOP
      te := public.ST_MakeEnvelope(ipx + tx     *  tw  * sfx,
                             ipy + ty     *  th  * sfy,
                             ipx + (tx+1) *  tw  * sfx,
                             ipy + (ty+1) *  th  * sfy,
                             srid);
      --RAISE DEBUG 'sfx/sfy: %, %', sfx, sfy;
      --RAISE DEBUG 'tile extent %', te;
      sql := 'SELECT count(*),  public.ST_Clip(  public.ST_Union(  public.ST_SnapToGrid(  public.ST_Rescale(  public.ST_Clip(' || quote_ident(col)
          || ',  public.ST_Expand($3, greatest($1,$2))),$1, $2, $6), $4, $5, $1, $2)), $3) g FROM ' || tab::text
          || ' WHERE  public.ST_Intersects(' || quote_ident(col) || ', $3)';
      --RAISE DEBUG 'SQL: %', sql;
      FOR rec IN EXECUTE sql USING sfx, sfy, te, ipx, ipy, algo LOOP
        --RAISE DEBUG '% source tiles intersect target tile %,% with extent %', rec.count, tx, ty, te::box2d;
        IF rec.g IS NULL THEN
          RAISE WARNING 'No source tiles cover target tile %,% with extent %',
            tx, ty, te::box2d;
        ELSE
          --RAISE DEBUG 'Tile for extent % has size % x %', te::box2d, st_width(rec.g), st_height(rec.g);
          RETURN NEXT rec.g;
        END IF;
      END LOOP;
    END LOOP;
  END LOOP;

  RETURN;
END;]]></definition>
         <parameters>
            <parameter mode="IN" name="tab" type="regclass"/>
            <parameter mode="IN" name="col" type="name"/>
            <parameter mode="IN" name="ext" type="geometry"/>
            <parameter mode="IN" name="sfx" type="double precision"/>
            <parameter mode="IN" name="sfy" type="double precision"/>
            <parameter mode="IN" name="tw" type="integer"/>
            <parameter mode="IN" name="th" type="integer"/>
            <parameter mode="IN" name="algo" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_reverse(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Return the geometry with vertex order reversed.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_reverse]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rotate(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, rotRadians - Rotate a geometry rotRadians counter-clockwise about an origin.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_Affine($1,  cos($2), -sin($2), 0,  sin($2), cos($2), 0,  0, 0, 1,  0, 0, 0)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rotate(geometry, double precision, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, rotRadians, x0, y0 - Rotate a geometry rotRadians counter-clockwise about an origin.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_Affine($1,  cos($2), -sin($2), 0,  sin($2),  cos($2), 0, 0, 0, 1,	$3 - cos($2) * $3 + sin($2) * $4, $4 - sin($2) * $3 - cos($2) * $4, 0)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rotate(geometry, double precision, geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, rotRadians, pointOrigin - Rotate a geometry rotRadians counter-clockwise about an origin.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_Affine($1,  cos($2), -sin($2), 0,  sin($2),  cos($2), 0, 0, 0, 1, public.ST_X($3) - cos($2) * public.ST_X($3) + sin($2) * public.ST_Y($3), public.ST_Y($3) - sin($2) * public.ST_X($3) - cos($2) * public.ST_Y($3), 0)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rotatex(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, rotRadians - Rotate a geometry rotRadians about the X axis.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_Affine($1, 1, 0, 0, 0, cos($2), -sin($2), 0, sin($2), cos($2), 0, 0, 0)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rotatey(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, rotRadians - Rotate a geometry rotRadians about the Y axis.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_Affine($1,  cos($2), 0, sin($2),  0, 1, 0,  -sin($2), 0, cos($2), 0,  0, 0)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_rotatez(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, rotRadians - Rotate a geometry rotRadians about the Z axis.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_Rotate($1, $2)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_rotation(raster)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the rotation of the raster in radian.]]></comment>
         <definition language="sql"><![CDATA[SELECT ( public.ST_Geotransform($1)).theta_i]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_roughness(rast raster, nband integer DEFAULT 1, pixeltype text DEFAULT '32BF'::text, interpolate_nodata boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_roughness($1, $2, NULL::public.raster, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="interpolate_nodata" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_roughness(rast raster, nband integer, customextent raster, pixeltype text DEFAULT '32BF'::text, interpolate_nodata boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		_rast public.raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent public.raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;

		IF interpolate_nodata IS TRUE THEN
			_rast := public.ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'public.st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;

		RETURN public.ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			' public._ST_roughness4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="customextent" type="raster"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="interpolate_nodata" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_samealignment(rast1 raster, rast2 raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, rastB - Returns true if rasters have same skew, scale, spatial ref, and offset (pixels can be put on same grid without cutting into pixels) and false if they dont with notice detailing issue.]]></comment>
         <definition language="c"><![CDATA[RASTER_sameAlignment]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="rast2" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_samealignment(raster)" returnType="boolean" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: rastfield - Returns true if rasters have same skew, scale, spatial ref, and offset (pixels can be put on same grid without cutting into pixels) and false if they dont with notice detailing issue.]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_samealignment(ulx1 double precision, uly1 double precision, scalex1 double precision, scaley1 double precision, skewx1 double precision, skewy1 double precision, ulx2 double precision, uly2 double precision, scalex2 double precision, scaley2 double precision, skewx2 double precision, skewy2 double precision)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: ulx1, uly1, scalex1, scaley1, skewx1, skewy1, ulx2, uly2, scalex2, scaley2, skewx2, skewy2 - Returns true if rasters have same skew, scale, spatial ref, and offset (pixels can be put on same grid without cutting into pixels) and false if they dont with notice detailing issue.]]></comment>
         <definition language="sql"><![CDATA[SELECT st_samealignment(st_makeemptyraster(1, 1, $1, $2, $3, $4, $5, $6), st_makeemptyraster(1, 1, $7, $8, $9, $10, $11, $12))]]></definition>
         <parameters>
            <parameter mode="IN" name="ulx1" type="double precision"/>
            <parameter mode="IN" name="uly1" type="double precision"/>
            <parameter mode="IN" name="scalex1" type="double precision"/>
            <parameter mode="IN" name="scaley1" type="double precision"/>
            <parameter mode="IN" name="skewx1" type="double precision"/>
            <parameter mode="IN" name="skewy1" type="double precision"/>
            <parameter mode="IN" name="ulx2" type="double precision"/>
            <parameter mode="IN" name="uly2" type="double precision"/>
            <parameter mode="IN" name="scalex2" type="double precision"/>
            <parameter mode="IN" name="scaley2" type="double precision"/>
            <parameter mode="IN" name="skewx2" type="double precision"/>
            <parameter mode="IN" name="skewy2" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_scale(geometry, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, XFactor, YFactor - Scale a geometry by given factors.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_Scale($1, $2, $3, 1)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_scale(geometry, double precision, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, XFactor, YFactor, ZFactor - Scale a geometry by given factors.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_Scale($1, public.ST_MakePoint($2, $3, $4))]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_scale(geometry, geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, factor - Scale a geometry by given factors.]]></comment>
         <definition language="c"><![CDATA[ST_Scale]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_scale(geometry, geometry, origin geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, factor, origin - Scale a geometry by given factors.]]></comment>
         <definition language="c"><![CDATA[ST_Scale]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" name="origin" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_scalex(raster)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the X component of the pixel width in units of coordinate reference system.]]></comment>
         <definition language="c"><![CDATA[RASTER_getXScale]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_scaley(raster)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the Y component of the pixel height in units of coordinate reference system.]]></comment>
         <definition language="c"><![CDATA[RASTER_getYScale]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_segmentize(geog geography, max_segment_length double precision)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geog, max_segment_length - Return a modified geometry/geography having no segment longer than the given distance.]]></comment>
         <definition language="c"><![CDATA[geography_segmentize]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="max_segment_length" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_segmentize(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, max_segment_length - Return a modified geometry/geography having no segment longer than the given distance.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_segmentize2d]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setbandindex(rast raster, band integer, outdbindex integer, force boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, band, outdbindex, force=false - Update the external band number of an out-db band]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_SetBandPath($1, $2, NULL, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="outdbindex" type="integer"/>
            <parameter mode="IN" name="force" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setbandisnodata(rast raster, band integer DEFAULT 1)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, band=1 - Sets the isnodata flag of the band to TRUE.]]></comment>
         <definition language="c"><![CDATA[RASTER_setBandIsNoData]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setbandnodatavalue(rast raster, band integer, nodatavalue double precision, forcechecking boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, band, nodatavalue, forcechecking=false - Sets the value for the given band that represents no data. Band 1 is assumed if no band is specified. To mark a band as having no nodata value, set the nodata value = NULL.]]></comment>
         <definition language="c"><![CDATA[RASTER_setBandNoDataValue]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="nodatavalue" type="double precision"/>
            <parameter mode="IN" name="forcechecking" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_setbandnodatavalue(rast raster, nodatavalue double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nodatavalue - Sets the value for the given band that represents no data. Band 1 is assumed if no band is specified. To mark a band as having no nodata value, set the nodata value = NULL.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_setbandnodatavalue($1, 1, $2, FALSE)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nodatavalue" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setbandpath(rast raster, band integer, outdbpath text, outdbindex integer, force boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, band, outdbpath, outdbindex, force=false - Update the external path and band number of an out-db band]]></comment>
         <definition language="c"><![CDATA[RASTER_setBandPath]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="outdbpath" type="text"/>
            <parameter mode="IN" name="outdbindex" type="integer"/>
            <parameter mode="IN" name="force" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_seteffectivearea(geometry, double precision DEFAULT '-1'::integer, integer DEFAULT 1)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, threshold = 0, set_area = 1 - Sets the effective area for each vertex, storing the value in the M ordinate. A simplified geometry can then be generated by filtering on the M ordinate.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_SetEffectiveArea]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setgeoreference(rast raster, georef text, format text DEFAULT 'GDAL'::text)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, georefcoords, format=GDAL - Set Georeference 6 georeference parameters in a single call. Numbers should be separated by white space. Accepts inputs in GDAL or ESRI format. Default is GDAL.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
        params text[];
        rastout public.raster;
    BEGIN
        IF rast IS NULL THEN
            RAISE WARNING 'Cannot set georeferencing on a null raster in st_setgeoreference.';
            RETURN rastout;
        END IF;

        SELECT regexp_matches(georef,
            E'(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)\\s' ||
            E'(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)') INTO params;

        IF NOT FOUND THEN
            RAISE EXCEPTION 'st_setgeoreference requires a string with 6 floating point values.';
        END IF;

        IF format = 'ESRI' THEN
            -- params array is now:
            -- {scalex, skewy, skewx, scaley, upperleftx, upperlefty}
            rastout := public.ST_setscale(rast, params[1]::float8, params[4]::float8);
            rastout := public.ST_setskew(rastout, params[3]::float8, params[2]::float8);
            rastout := public.ST_setupperleft(rastout,
                                   params[5]::float8 - (params[1]::float8 * 0.5),
                                   params[6]::float8 - (params[4]::float8 * 0.5));
        ELSE
            IF format != 'GDAL' THEN
                RAISE WARNING 'Format ''%'' is not recognized, defaulting to GDAL format.', format;
            END IF;
            -- params array is now:
            -- {scalex, skewy, skewx, scaley, upperleftx, upperlefty}

            rastout := public.ST_setscale(rast, params[1]::float8, params[4]::float8);
            rastout := public.ST_setskew( rastout, params[3]::float8, params[2]::float8);
            rastout := public.ST_setupperleft(rastout, params[5]::float8, params[6]::float8);
        END IF;
        RETURN rastout;
    END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="georef" type="text"/>
            <parameter mode="IN" name="format" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setgeoreference(rast raster, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, upperleftx, upperlefty, scalex, scaley, skewx, skewy - Set Georeference 6 georeference parameters in a single call. Numbers should be separated by white space. Accepts inputs in GDAL or ESRI format. Default is GDAL.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_setgeoreference($1, array_to_string(ARRAY[$4, $7, $6, $5, $2, $3], ' '))]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="upperleftx" type="double precision"/>
            <parameter mode="IN" name="upperlefty" type="double precision"/>
            <parameter mode="IN" name="scalex" type="double precision"/>
            <parameter mode="IN" name="scaley" type="double precision"/>
            <parameter mode="IN" name="skewx" type="double precision"/>
            <parameter mode="IN" name="skewy" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setgeotransform(rast raster, imag double precision, jmag double precision, theta_i double precision, theta_ij double precision, xoffset double precision, yoffset double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[RASTER_setGeotransform]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="imag" type="double precision"/>
            <parameter mode="IN" name="jmag" type="double precision"/>
            <parameter mode="IN" name="theta_i" type="double precision"/>
            <parameter mode="IN" name="theta_ij" type="double precision"/>
            <parameter mode="IN" name="xoffset" type="double precision"/>
            <parameter mode="IN" name="yoffset" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setpoint(geometry, integer, geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: linestring, zerobasedposition, point - Replace point of a linestring with a given point.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_setpoint_linestring]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setrotation(rast raster, rotation double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, rotation - Set the rotation of the raster in radian.]]></comment>
         <definition language="c"><![CDATA[RASTER_setRotation]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="rotation" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setscale(rast raster, scale double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, xy - Sets the X and Y size of pixels in units of coordinate reference system. Number units/pixel width/height.]]></comment>
         <definition language="c"><![CDATA[RASTER_setScale]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="scale" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setscale(rast raster, scalex double precision, scaley double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, x, y - Sets the X and Y size of pixels in units of coordinate reference system. Number units/pixel width/height.]]></comment>
         <definition language="c"><![CDATA[RASTER_setScaleXY]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="scalex" type="double precision"/>
            <parameter mode="IN" name="scaley" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setskew(rast raster, skew double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, skewxy - Sets the georeference X and Y skew (or rotation parameter). If only one is passed in, sets X and Y to the same value.]]></comment>
         <definition language="c"><![CDATA[RASTER_setSkew]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="skew" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setskew(rast raster, skewx double precision, skewy double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, skewx, skewy - Sets the georeference X and Y skew (or rotation parameter). If only one is passed in, sets X and Y to the same value.]]></comment>
         <definition language="c"><![CDATA[RASTER_setSkewXY]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="skewx" type="double precision"/>
            <parameter mode="IN" name="skewy" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setsrid(geog geography, srid integer)" returnType="geography" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_set_srid]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
            <parameter mode="IN" name="srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setsrid(geometry, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, srid - Set the SRID on a geometry to a particular integer value.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_set_srid]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setsrid(rast raster, srid integer)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, srid - Sets the SRID of a raster to a particular integer srid defined in the spatial_ref_sys table.]]></comment>
         <definition language="c"><![CDATA[RASTER_setSRID]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setupperleft(rast raster, upperleftx double precision, upperlefty double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, x, y - Sets the value of the upper left corner of the pixel of the raster to projected X and Y coordinates.]]></comment>
         <definition language="c"><![CDATA[RASTER_setUpperLeftXY]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="upperleftx" type="double precision"/>
            <parameter mode="IN" name="upperlefty" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setvalue(rast raster, band integer, x integer, y integer, newvalue double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, bandnum, columnx, rowy, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or the pixels that intersect a particular geometry. Band numbers start at 1 and assumed to be 1 if not specified.]]></comment>
         <definition language="c"><![CDATA[RASTER_setPixelValue]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="x" type="integer"/>
            <parameter mode="IN" name="y" type="integer"/>
            <parameter mode="IN" name="newvalue" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setvalue(rast raster, geom geometry, newvalue double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, geom, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or the pixels that intersect a particular geometry. Band numbers start at 1 and assumed to be 1 if not specified.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_setvalues($1, 1, ARRAY[ROW($2, $3)]::geomval[], FALSE)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="newvalue" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setvalue(rast raster, nband integer, geom geometry, newvalue double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, bandnum, geom, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or the pixels that intersect a particular geometry. Band numbers start at 1 and assumed to be 1 if not specified.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_setvalues($1, $2, ARRAY[ROW($3, $4)]::geomval[], FALSE)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="newvalue" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_setvalue(rast raster, x integer, y integer, newvalue double precision)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, columnx, rowy, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or the pixels that intersect a particular geometry. Band numbers start at 1 and assumed to be 1 if not specified.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_SetValue($1, 1, $2, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="x" type="integer"/>
            <parameter mode="IN" name="y" type="integer"/>
            <parameter mode="IN" name="newvalue" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setvalues(rast raster, nband integer, geomvalset geomval[], keepnodata boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, geomvalset, keepnodata=FALSE - Returns modified raster resulting from setting the values of a given band.]]></comment>
         <definition language="c"><![CDATA[RASTER_setPixelValuesGeomval]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="geomvalset" type="geomval[]"/>
            <parameter mode="IN" name="keepnodata" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[] DEFAULT NULL::boolean[], keepnodata boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, columnx, rowy, newvalueset, noset=NULL, keepnodata=FALSE - Returns modified raster resulting from setting the values of a given band.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_setvalues($1, $2, $3, $4, $5, $6, FALSE, NULL, $7)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="x" type="integer"/>
            <parameter mode="IN" name="y" type="integer"/>
            <parameter mode="IN" name="newvalueset" type="double precision[]"/>
            <parameter mode="IN" name="noset" type="boolean[]"/>
            <parameter mode="IN" name="keepnodata" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], nosetvalue double precision, keepnodata boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, columnx, rowy, newvalueset, nosetvalue, keepnodata=FALSE - Returns modified raster resulting from setting the values of a given band.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_setvalues($1, $2, $3, $4, $5, NULL, TRUE, $6, $7)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="x" type="integer"/>
            <parameter mode="IN" name="y" type="integer"/>
            <parameter mode="IN" name="newvalueset" type="double precision[]"/>
            <parameter mode="IN" name="nosetvalue" type="double precision"/>
            <parameter mode="IN" name="keepnodata" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setvalues(rast raster, nband integer, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, columnx, rowy, width, height, newvalue, keepnodata=FALSE - Returns modified raster resulting from setting the values of a given band.]]></comment>
         <definition language="plpgsql"><![CDATA[BEGIN
		IF width <= 0 OR height <= 0 THEN
			RAISE EXCEPTION 'Values for width and height must be greater than zero';
			RETURN NULL;
		END IF;
		RETURN public._ST_setvalues($1, $2, $3, $4, array_fill($7, ARRAY[$6, $5]::int[]), NULL, FALSE, NULL, $8);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="x" type="integer"/>
            <parameter mode="IN" name="y" type="integer"/>
            <parameter mode="IN" name="width" type="integer"/>
            <parameter mode="IN" name="height" type="integer"/>
            <parameter mode="IN" name="newvalue" type="double precision"/>
            <parameter mode="IN" name="keepnodata" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_setvalues(rast raster, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, columnx, rowy, width, height, newvalue, keepnodata=FALSE - Returns modified raster resulting from setting the values of a given band.]]></comment>
         <definition language="plpgsql"><![CDATA[BEGIN
		IF width <= 0 OR height <= 0 THEN
			RAISE EXCEPTION 'Values for width and height must be greater than zero';
			RETURN NULL;
		END IF;
		RETURN public._ST_setvalues($1, 1, $2, $3, array_fill($6, ARRAY[$5, $4]::int[]), NULL, FALSE, NULL, $7);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="x" type="integer"/>
            <parameter mode="IN" name="y" type="integer"/>
            <parameter mode="IN" name="width" type="integer"/>
            <parameter mode="IN" name="height" type="integer"/>
            <parameter mode="IN" name="newvalue" type="double precision"/>
            <parameter mode="IN" name="keepnodata" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_sharedpaths(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: lineal1, lineal2 - Returns a collection containing paths shared by the two input linestrings/multilinestrings.]]></comment>
         <definition language="c"><![CDATA[ST_SharedPaths]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_shift_longitude(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._postgis_deprecate('ST_Shift_Longitude', 'ST_ShiftLongitude', '2.2.0');
    SELECT public.ST_ShiftLongitude($1);]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_shiftlongitude(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Toggle geometry coordinates between -180..180 and 0..360 ranges.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_longitude_shift]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_shortestline(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - Returns the 2-dimensional shortest line between two geometries]]></comment>
         <definition language="c"><![CDATA[LWGEOM_shortestline2d]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_simplify(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_simplify2d]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_simplify(geometry, double precision, boolean)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, tolerance, preserveCollapsed - Returns a "simplified" version of the given geometry using the Douglas-Peucker algorithm.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_simplify2d]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_simplifypreservetopology(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, tolerance - Returns a "simplified" version of the given geometry using the Douglas-Peucker algorithm. Will avoid creating derived geometries (polygons in particular) that are invalid.]]></comment>
         <definition language="c"><![CDATA[topologypreservesimplify]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_simplifyvw(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, tolerance - Returns a "simplified" version of the given geometry using the Visvalingam-Whyatt algorithm]]></comment>
         <definition language="c"><![CDATA[LWGEOM_SetEffectiveArea]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_skewx(raster)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the georeference X skew (or rotation parameter).]]></comment>
         <definition language="c"><![CDATA[RASTER_getXSkew]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_skewy(raster)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the georeference Y skew (or rotation parameter).]]></comment>
         <definition language="c"><![CDATA[RASTER_getYSkew]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_slope(rast raster, nband integer DEFAULT 1, pixeltype text DEFAULT '32BF'::text, units text DEFAULT 'DEGREES'::text, scale double precision DEFAULT 1.0, interpolate_nodata boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_slope($1, $2, NULL::public.raster, $3, $4, $5, $6)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="units" type="text"/>
            <parameter mode="IN" name="scale" type="double precision"/>
            <parameter mode="IN" name="interpolate_nodata" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_slope(rast raster, nband integer, customextent raster, pixeltype text DEFAULT '32BF'::text, units text DEFAULT 'DEGREES'::text, scale double precision DEFAULT 1.0, interpolate_nodata boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		_rast public.raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent public.raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;

		IF interpolate_nodata IS TRUE THEN
			_rast := public.ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'public.st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;

		-- get properties
		_pixwidth := public.ST_PixelWidth(_rast);
		_pixheight := public.ST_PixelHeight(_rast);
		SELECT width, height INTO _width, _height FROM public.ST_Metadata(_rast);

		RETURN public.ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			' public._ST_slope4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1,
			_pixwidth::text, _pixheight::text,
			_width::text, _height::text,
			units::text, scale::text
		);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="customextent" type="raster"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="units" type="text"/>
            <parameter mode="IN" name="scale" type="double precision"/>
            <parameter mode="IN" name="interpolate_nodata" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_snap(geom1 geometry, geom2 geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: input, reference, tolerance - Snap segments and vertices of input geometry to vertices of a reference geometry.]]></comment>
         <definition language="c"><![CDATA[ST_Snap]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_snaptogrid(geom1 geometry, geom2 geometry, double precision, double precision, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, pointOrigin, sizeX, sizeY, sizeZ, sizeM - Snap all points of the input geometry to a regular grid.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_snaptogrid_pointoff]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_snaptogrid(geometry, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, size - Snap all points of the input geometry to a regular grid.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_SnapToGrid($1, 0, 0, $2, $2)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_snaptogrid(geometry, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, sizeX, sizeY - Snap all points of the input geometry to a regular grid.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_SnapToGrid($1, 0, 0, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_snaptogrid(geometry, double precision, double precision, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, originX, originY, sizeX, sizeY - Snap all points of the input geometry to a regular grid.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_snaptogrid]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_snaptogrid(rast raster, gridx double precision, gridy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125, scalex double precision DEFAULT 0, scaley double precision DEFAULT 0)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, gridx, gridy, algorithm=NearestNeighbour, maxerr=0.125, scalex=DEFAULT 0, scaley=DEFAULT 0 - Resample a raster by snapping it to a grid. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_GdalWarp($1, $4, $5, NULL, $6, $7, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="gridx" type="double precision"/>
            <parameter mode="IN" name="gridy" type="double precision"/>
            <parameter mode="IN" name="algorithm" type="text"/>
            <parameter mode="IN" name="maxerr" type="double precision"/>
            <parameter mode="IN" name="scalex" type="double precision"/>
            <parameter mode="IN" name="scaley" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalex double precision, scaley double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, gridx, gridy, scalex, scaley, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by snapping it to a grid. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_gdalwarp($1, $6, $7, NULL, $4, $5, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="gridx" type="double precision"/>
            <parameter mode="IN" name="gridy" type="double precision"/>
            <parameter mode="IN" name="scalex" type="double precision"/>
            <parameter mode="IN" name="scaley" type="double precision"/>
            <parameter mode="IN" name="algorithm" type="text"/>
            <parameter mode="IN" name="maxerr" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalexy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, gridx, gridy, scalexy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by snapping it to a grid. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_gdalwarp($1, $5, $6, NULL, $4, $4, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="gridx" type="double precision"/>
            <parameter mode="IN" name="gridy" type="double precision"/>
            <parameter mode="IN" name="scalexy" type="double precision"/>
            <parameter mode="IN" name="algorithm" type="text"/>
            <parameter mode="IN" name="maxerr" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_split(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: input, blade - Returns a collection of geometries resulting by splitting a geometry.]]></comment>
         <definition language="c"><![CDATA[ST_Split]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_srid(geog geography)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_get_srid]]></definition>
         <parameters>
            <parameter mode="IN" name="geog" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_srid(geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1 - Returns the spatial reference identifier for the ST_Geometry as defined in spatial_ref_sys table.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_get_srid]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_srid(raster)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the spatial reference identifier of the raster as defined in spatial_ref_sys table.]]></comment>
         <definition language="c"><![CDATA[RASTER_getSRID]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_startpoint(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Returns the first point of a LINESTRING geometry as a POINT.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_startpoint_linestring]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_stddev4ma(matrix double precision[], nodatamode text, VARIADIC args text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT stddev(unnest) FROM unnest($1)]]></definition>
         <parameters>
            <parameter mode="IN" name="matrix" type="double precision[]"/>
            <parameter mode="IN" name="nodatamode" type="text"/>
            <parameter mode="VARIADIC" name="args" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_stddev4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT stddev(unnest) FROM unnest($1)]]></definition>
         <parameters>
            <parameter mode="IN" name="value" type="double precision[]"/>
            <parameter mode="IN" name="pos" type="integer[]"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_subdivide(geom geometry, maxvertices integer DEFAULT 256)" returnType="SETOF geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, max_vertices=256 - Returns a set of geometry where no geometry in the set has more than the specified number of vertices.]]></comment>
         <definition language="c"><![CDATA[ST_Subdivide]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="maxvertices" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_sum4ma(matrix double precision[], nodatamode text, VARIADIC args text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
        _matrix float[][];
        sum float;
    BEGIN
        _matrix := matrix;
        sum := 0;
        FOR x in array_lower(matrix, 1)..array_upper(matrix, 1) LOOP
            FOR y in array_lower(matrix, 2)..array_upper(matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF nodatamode = 'ignore' THEN
                        _matrix[x][y] := 0;
                    ELSE
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                sum := sum + _matrix[x][y];
            END LOOP;
        END LOOP;
        RETURN sum;
    END;]]></definition>
         <parameters>
            <parameter mode="IN" name="matrix" type="double precision[]"/>
            <parameter mode="IN" name="nodatamode" type="text"/>
            <parameter mode="VARIADIC" name="args" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_sum4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		_value double precision[][][];
		sum double precision;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		sum := 0;

		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;

		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;

					sum := sum + _value[z][y][x];
				END LOOP;
			END LOOP;
		END LOOP;

		RETURN sum;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="value" type="double precision[]"/>
            <parameter mode="IN" name="pos" type="integer[]"/>
            <parameter mode="VARIADIC" name="userargs" type="text[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_summary(geography)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g - Returns a text summary of the contents of the geometry.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_summary]]></definition>
         <parameters>
            <parameter mode="IN" type="geography"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_summary(geometry)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g - Returns a text summary of the contents of the geometry.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_summary]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_summary(rast raster)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns a text summary of the contents of the raster.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		extent box2d;
		metadata record;
		bandmetadata record;
		msg text;
		msgset text[];
	BEGIN
		extent := public.ST_Extent(rast::public.geometry);
		metadata := public.ST_Metadata(rast);

		msg := 'Raster of ' || metadata.width || 'x' || metadata.height || ' pixels has ' || metadata.numbands || ' ';

		IF metadata.numbands = 1 THEN
			msg := msg || 'band ';
		ELSE
			msg := msg || 'bands ';
		END IF;
		msg := msg || 'and extent of ' || extent;

		IF
			round(metadata.skewx::numeric, 10) <> round(0::numeric, 10) OR
			round(metadata.skewy::numeric, 10) <> round(0::numeric, 10)
		THEN
			msg := 'Skewed ' || overlay(msg placing 'r' from 1 for 1);
		END IF;

		msgset := Array[]::text[] || msg;

		FOR bandmetadata IN SELECT * FROM public.ST_BandMetadata(rast, ARRAY[]::int[]) LOOP
			msg := 'band ' || bandmetadata.bandnum || ' of pixtype ' || bandmetadata.pixeltype || ' is ';
			IF bandmetadata.isoutdb IS FALSE THEN
				msg := msg || 'in-db ';
			ELSE
				msg := msg || 'out-db ';
			END IF;

			msg := msg || 'with ';
			IF bandmetadata.nodatavalue IS NOT NULL THEN
				msg := msg || 'NODATA value of ' || bandmetadata.nodatavalue;
			ELSE
				msg := msg || 'no NODATA value';
			END IF;

			msgset := msgset || ('    ' || msg);
		END LOOP;

		RETURN array_to_string(msgset, E'\n');
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_summarystats(rast raster, exclude_nodata_value boolean)" returnType="summarystats" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, exclude_nodata_value - Returns summarystats consisting of count, sum, mean, stddev, min, max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_summarystats($1, 1, $2, 1)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_summarystats(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true)" returnType="summarystats" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, exclude_nodata_value - Returns summarystats consisting of count, sum, mean, stddev, min, max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_summarystats($1, $2, $3, 1)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_summarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean)" returnType="summarystats" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastertable, rastercolumn, exclude_nodata_value - Returns summarystats consisting of count, sum, mean, stddev, min, max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_summarystats($1, $2, 1, $3, 1)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_summarystats(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true)" returnType="summarystats" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true - Returns summarystats consisting of count, sum, mean, stddev, min, max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_summarystats($1, $2, $3, $4, 1)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_summarystatsagg(raster, boolean, double precision)" returnType="summarystats" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: rast, exclude_nodata_value, sample_percent - Aggregate. Returns summarystats consisting of count, sum, mean, stddev, min, max for a given raster band of a set of raster. Band 1 is assumed is no band is specified.]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="boolean"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_summarystatsagg(raster, integer, boolean)" returnType="summarystats" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: rast, nband, exclude_nodata_value - Aggregate. Returns summarystats consisting of count, sum, mean, stddev, min, max for a given raster band of a set of raster. Band 1 is assumed is no band is specified.]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_summarystatsagg(raster, integer, boolean, double precision)" returnType="summarystats" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: rast, nband, exclude_nodata_value, sample_percent - Aggregate. Returns summarystats consisting of count, sum, mean, stddev, min, max for a given raster band of a set of raster. Band 1 is assumed is no band is specified.]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="boolean"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_swapordinates(geom geometry, ords cstring)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, ords - Returns a version of the given geometry with given ordinate values swapped.]]></comment>
         <definition language="c"><![CDATA[ST_SwapOrdinates]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="ords" type="cstring"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_symdifference(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, geomB - Returns a geometry that represents the portions of A and B that do not intersect. It is called a symmetric difference because ST_SymDifference(A,B) = ST_SymDifference(B,A).]]></comment>
         <definition language="c"><![CDATA[symdifference]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_symmetricdifference(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[symdifference]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_tile(rast raster, nband integer, width integer, height integer, padwithnodata boolean DEFAULT false, nodataval double precision DEFAULT NULL::double precision)" returnType="SETOF raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, width, height, padwithnodata=FALSE, nodataval=NULL - Returns a set of rasters resulting from the split of the input raster based upon the desired dimensions of the output rasters.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_tile($1, $3, $4, ARRAY[$2]::integer[], $5, $6)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="width" type="integer"/>
            <parameter mode="IN" name="height" type="integer"/>
            <parameter mode="IN" name="padwithnodata" type="boolean"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_tile(rast raster, nband integer[], width integer, height integer, padwithnodata boolean DEFAULT false, nodataval double precision DEFAULT NULL::double precision)" returnType="SETOF raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, width, height, padwithnodata=FALSE, nodataval=NULL - Returns a set of rasters resulting from the split of the input raster based upon the desired dimensions of the output rasters.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_tile($1, $3, $4, $2, $5, $6)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer[]"/>
            <parameter mode="IN" name="width" type="integer"/>
            <parameter mode="IN" name="height" type="integer"/>
            <parameter mode="IN" name="padwithnodata" type="boolean"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_tile(rast raster, width integer, height integer, padwithnodata boolean DEFAULT false, nodataval double precision DEFAULT NULL::double precision)" returnType="SETOF raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, width, height, padwithnodata=FALSE, nodataval=NULL - Returns a set of rasters resulting from the split of the input raster based upon the desired dimensions of the output rasters.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_tile($1, $2, $3, NULL::integer[], $4, $5)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="width" type="integer"/>
            <parameter mode="IN" name="height" type="integer"/>
            <parameter mode="IN" name="padwithnodata" type="boolean"/>
            <parameter mode="IN" name="nodataval" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_touches(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - Returns TRUE if the geometries have at least one point in common, but their interiors do not intersect.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) $2 AND public._ST_Touches($1,$2)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if raster rastA and rastB have at least one point in common but their interiors do not intersect.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_touches(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._st_touches($1, $2, $3, $4) END]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="nband1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nband2" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_touches(rast1 raster, rast2 raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, rastB - Return true if raster rastA and rastB have at least one point in common but their interiors do not intersect.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.st_touches($1, NULL::integer, $2, NULL::integer)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="rast2" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_tpi(rast raster, nband integer DEFAULT 1, pixeltype text DEFAULT '32BF'::text, interpolate_nodata boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_tpi($1, $2, NULL::public.raster, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="interpolate_nodata" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_tpi(rast raster, nband integer, customextent raster, pixeltype text DEFAULT '32BF'::text, interpolate_nodata boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		_rast public.raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent public.raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;

		IF interpolate_nodata IS TRUE THEN
			_rast := public.ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'public.st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;

		-- get properties
		_pixwidth := public.ST_PixelWidth(_rast);
		_pixheight := public.ST_PixelHeight(_rast);
		SELECT width, height INTO _width, _height FROM public.ST_Metadata(_rast);

		RETURN public.ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			' public._ST_tpi4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="customextent" type="raster"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="interpolate_nodata" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_transform(geom geometry, from_proj text, to_proj text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, from_proj, to_proj - Return a new geometry with its coordinates transformed to a different spatial reference.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.postgis_transform_geometry($1, $2, $3, 0)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="from_proj" type="text"/>
            <parameter mode="IN" name="to_proj" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_transform(geom geometry, from_proj text, to_srid integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, from_proj, to_srid - Return a new geometry with its coordinates transformed to a different spatial reference.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.postgis_transform_geometry($1, $2, proj4text, $3)
FROM spatial_ref_sys WHERE srid=$3;]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="from_proj" type="text"/>
            <parameter mode="IN" name="to_srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_transform(geom geometry, to_proj text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, to_proj - Return a new geometry with its coordinates transformed to a different spatial reference.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.postgis_transform_geometry($1, proj4text, $2, 0)
FROM spatial_ref_sys WHERE srid=public.ST_SRID($1);]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="to_proj" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_transform(geometry, integer)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, srid - Return a new geometry with its coordinates transformed to a different spatial reference.]]></comment>
         <definition language="c"><![CDATA[transform]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_transform(rast raster, alignto raster, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, alignto, algorithm=NearestNeighbor, maxerr=0.125 - Reprojects a raster in a known spatial reference system to another known spatial reference system using specified resampling algorithm. Options are NearestNeighbor, Bilinear, Cubic, CubicSpline, Lanczos defaulting to NearestNeighbor.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		_srid integer;
		_scalex double precision;
		_scaley double precision;
		_gridx double precision;
		_gridy double precision;
		_skewx double precision;
		_skewy double precision;
	BEGIN
		SELECT srid, scalex, scaley, upperleftx, upperlefty, skewx, skewy INTO _srid, _scalex, _scaley, _gridx, _gridy, _skewx, _skewy FROM st_metadata($2);

		RETURN public._ST_gdalwarp($1, $3, $4, _srid, _scalex, _scaley, _gridx, _gridy, _skewx, _skewy, NULL, NULL);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="alignto" type="raster"/>
            <parameter mode="IN" name="algorithm" type="text"/>
            <parameter mode="IN" name="maxerr" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_transform(rast raster, srid integer, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125, scalex double precision DEFAULT 0, scaley double precision DEFAULT 0)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, srid, algorithm=NearestNeighbor, maxerr=0.125, scalex, scaley - Reprojects a raster in a known spatial reference system to another known spatial reference system using specified resampling algorithm. Options are NearestNeighbor, Bilinear, Cubic, CubicSpline, Lanczos defaulting to NearestNeighbor.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_gdalwarp($1, $3, $4, $2, $5, $6)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="srid" type="integer"/>
            <parameter mode="IN" name="algorithm" type="text"/>
            <parameter mode="IN" name="maxerr" type="double precision"/>
            <parameter mode="IN" name="scalex" type="double precision"/>
            <parameter mode="IN" name="scaley" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_transform(rast raster, srid integer, scalex double precision, scaley double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, srid, scalex, scaley, algorithm=NearestNeighbor, maxerr=0.125 - Reprojects a raster in a known spatial reference system to another known spatial reference system using specified resampling algorithm. Options are NearestNeighbor, Bilinear, Cubic, CubicSpline, Lanczos defaulting to NearestNeighbor.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_gdalwarp($1, $5, $6, $2, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="srid" type="integer"/>
            <parameter mode="IN" name="scalex" type="double precision"/>
            <parameter mode="IN" name="scaley" type="double precision"/>
            <parameter mode="IN" name="algorithm" type="text"/>
            <parameter mode="IN" name="maxerr" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_transform(rast raster, srid integer, scalexy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public._ST_gdalwarp($1, $4, $5, $2, $3, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="srid" type="integer"/>
            <parameter mode="IN" name="scalexy" type="double precision"/>
            <parameter mode="IN" name="algorithm" type="text"/>
            <parameter mode="IN" name="maxerr" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_translate(geometry, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, deltax, deltay - Translate a geometry by given offsets.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_Translate($1, $2, $3, 0)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_translate(geometry, double precision, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, deltax, deltay, deltaz - Translate a geometry by given offsets.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_Affine($1, 1, 0, 0, 0, 1, 0, 0, 0, 1, $2, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_transscale(geometry, double precision, double precision, double precision, double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA, deltaX, deltaY, XFactor, YFactor - Translate a geometry by given factors and offsets.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_Affine($1,  $4, 0, 0,  0, $5, 0,
		0, 0, 1,  $2 * $4, $3 * $5, 0)]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
            <parameter mode="IN" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_tri(rast raster, nband integer DEFAULT 1, pixeltype text DEFAULT '32BF'::text, interpolate_nodata boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT public.ST_tri($1, $2, NULL::public.raster, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="interpolate_nodata" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_tri(rast raster, nband integer, customextent raster, pixeltype text DEFAULT '32BF'::text, interpolate_nodata boolean DEFAULT false)" returnType="raster" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="plpgsql"><![CDATA[DECLARE
		_rast public.raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent public.raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;

		IF interpolate_nodata IS TRUE THEN
			_rast := public.ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'public.st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;

		-- get properties
		_pixwidth := public.ST_PixelWidth(_rast);
		_pixheight := public.ST_PixelHeight(_rast);
		SELECT width, height INTO _width, _height FROM public.ST_Metadata(_rast);

		RETURN public.ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			' public._ST_tri4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1);
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="customextent" type="raster"/>
            <parameter mode="IN" name="pixeltype" type="text"/>
            <parameter mode="IN" name="interpolate_nodata" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_unaryunion(geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom - Like ST_Union, but working at the geometry component level.]]></comment>
         <definition language="c"><![CDATA[ST_UnaryUnion]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_union(geom1 geometry, geom2 geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, g2 - Returns a geometry that represents the point set union of the Geometries.]]></comment>
         <definition language="c"><![CDATA[geomunion]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_union(geometry)" returnType="geometry" securityType="INVOKER" type="AGGREGATE">
         <comment><![CDATA[args: g1field - Returns a geometry that represents the point set union of the Geometries.]]></comment>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_union(geometry[])" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1_array - Returns a geometry that represents the point set union of the Geometries.]]></comment>
         <definition language="c"><![CDATA[pgis_union_geometry_array]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_union(raster)" returnType="raster" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_union(raster, integer)" returnType="raster" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_union(raster, integer, text)" returnType="raster" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="integer"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_union(raster, text)" returnType="raster" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_union(raster, unionarg[])" returnType="raster" securityType="INVOKER" type="AGGREGATE">
         <comment/>
         <definition language="internal"><![CDATA[aggregate_dummy]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
            <parameter mode="IN" type="unionarg[]"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_upperleftx(raster)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the upper left X coordinate of raster in projected spatial ref.]]></comment>
         <definition language="c"><![CDATA[RASTER_getXUpperLeft]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_upperlefty(raster)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the upper left Y coordinate of raster in projected spatial ref.]]></comment>
         <definition language="c"><![CDATA[RASTER_getYUpperLeft]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_value(rast raster, band integer, pt geometry, exclude_nodata_value boolean DEFAULT true)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, band, pt, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
        x float8;
        y float8;
        gtype text;
    BEGIN
        gtype := public.ST_GeometryType(pt);
        IF ( gtype != 'ST_Point' ) THEN
            RAISE EXCEPTION 'Attempting to get the value of a pixel with a non-point geometry';
        END IF;

				IF public.ST_SRID(pt) != public.ST_SRID(rast) THEN
            RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
				END IF;

        x := public.ST_x(pt);
        y := public.ST_y(pt);
        RETURN public.ST_value(rast,
                        band,
                        public.ST_worldtorastercoordx(rast, x, y),
                        public.ST_worldtorastercoordy(rast, x, y),
                        exclude_nodata_value);
    END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="pt" type="geometry"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_value(rast raster, band integer, x integer, y integer, exclude_nodata_value boolean DEFAULT true)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, band, x, y, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.]]></comment>
         <definition language="c"><![CDATA[RASTER_getPixelValue]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="band" type="integer"/>
            <parameter mode="IN" name="x" type="integer"/>
            <parameter mode="IN" name="y" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_value(rast raster, pt geometry, exclude_nodata_value boolean DEFAULT true)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, pt, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.ST_value($1, 1, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="pt" type="geometry"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_value(rast raster, x integer, y integer, exclude_nodata_value boolean DEFAULT true)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, x, y, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT st_value($1, 1, $2, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="x" type="integer"/>
            <parameter mode="IN" name="y" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_valuecount(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, searchvalues double precision[] DEFAULT NULL::double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband=1, exclude_nodata_value=true, searchvalues=NULL, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
         <definition language="sql"><![CDATA[SELECT value, count FROM public._ST_valuecount($1, $2, $3, $4, $5)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="searchvalues" type="double precision[]"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
            <parameter mode="OUT" name="count" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision DEFAULT 0)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, exclude_nodata_value, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
         <definition language="sql"><![CDATA[SELECT ( public._ST_valuecount($1, $2, $3, ARRAY[$4]::double precision[], $5)).count]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="searchvalue" type="double precision"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_valuecount(rast raster, nband integer, searchvalue double precision, roundto double precision DEFAULT 0)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
         <definition language="sql"><![CDATA[SELECT ( public._ST_valuecount($1, $2, TRUE, ARRAY[$3]::double precision[], $4)).count]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="searchvalue" type="double precision"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_valuecount(rast raster, nband integer, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, nband, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
         <definition language="sql"><![CDATA[SELECT value, count FROM public._ST_valuecount($1, $2, TRUE, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="searchvalues" type="double precision[]"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
            <parameter mode="OUT" name="count" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_valuecount(rast raster, searchvalue double precision, roundto double precision DEFAULT 0)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
         <definition language="sql"><![CDATA[SELECT ( public._ST_valuecount($1, 1, TRUE, ARRAY[$2]::double precision[], $3)).count]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="searchvalue" type="double precision"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_valuecount(rast raster, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
         <definition language="sql"><![CDATA[SELECT value, count FROM public._ST_valuecount($1, 1, TRUE, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="searchvalues" type="double precision[]"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
            <parameter mode="OUT" name="count" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_valuecount(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, searchvalues double precision[] DEFAULT NULL::double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true, searchvalues=NULL, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
         <definition language="sql"><![CDATA[SELECT value, count FROM public._ST_valuecount($1, $2, $3, $4, $5, $6)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="searchvalues" type="double precision[]"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
            <parameter mode="OUT" name="count" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision DEFAULT 0)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastertable, rastercolumn, nband, exclude_nodata_value, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
         <definition language="sql"><![CDATA[SELECT ( public._ST_valuecount($1, $2, $3, $4, ARRAY[$5]::double precision[], $6)).count]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="searchvalue" type="double precision"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision DEFAULT 0)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastertable, rastercolumn, nband, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
         <definition language="sql"><![CDATA[SELECT ( public._ST_valuecount($1, $2, $3, TRUE, ARRAY[$4]::double precision[], $5)).count]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="searchvalue" type="double precision"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastertable, rastercolumn, nband, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
         <definition language="sql"><![CDATA[SELECT value, count FROM public._ST_valuecount($1, $2, $3, TRUE, $4, $5)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="searchvalues" type="double precision[]"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
            <parameter mode="OUT" name="count" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_valuecount(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision DEFAULT 0)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastertable, rastercolumn, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
         <definition language="sql"><![CDATA[SELECT ( public._ST_valuecount($1, $2, 1, TRUE, ARRAY[$3]::double precision[], $4)).count]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="searchvalue" type="double precision"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_valuecount(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastertable, rastercolumn, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
         <definition language="sql"><![CDATA[SELECT value, count FROM public._ST_valuecount($1, $2, 1, TRUE, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="searchvalues" type="double precision[]"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
            <parameter mode="OUT" name="count" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_valuepercent(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, searchvalues double precision[] DEFAULT NULL::double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT value, percent FROM public._ST_valuecount($1, $2, $3, $4, $5)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="searchvalues" type="double precision[]"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_valuepercent(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision DEFAULT 0)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT ( public._ST_valuecount($1, $2, $3, ARRAY[$4]::double precision[], $5)).percent]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="searchvalue" type="double precision"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_valuepercent(rast raster, nband integer, searchvalue double precision, roundto double precision DEFAULT 0)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT ( public._ST_valuecount($1, $2, TRUE, ARRAY[$3]::double precision[], $4)).percent]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="searchvalue" type="double precision"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_valuepercent(rast raster, nband integer, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT value, percent FROM public._ST_valuecount($1, $2, TRUE, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="searchvalues" type="double precision[]"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_valuepercent(rast raster, searchvalue double precision, roundto double precision DEFAULT 0)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT ( public._ST_valuecount($1, 1, TRUE, ARRAY[$2]::double precision[], $3)).percent]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="searchvalue" type="double precision"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_valuepercent(rast raster, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT value, percent FROM public._ST_valuecount($1, 1, TRUE, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="searchvalues" type="double precision[]"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_valuepercent(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, searchvalues double precision[] DEFAULT NULL::double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT value, percent FROM public._ST_valuecount($1, $2, $3, $4, $5, $6)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="searchvalues" type="double precision[]"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision DEFAULT 0)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT ( public._ST_valuecount($1, $2, $3, $4, ARRAY[$5]::double precision[], $6)).percent]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="exclude_nodata_value" type="boolean"/>
            <parameter mode="IN" name="searchvalue" type="double precision"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision DEFAULT 0)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT ( public._ST_valuecount($1, $2, $3, TRUE, ARRAY[$4]::double precision[], $5)).percent]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="searchvalue" type="double precision"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT value, percent FROM public._ST_valuecount($1, $2, $3, TRUE, $4, $5)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="nband" type="integer"/>
            <parameter mode="IN" name="searchvalues" type="double precision[]"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_valuepercent(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision DEFAULT 0)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT ( public._ST_valuecount($1, $2, 1, TRUE, ARRAY[$3]::double precision[], $4)).percent]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="searchvalue" type="double precision"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="st_valuepercent(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT value, percent FROM public._ST_valuecount($1, $2, 1, TRUE, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="rastertable" type="text"/>
            <parameter mode="IN" name="rastercolumn" type="text"/>
            <parameter mode="IN" name="searchvalues" type="double precision[]"/>
            <parameter mode="IN" name="roundto" type="double precision"/>
            <parameter mode="OUT" name="value" type="double precision"/>
            <parameter mode="OUT" name="percent" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_voronoilines(g1 geometry, tolerance double precision DEFAULT 0.0, extend_to geometry DEFAULT NULL::geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, tolerance, extend_to - Returns the boundaries between the cells of the Voronoi diagram constructed from the vertices of a geometry.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_Voronoi(g1, extend_to, tolerance, false)]]></definition>
         <parameters>
            <parameter mode="IN" name="g1" type="geometry"/>
            <parameter mode="IN" name="tolerance" type="double precision"/>
            <parameter mode="IN" name="extend_to" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_voronoipolygons(g1 geometry, tolerance double precision DEFAULT 0.0, extend_to geometry DEFAULT NULL::geometry)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: g1, tolerance, extend_to - Returns the cells of the Voronoi diagram constructed from the vertices of a geometry.]]></comment>
         <definition language="sql"><![CDATA[SELECT public._ST_Voronoi(g1, extend_to, tolerance, true)]]></definition>
         <parameters>
            <parameter mode="IN" name="g1" type="geometry"/>
            <parameter mode="IN" name="tolerance" type="double precision"/>
            <parameter mode="IN" name="extend_to" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_width(raster)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast - Returns the width of the raster in pixels.]]></comment>
         <definition language="c"><![CDATA[RASTER_getWidth]]></definition>
         <parameters>
            <parameter mode="IN" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_within(geom1 geometry, geom2 geometry)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: A, B - Returns true if the geometry A is completely inside geometry B]]></comment>
         <definition language="sql"><![CDATA[SELECT $2 OPERATOR(public.~) $1 AND public._ST_Contains($2,$1)]]></definition>
         <parameters>
            <parameter mode="IN" name="geom1" type="geometry"/>
            <parameter mode="IN" name="geom2" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if no points of raster rastA lie in the exterior of raster rastB and at least one point of the interior of rastA lies in the interior of rastB.]]></comment>
         <definition language="sql"><![CDATA[SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_within(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._st_contains($3, $4, $1, $2) END]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="nband1" type="integer"/>
            <parameter mode="IN" name="rast2" type="raster"/>
            <parameter mode="IN" name="nband2" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_within(rast1 raster, rast2 raster)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rastA, rastB - Return true if no points of raster rastA lie in the exterior of raster rastB and at least one point of the interior of rastA lies in the interior of rastB.]]></comment>
         <definition language="sql"><![CDATA[SELECT public.st_within($1, NULL::integer, $2, NULL::integer)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast1" type="raster"/>
            <parameter mode="IN" name="rast2" type="raster"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_wkbtosql(wkb bytea)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKB - Return a specified ST_Geometry value from Well-Known Binary representation (WKB). This is an alias name for ST_GeomFromWKB that takes no srid]]></comment>
         <definition language="c"><![CDATA[LWGEOM_from_WKB]]></definition>
         <parameters>
            <parameter mode="IN" name="wkb" type="bytea"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_wkttosql(text)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText]]></comment>
         <definition language="c"><![CDATA[LWGEOM_from_text]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_worldtorastercoord(rast raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer)" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, longitude, latitude - Returns the upper left corner as column and row given geometric X and Y (longitude and latitude) or a point geometry expressed in the spatial reference coordinate system of the raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT columnx, rowy FROM public._ST_worldtorastercoord($1, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="longitude" type="double precision"/>
            <parameter mode="IN" name="latitude" type="double precision"/>
            <parameter mode="OUT" name="columnx" type="integer"/>
            <parameter mode="OUT" name="rowy" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_worldtorastercoord(rast raster, pt geometry, OUT columnx integer, OUT rowy integer)" returnType="record" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, pt - Returns the upper left corner as column and row given geometric X and Y (longitude and latitude) or a point geometry expressed in the spatial reference coordinate system of the raster.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		rx integer;
		ry integer;
	BEGIN
		IF public.ST_geometrytype(pt) != 'ST_Point' THEN
			RAISE EXCEPTION 'Attempting to compute raster coordinate with a non-point geometry';
		END IF;
		IF public.ST_SRID(rast) != public.ST_SRID(pt) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;

		SELECT rc.columnx AS x, rc.rowy AS y INTO columnx, rowy FROM public._ST_worldtorastercoord($1, public.ST_x(pt), public.ST_y(pt)) AS rc;
		RETURN;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="pt" type="geometry"/>
            <parameter mode="OUT" name="columnx" type="integer"/>
            <parameter mode="OUT" name="rowy" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_worldtorastercoordx(rast raster, pt geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, pt - Returns the column in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		xr integer;
	BEGIN
		IF ( public.ST_geometrytype(pt) != 'ST_Point' ) THEN
			RAISE EXCEPTION 'Attempting to compute raster coordinate with a non-point geometry';
		END IF;
		IF public.ST_SRID(rast) != public.ST_SRID(pt) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;
		SELECT columnx INTO xr FROM public._ST_worldtorastercoord($1, public.ST_x(pt), public.ST_y(pt));
		RETURN xr;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="pt" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_worldtorastercoordx(rast raster, xw double precision)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, xw - Returns the column in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT columnx FROM public._ST_worldtorastercoord($1, $2, NULL)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="xw" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_worldtorastercoordx(rast raster, xw double precision, yw double precision)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, xw, yw - Returns the column in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT columnx FROM public._ST_worldtorastercoord($1, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="xw" type="double precision"/>
            <parameter mode="IN" name="yw" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_worldtorastercoordy(rast raster, pt geometry)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, pt - Returns the row in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
		yr integer;
	BEGIN
		IF ( st_geometrytype(pt) != 'ST_Point' ) THEN
			RAISE EXCEPTION 'Attempting to compute raster coordinate with a non-point geometry';
		END IF;
		IF ST_SRID(rast) != ST_SRID(pt) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;
		SELECT rowy INTO yr FROM public._ST_worldtorastercoord($1, st_x(pt), st_y(pt));
		RETURN yr;
	END;]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="pt" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_worldtorastercoordy(rast raster, xw double precision, yw double precision)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, xw, yw - Returns the row in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT rowy FROM public._ST_worldtorastercoord($1, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="xw" type="double precision"/>
            <parameter mode="IN" name="yw" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_worldtorastercoordy(rast raster, yw double precision)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: rast, xw - Returns the row in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
         <definition language="sql"><![CDATA[SELECT rowy FROM public._ST_worldtorastercoord($1, NULL, $2)]]></definition>
         <parameters>
            <parameter mode="IN" name="rast" type="raster"/>
            <parameter mode="IN" name="yw" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_wrapx(geom geometry, wrap double precision, move double precision)" returnType="geometry" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geom, wrap, move - Wrap a geometry around an X value.]]></comment>
         <definition language="c"><![CDATA[ST_WrapX]]></definition>
         <parameters>
            <parameter mode="IN" name="geom" type="geometry"/>
            <parameter mode="IN" name="wrap" type="double precision"/>
            <parameter mode="IN" name="move" type="double precision"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_x(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_point - Return the X coordinate of the point, or NULL if not available. Input must be a point.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_x_point]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_xmax(box3d)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: aGeomorBox2DorBox3D - Returns X maxima of a bounding box 2d or 3d or a geometry.]]></comment>
         <definition language="c"><![CDATA[BOX3D_xmax]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_xmin(box3d)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: aGeomorBox2DorBox3D - Returns X minima of a bounding box 2d or 3d or a geometry.]]></comment>
         <definition language="c"><![CDATA[BOX3D_xmin]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_y(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_point - Return the Y coordinate of the point, or NULL if not available. Input must be a point.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_y_point]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_ymax(box3d)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: aGeomorBox2DorBox3D - Returns Y maxima of a bounding box 2d or 3d or a geometry.]]></comment>
         <definition language="c"><![CDATA[BOX3D_ymax]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_ymin(box3d)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: aGeomorBox2DorBox3D - Returns Y minima of a bounding box 2d or 3d or a geometry.]]></comment>
         <definition language="c"><![CDATA[BOX3D_ymin]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_z(geometry)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: a_point - Return the Z coordinate of the point, or NULL if not available. Input must be a point.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_z_point]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_zmax(box3d)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: aGeomorBox2DorBox3D - Returns Z minima of a bounding box 2d or 3d or a geometry.]]></comment>
         <definition language="c"><![CDATA[BOX3D_zmax]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_zmflag(geometry)" returnType="smallint" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: geomA - Returns ZM (dimension semantic) flag of the geometries as a small int. Values are: 0=2d, 1=3dm, 2=3dz, 3=4d.]]></comment>
         <definition language="c"><![CDATA[LWGEOM_zmflag]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="st_zmin(box3d)" returnType="double precision" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: aGeomorBox2DorBox3D - Returns Z minima of a bounding box 2d or 3d or a geometry.]]></comment>
         <definition language="c"><![CDATA[BOX3D_zmin]]></definition>
         <parameters>
            <parameter mode="IN" type="box3d"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="strpos(citext, citext)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT pg_catalog.strpos( pg_catalog.lower( $1::pg_catalog.text ), pg_catalog.lower( $2::pg_catalog.text ) );]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="text(geometry)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[LWGEOM_to_text]]></definition>
         <parameters>
            <parameter mode="IN" type="geometry"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="text_soundex(text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="c"><![CDATA[soundex]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="texticlike(citext, citext)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="internal"><![CDATA[texticlike]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="texticlike(citext, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="internal"><![CDATA[texticlike]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="texticnlike(citext, citext)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="internal"><![CDATA[texticnlike]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="texticnlike(citext, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="internal"><![CDATA[texticnlike]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="texticregexeq(citext, citext)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="internal"><![CDATA[texticregexeq]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="texticregexeq(citext, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="internal"><![CDATA[texticregexeq]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="texticregexne(citext, citext)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="internal"><![CDATA[texticregexne]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="texticregexne(citext, text)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="internal"><![CDATA[texticregexne]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="true" name="translate(citext, citext, text)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="sql"><![CDATA[SELECT pg_catalog.translate( pg_catalog.translate( $1::pg_catalog.text, pg_catalog.lower($2::pg_catalog.text), $3), pg_catalog.upper($2::pg_catalog.text), $3);]]></definition>
         <parameters>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="citext"/>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="unlockrows(text)" returnType="integer" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: auth_token - Remove all locks held by specified authorization id. Returns the number of locks released.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
	ret int;
BEGIN

	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	EXECUTE 'DELETE FROM authorization_table where authid = ' ||
		quote_literal($1);

	GET DIAGNOSTICS ret = ROW_COUNT;

	RETURN ret;
END;]]></definition>
         <parameters>
            <parameter mode="IN" type="text"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="updategeometrysrid(catalogn_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: catalog_name, schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid. If it was enforced with constraints, the constraints will be updated with new srid constraint. If the old was enforced by type definition, the type definition will be changed.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
	myrec RECORD;
	okay boolean;
	cname varchar;
	real_schema name;
	unknown_srid integer;
	new_srid integer := new_srid_in;

BEGIN

	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = false;

		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := true;
		END LOOP;

		IF ( okay <> true ) THEN
			RAISE EXCEPTION 'Invalid schema name';
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT INTO real_schema current_schema()::text;
	END IF;

	-- Ensure that column_name is in geometry_columns
	okay = false;
	FOR myrec IN SELECT type, coord_dimension FROM public.geometry_columns WHERE f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := true;
	END LOOP;
	IF (NOT okay) THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN false;
	END IF;

	-- Ensure that new_srid is valid
	IF ( new_srid > 0 ) THEN
		IF ( SELECT count(*) = 0 from spatial_ref_sys where srid = new_srid ) THEN
			RAISE EXCEPTION 'invalid SRID: % not found in spatial_ref_sys', new_srid;
			RETURN false;
		END IF;
	ELSE
		unknown_srid := public.ST_SRID('POINT EMPTY'::public.geometry);
		IF ( new_srid != unknown_srid ) THEN
			new_srid := unknown_srid;
			RAISE NOTICE 'SRID value % converted to the officially unknown SRID value %', new_srid_in, new_srid;
		END IF;
	END IF;

	IF postgis_constraint_srid(real_schema, table_name, column_name) IS NOT NULL THEN
	-- srid was enforced with constraints before, keep it that way.
        -- Make up constraint name
        cname = 'enforce_srid_'  || column_name;

        -- Drop enforce_srid constraint
        EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
            '.' || quote_ident(table_name) ||
            ' DROP constraint ' || quote_ident(cname);

        -- Update geometries SRID
        EXECUTE 'UPDATE ' || quote_ident(real_schema) ||
            '.' || quote_ident(table_name) ||
            ' SET ' || quote_ident(column_name) ||
            ' = public.ST_SetSRID(' || quote_ident(column_name) ||
            ', ' || new_srid::text || ')';

        -- Reset enforce_srid constraint
        EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
            '.' || quote_ident(table_name) ||
            ' ADD constraint ' || quote_ident(cname) ||
            ' CHECK (st_srid(' || quote_ident(column_name) ||
            ') = ' || new_srid::text || ')';
    ELSE
        -- We will use typmod to enforce if no srid constraints
        -- We are using postgis_type_name to lookup the new name
        -- (in case Paul changes his mind and flips geometry_columns to return old upper case name)
        EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) || '.' || quote_ident(table_name) ||
        ' ALTER COLUMN ' || quote_ident(column_name) || ' TYPE  geometry(' || public.postgis_type_name(myrec.type, myrec.coord_dimension, true) || ', ' || new_srid::text || ') USING public.ST_SetSRID(' || quote_ident(column_name) || ',' || new_srid::text || ');' ;
    END IF;

	RETURN real_schema || '.' || table_name || '.' || column_name ||' SRID changed to ' || new_srid::text;

END;]]></definition>
         <parameters>
            <parameter mode="IN" name="catalogn_name" type="character varying"/>
            <parameter mode="IN" name="schema_name" type="character varying"/>
            <parameter mode="IN" name="table_name" type="character varying"/>
            <parameter mode="IN" name="column_name" type="character varying"/>
            <parameter mode="IN" name="new_srid_in" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="updategeometrysrid(character varying, character varying, character varying, integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid. If it was enforced with constraints, the constraints will be updated with new srid constraint. If the old was enforced by type definition, the type definition will be changed.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
	ret  text;
BEGIN
	SELECT public.UpdateGeometrySRID('',$1,$2,$3,$4) into ret;
	RETURN ret;
END;]]></definition>
         <parameters>
            <parameter mode="IN" type="character varying"/>
            <parameter mode="IN" type="character varying"/>
            <parameter mode="IN" type="character varying"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="updategeometrysrid(character varying, character varying, integer)" returnType="text" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid. If it was enforced with constraints, the constraints will be updated with new srid constraint. If the old was enforced by type definition, the type definition will be changed.]]></comment>
         <definition language="plpgsql"><![CDATA[DECLARE
	ret  text;
BEGIN
	SELECT public.UpdateGeometrySRID('','',$1,$2,$3) into ret;
	RETURN ret;
END;]]></definition>
         <parameters>
            <parameter mode="IN" type="character varying"/>
            <parameter mode="IN" type="character varying"/>
            <parameter mode="IN" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: schema_name, table_name, column_name, new_srid - Change the SRID of all rasters in the user-specified column and table.]]></comment>
         <definition language="sql"><![CDATA[SELECT  public._UpdateRasterSRID($1, $2, $3, $4)]]></definition>
         <parameters>
            <parameter mode="IN" name="schema_name" type="name"/>
            <parameter mode="IN" name="table_name" type="name"/>
            <parameter mode="IN" name="column_name" type="name"/>
            <parameter mode="IN" name="new_srid" type="integer"/>
         </parameters>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="updaterastersrid(table_name name, column_name name, new_srid integer)" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment><![CDATA[args: table_name, column_name, new_srid - Change the SRID of all rasters in the user-specified column and table.]]></comment>
         <definition language="sql"><![CDATA[SELECT  public._UpdateRasterSRID('', $1, $2, $3)]]></definition>
         <parameters>
            <parameter mode="IN" name="table_name" type="name"/>
            <parameter mode="IN" name="column_name" type="name"/>
            <parameter mode="IN" name="new_srid" type="integer"/>
         </parameters>
      </routine>
   </routines>
</database>
